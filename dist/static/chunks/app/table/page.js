/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["app/table/page"],{

/***/ "(app-pages-browser)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%2FUsers%2Fnekhavhambemartin%2FDesktop%2Finsnip%20copy%2Fapp%2Ftable%2Fpage.tsx&server=false!":
/*!***********************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%2FUsers%2Fnekhavhambemartin%2FDesktop%2Finsnip%20copy%2Fapp%2Ftable%2Fpage.tsx&server=false! ***!
  \***********************************************************************************************************************************************************************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("Promise.resolve(/*! import() eager */).then(__webpack_require__.bind(__webpack_require__, /*! ./app/table/page.tsx */ \"(app-pages-browser)/./app/table/page.tsx\"))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvYnVpbGQvd2VicGFjay9sb2FkZXJzL25leHQtZmxpZ2h0LWNsaWVudC1lbnRyeS1sb2FkZXIuanM/bW9kdWxlcz0lMkZVc2VycyUyRm5la2hhdmhhbWJlbWFydGluJTJGRGVza3RvcCUyRmluc25pcCUyMGNvcHklMkZhcHAlMkZ0YWJsZSUyRnBhZ2UudHN4JnNlcnZlcj1mYWxzZSEiLCJtYXBwaW5ncyI6IkFBQUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLz81NGI4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCgvKiB3ZWJwYWNrTW9kZTogXCJlYWdlclwiICovIFwiL1VzZXJzL25la2hhdmhhbWJlbWFydGluL0Rlc2t0b3AvaW5zbmlwIGNvcHkvYXBwL3RhYmxlL3BhZ2UudHN4XCIpIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%2FUsers%2Fnekhavhambemartin%2FDesktop%2Finsnip%20copy%2Fapp%2Ftable%2Fpage.tsx&server=false!\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/next/dist/compiled/react/cjs/react-jsx-dev-runtime.development.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/next/dist/compiled/react/cjs/react-jsx-dev-runtime.development.js ***!
  \****************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("/**\n * @license React\n * react-jsx-dev-runtime.development.js\n *\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */ \nif (true) {\n    (function() {\n        \"use strict\";\n        var React = __webpack_require__(/*! next/dist/compiled/react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n        // ATTENTION\n        // When adding new symbols to this file,\n        // Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'\n        // The Symbol used to tag the ReactElement-like types.\n        var REACT_ELEMENT_TYPE = Symbol.for(\"react.element\");\n        var REACT_PORTAL_TYPE = Symbol.for(\"react.portal\");\n        var REACT_FRAGMENT_TYPE = Symbol.for(\"react.fragment\");\n        var REACT_STRICT_MODE_TYPE = Symbol.for(\"react.strict_mode\");\n        var REACT_PROFILER_TYPE = Symbol.for(\"react.profiler\");\n        var REACT_PROVIDER_TYPE = Symbol.for(\"react.provider\");\n        var REACT_CONTEXT_TYPE = Symbol.for(\"react.context\");\n        var REACT_FORWARD_REF_TYPE = Symbol.for(\"react.forward_ref\");\n        var REACT_SUSPENSE_TYPE = Symbol.for(\"react.suspense\");\n        var REACT_SUSPENSE_LIST_TYPE = Symbol.for(\"react.suspense_list\");\n        var REACT_MEMO_TYPE = Symbol.for(\"react.memo\");\n        var REACT_LAZY_TYPE = Symbol.for(\"react.lazy\");\n        var REACT_OFFSCREEN_TYPE = Symbol.for(\"react.offscreen\");\n        var REACT_CACHE_TYPE = Symbol.for(\"react.cache\");\n        var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;\n        var FAUX_ITERATOR_SYMBOL = \"@@iterator\";\n        function getIteratorFn(maybeIterable) {\n            if (maybeIterable === null || typeof maybeIterable !== \"object\") {\n                return null;\n            }\n            var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];\n            if (typeof maybeIterator === \"function\") {\n                return maybeIterator;\n            }\n            return null;\n        }\n        var ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\n        function error(format) {\n            {\n                {\n                    for(var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++){\n                        args[_key2 - 1] = arguments[_key2];\n                    }\n                    printWarning(\"error\", format, args);\n                }\n            }\n        }\n        function printWarning(level, format, args) {\n            // When changing this logic, you might want to also\n            // update consoleWithStackDev.www.js as well.\n            {\n                var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\n                var stack = ReactDebugCurrentFrame.getStackAddendum();\n                if (stack !== \"\") {\n                    format += \"%s\";\n                    args = args.concat([\n                        stack\n                    ]);\n                } // eslint-disable-next-line react-internal/safe-string-coercion\n                var argsWithFormat = args.map(function(item) {\n                    return String(item);\n                }); // Careful: RN currently depends on this prefix\n                argsWithFormat.unshift(\"Warning: \" + format); // We intentionally don't use spread (or .apply) directly because it\n                // breaks IE9: https://github.com/facebook/react/issues/13610\n                // eslint-disable-next-line react-internal/no-production-logging\n                Function.prototype.apply.call(console[level], console, argsWithFormat);\n            }\n        }\n        // -----------------------------------------------------------------------------\n        var enableScopeAPI = false; // Experimental Create Event Handle API.\n        var enableCacheElement = false;\n        var enableTransitionTracing = false; // No known bugs, but needs performance testing\n        var enableLegacyHidden = false; // Enables unstable_avoidThisFallback feature in Fiber\n        // stuff. Intended to enable React core members to more easily debug scheduling\n        // issues in DEV builds.\n        var enableDebugTracing = false;\n        var REACT_CLIENT_REFERENCE$2 = Symbol.for(\"react.client.reference\");\n        function isValidElementType(type) {\n            if (typeof type === \"string\" || typeof type === \"function\") {\n                return true;\n            } // Note: typeof might be other than 'symbol' or 'number' (e.g. if it's a polyfill).\n            if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing) {\n                return true;\n            }\n            if (typeof type === \"object\" && type !== null) {\n                if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object\n                // types supported by any Flight configuration anywhere since\n                // we don't know which Flight build this will end up being used\n                // with.\n                type.$$typeof === REACT_CLIENT_REFERENCE$2 || type.getModuleId !== undefined) {\n                    return true;\n                }\n            }\n            return false;\n        }\n        function getWrappedName(outerType, innerType, wrapperName) {\n            var displayName = outerType.displayName;\n            if (displayName) {\n                return displayName;\n            }\n            var functionName = innerType.displayName || innerType.name || \"\";\n            return functionName !== \"\" ? wrapperName + \"(\" + functionName + \")\" : wrapperName;\n        } // Keep in sync with react-reconciler/getComponentNameFromFiber\n        function getContextName(type) {\n            return type.displayName || \"Context\";\n        }\n        var REACT_CLIENT_REFERENCE$1 = Symbol.for(\"react.client.reference\"); // Note that the reconciler package should generally prefer to use getComponentNameFromFiber() instead.\n        function getComponentNameFromType(type) {\n            if (type == null) {\n                // Host root, text node or just invalid type.\n                return null;\n            }\n            if (typeof type === \"function\") {\n                if (type.$$typeof === REACT_CLIENT_REFERENCE$1) {\n                    // TODO: Create a convention for naming client references with debug info.\n                    return null;\n                }\n                return type.displayName || type.name || null;\n            }\n            if (typeof type === \"string\") {\n                return type;\n            }\n            switch(type){\n                case REACT_FRAGMENT_TYPE:\n                    return \"Fragment\";\n                case REACT_PORTAL_TYPE:\n                    return \"Portal\";\n                case REACT_PROFILER_TYPE:\n                    return \"Profiler\";\n                case REACT_STRICT_MODE_TYPE:\n                    return \"StrictMode\";\n                case REACT_SUSPENSE_TYPE:\n                    return \"Suspense\";\n                case REACT_SUSPENSE_LIST_TYPE:\n                    return \"SuspenseList\";\n                case REACT_CACHE_TYPE:\n                    {\n                        return \"Cache\";\n                    }\n            }\n            if (typeof type === \"object\") {\n                {\n                    if (typeof type.tag === \"number\") {\n                        error(\"Received an unexpected object in getComponentNameFromType(). \" + \"This is likely a bug in React. Please file an issue.\");\n                    }\n                }\n                switch(type.$$typeof){\n                    case REACT_CONTEXT_TYPE:\n                        var context = type;\n                        return getContextName(context) + \".Consumer\";\n                    case REACT_PROVIDER_TYPE:\n                        var provider = type;\n                        return getContextName(provider._context) + \".Provider\";\n                    case REACT_FORWARD_REF_TYPE:\n                        return getWrappedName(type, type.render, \"ForwardRef\");\n                    case REACT_MEMO_TYPE:\n                        var outerName = type.displayName || null;\n                        if (outerName !== null) {\n                            return outerName;\n                        }\n                        return getComponentNameFromType(type.type) || \"Memo\";\n                    case REACT_LAZY_TYPE:\n                        {\n                            var lazyComponent = type;\n                            var payload = lazyComponent._payload;\n                            var init = lazyComponent._init;\n                            try {\n                                return getComponentNameFromType(init(payload));\n                            } catch (x) {\n                                return null;\n                            }\n                        }\n                }\n            }\n            return null;\n        }\n        var assign = Object.assign;\n        // Helpers to patch console.logs to avoid logging during side-effect free\n        // replaying on render function. This currently only patches the object\n        // lazily which won't cover if the log function was extracted eagerly.\n        // We could also eagerly patch the method.\n        var disabledDepth = 0;\n        var prevLog;\n        var prevInfo;\n        var prevWarn;\n        var prevError;\n        var prevGroup;\n        var prevGroupCollapsed;\n        var prevGroupEnd;\n        function disabledLog() {}\n        disabledLog.__reactDisabledLog = true;\n        function disableLogs() {\n            {\n                if (disabledDepth === 0) {\n                    /* eslint-disable react-internal/no-production-logging */ prevLog = console.log;\n                    prevInfo = console.info;\n                    prevWarn = console.warn;\n                    prevError = console.error;\n                    prevGroup = console.group;\n                    prevGroupCollapsed = console.groupCollapsed;\n                    prevGroupEnd = console.groupEnd; // https://github.com/facebook/react/issues/19099\n                    var props = {\n                        configurable: true,\n                        enumerable: true,\n                        value: disabledLog,\n                        writable: true\n                    }; // $FlowFixMe[cannot-write] Flow thinks console is immutable.\n                    Object.defineProperties(console, {\n                        info: props,\n                        log: props,\n                        warn: props,\n                        error: props,\n                        group: props,\n                        groupCollapsed: props,\n                        groupEnd: props\n                    });\n                /* eslint-enable react-internal/no-production-logging */ }\n                disabledDepth++;\n            }\n        }\n        function reenableLogs() {\n            {\n                disabledDepth--;\n                if (disabledDepth === 0) {\n                    /* eslint-disable react-internal/no-production-logging */ var props = {\n                        configurable: true,\n                        enumerable: true,\n                        writable: true\n                    }; // $FlowFixMe[cannot-write] Flow thinks console is immutable.\n                    Object.defineProperties(console, {\n                        log: assign({}, props, {\n                            value: prevLog\n                        }),\n                        info: assign({}, props, {\n                            value: prevInfo\n                        }),\n                        warn: assign({}, props, {\n                            value: prevWarn\n                        }),\n                        error: assign({}, props, {\n                            value: prevError\n                        }),\n                        group: assign({}, props, {\n                            value: prevGroup\n                        }),\n                        groupCollapsed: assign({}, props, {\n                            value: prevGroupCollapsed\n                        }),\n                        groupEnd: assign({}, props, {\n                            value: prevGroupEnd\n                        })\n                    });\n                /* eslint-enable react-internal/no-production-logging */ }\n                if (disabledDepth < 0) {\n                    error(\"disabledDepth fell below zero. \" + \"This is a bug in React. Please file an issue.\");\n                }\n            }\n        }\n        var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;\n        var prefix;\n        function describeBuiltInComponentFrame(name, source, ownerFn) {\n            {\n                if (prefix === undefined) {\n                    // Extract the VM specific prefix used by each line.\n                    try {\n                        throw Error();\n                    } catch (x) {\n                        var match = x.stack.trim().match(/\\n( *(at )?)/);\n                        prefix = match && match[1] || \"\";\n                    }\n                } // We use the prefix to ensure our stacks line up with native stack frames.\n                return \"\\n\" + prefix + name;\n            }\n        }\n        var reentry = false;\n        var componentFrameCache;\n        {\n            var PossiblyWeakMap = typeof WeakMap === \"function\" ? WeakMap : Map;\n            componentFrameCache = new PossiblyWeakMap();\n        }\n        /**\n * Leverages native browser/VM stack frames to get proper details (e.g.\n * filename, line + col number) for a single component in a component stack. We\n * do this by:\n *   (1) throwing and catching an error in the function - this will be our\n *       control error.\n *   (2) calling the component which will eventually throw an error that we'll\n *       catch - this will be our sample error.\n *   (3) diffing the control and sample error stacks to find the stack frame\n *       which represents our component.\n */ function describeNativeComponentFrame(fn, construct) {\n            // If something asked for a stack inside a fake render, it should get ignored.\n            if (!fn || reentry) {\n                return \"\";\n            }\n            {\n                var frame = componentFrameCache.get(fn);\n                if (frame !== undefined) {\n                    return frame;\n                }\n            }\n            reentry = true;\n            var previousPrepareStackTrace = Error.prepareStackTrace; // $FlowFixMe[incompatible-type] It does accept undefined.\n            Error.prepareStackTrace = undefined;\n            var previousDispatcher;\n            {\n                previousDispatcher = ReactCurrentDispatcher.current; // Set the dispatcher in DEV because this might be call in the render function\n                // for warnings.\n                ReactCurrentDispatcher.current = null;\n                disableLogs();\n            }\n            /**\n   * Finding a common stack frame between sample and control errors can be\n   * tricky given the different types and levels of stack trace truncation from\n   * different JS VMs. So instead we'll attempt to control what that common\n   * frame should be through this object method:\n   * Having both the sample and control errors be in the function under the\n   * `DescribeNativeComponentFrameRoot` property, + setting the `name` and\n   * `displayName` properties of the function ensures that a stack\n   * frame exists that has the method name `DescribeNativeComponentFrameRoot` in\n   * it for both control and sample stacks.\n   */ var RunInRootFrame = {\n                DetermineComponentFrameRoot: function() {\n                    var control;\n                    try {\n                        // This should throw.\n                        if (construct) {\n                            // Something should be setting the props in the constructor.\n                            var Fake = function() {\n                                throw Error();\n                            }; // $FlowFixMe[prop-missing]\n                            Object.defineProperty(Fake.prototype, \"props\", {\n                                set: function() {\n                                    // We use a throwing setter instead of frozen or non-writable props\n                                    // because that won't throw in a non-strict mode function.\n                                    throw Error();\n                                }\n                            });\n                            if (typeof Reflect === \"object\" && Reflect.construct) {\n                                // We construct a different control for this case to include any extra\n                                // frames added by the construct call.\n                                try {\n                                    Reflect.construct(Fake, []);\n                                } catch (x) {\n                                    control = x;\n                                }\n                                Reflect.construct(fn, [], Fake);\n                            } else {\n                                try {\n                                    Fake.call();\n                                } catch (x) {\n                                    control = x;\n                                } // $FlowFixMe[prop-missing] found when upgrading Flow\n                                fn.call(Fake.prototype);\n                            }\n                        } else {\n                            try {\n                                throw Error();\n                            } catch (x) {\n                                control = x;\n                            } // TODO(luna): This will currently only throw if the function component\n                            // tries to access React/ReactDOM/props. We should probably make this throw\n                            // in simple components too\n                            var maybePromise = fn(); // If the function component returns a promise, it's likely an async\n                            // component, which we don't yet support. Attach a noop catch handler to\n                            // silence the error.\n                            // TODO: Implement component stacks for async client components?\n                            if (maybePromise && typeof maybePromise.catch === \"function\") {\n                                maybePromise.catch(function() {});\n                            }\n                        }\n                    } catch (sample) {\n                        // This is inlined manually because closure doesn't do it for us.\n                        if (sample && control && typeof sample.stack === \"string\") {\n                            return [\n                                sample.stack,\n                                control.stack\n                            ];\n                        }\n                    }\n                    return [\n                        null,\n                        null\n                    ];\n                }\n            }; // $FlowFixMe[prop-missing]\n            RunInRootFrame.DetermineComponentFrameRoot.displayName = \"DetermineComponentFrameRoot\";\n            var namePropDescriptor = Object.getOwnPropertyDescriptor(RunInRootFrame.DetermineComponentFrameRoot, \"name\"); // Before ES6, the `name` property was not configurable.\n            if (namePropDescriptor && namePropDescriptor.configurable) {\n                // V8 utilizes a function's `name` property when generating a stack trace.\n                Object.defineProperty(RunInRootFrame.DetermineComponentFrameRoot, // is set to `false`.\n                // $FlowFixMe[cannot-write]\n                \"name\", {\n                    value: \"DetermineComponentFrameRoot\"\n                });\n            }\n            try {\n                var _RunInRootFrame$Deter = RunInRootFrame.DetermineComponentFrameRoot(), sampleStack = _RunInRootFrame$Deter[0], controlStack = _RunInRootFrame$Deter[1];\n                if (sampleStack && controlStack) {\n                    // This extracts the first frame from the sample that isn't also in the control.\n                    // Skipping one frame that we assume is the frame that calls the two.\n                    var sampleLines = sampleStack.split(\"\\n\");\n                    var controlLines = controlStack.split(\"\\n\");\n                    var s = 0;\n                    var c = 0;\n                    while(s < sampleLines.length && !sampleLines[s].includes(\"DetermineComponentFrameRoot\")){\n                        s++;\n                    }\n                    while(c < controlLines.length && !controlLines[c].includes(\"DetermineComponentFrameRoot\")){\n                        c++;\n                    } // We couldn't find our intentionally injected common root frame, attempt\n                    // to find another common root frame by search from the bottom of the\n                    // control stack...\n                    if (s === sampleLines.length || c === controlLines.length) {\n                        s = sampleLines.length - 1;\n                        c = controlLines.length - 1;\n                        while(s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]){\n                            // We expect at least one stack frame to be shared.\n                            // Typically this will be the root most one. However, stack frames may be\n                            // cut off due to maximum stack limits. In this case, one maybe cut off\n                            // earlier than the other. We assume that the sample is longer or the same\n                            // and there for cut off earlier. So we should find the root most frame in\n                            // the sample somewhere in the control.\n                            c--;\n                        }\n                    }\n                    for(; s >= 1 && c >= 0; s--, c--){\n                        // Next we find the first one that isn't the same which should be the\n                        // frame that called our sample function and the control.\n                        if (sampleLines[s] !== controlLines[c]) {\n                            // In V8, the first line is describing the message but other VMs don't.\n                            // If we're about to return the first line, and the control is also on the same\n                            // line, that's a pretty good indicator that our sample threw at same line as\n                            // the control. I.e. before we entered the sample frame. So we ignore this result.\n                            // This can happen if you passed a class to function component, or non-function.\n                            if (s !== 1 || c !== 1) {\n                                do {\n                                    s--;\n                                    c--; // We may still have similar intermediate frames from the construct call.\n                                    // The next one that isn't the same should be our match though.\n                                    if (c < 0 || sampleLines[s] !== controlLines[c]) {\n                                        // V8 adds a \"new\" prefix for native classes. Let's remove it to make it prettier.\n                                        var _frame = \"\\n\" + sampleLines[s].replace(\" at new \", \" at \"); // If our component frame is labeled \"<anonymous>\"\n                                        // but we have a user-provided \"displayName\"\n                                        // splice it in to make the stack more readable.\n                                        if (fn.displayName && _frame.includes(\"<anonymous>\")) {\n                                            _frame = _frame.replace(\"<anonymous>\", fn.displayName);\n                                        }\n                                        if (true) {\n                                            if (typeof fn === \"function\") {\n                                                componentFrameCache.set(fn, _frame);\n                                            }\n                                        } // Return the line we found.\n                                        return _frame;\n                                    }\n                                }while (s >= 1 && c >= 0);\n                            }\n                            break;\n                        }\n                    }\n                }\n            } finally{\n                reentry = false;\n                {\n                    ReactCurrentDispatcher.current = previousDispatcher;\n                    reenableLogs();\n                }\n                Error.prepareStackTrace = previousPrepareStackTrace;\n            } // Fallback to just using the name if we couldn't make it throw.\n            var name = fn ? fn.displayName || fn.name : \"\";\n            var syntheticFrame = name ? describeBuiltInComponentFrame(name) : \"\";\n            {\n                if (typeof fn === \"function\") {\n                    componentFrameCache.set(fn, syntheticFrame);\n                }\n            }\n            return syntheticFrame;\n        }\n        function describeFunctionComponentFrame(fn, source, ownerFn) {\n            {\n                return describeNativeComponentFrame(fn, false);\n            }\n        }\n        function shouldConstruct(Component) {\n            var prototype = Component.prototype;\n            return !!(prototype && prototype.isReactComponent);\n        }\n        function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {\n            if (type == null) {\n                return \"\";\n            }\n            if (typeof type === \"function\") {\n                {\n                    return describeNativeComponentFrame(type, shouldConstruct(type));\n                }\n            }\n            if (typeof type === \"string\") {\n                return describeBuiltInComponentFrame(type);\n            }\n            switch(type){\n                case REACT_SUSPENSE_TYPE:\n                    return describeBuiltInComponentFrame(\"Suspense\");\n                case REACT_SUSPENSE_LIST_TYPE:\n                    return describeBuiltInComponentFrame(\"SuspenseList\");\n            }\n            if (typeof type === \"object\") {\n                switch(type.$$typeof){\n                    case REACT_FORWARD_REF_TYPE:\n                        return describeFunctionComponentFrame(type.render);\n                    case REACT_MEMO_TYPE:\n                        // Memo may contain any component type so we recursively resolve it.\n                        return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);\n                    case REACT_LAZY_TYPE:\n                        {\n                            var lazyComponent = type;\n                            var payload = lazyComponent._payload;\n                            var init = lazyComponent._init;\n                            try {\n                                // Lazy may contain any component type so we recursively resolve it.\n                                return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);\n                            } catch (x) {}\n                        }\n                }\n            }\n            return \"\";\n        }\n        // $FlowFixMe[method-unbinding]\n        var hasOwnProperty = Object.prototype.hasOwnProperty;\n        var loggedTypeFailures = {};\n        var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;\n        function setCurrentlyValidatingElement$1(element) {\n            {\n                if (element) {\n                    var owner = element._owner;\n                    var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);\n                    ReactDebugCurrentFrame$1.setExtraStackFrame(stack);\n                } else {\n                    ReactDebugCurrentFrame$1.setExtraStackFrame(null);\n                }\n            }\n        }\n        function checkPropTypes(typeSpecs, values, location, componentName, element) {\n            {\n                // $FlowFixMe[incompatible-use] This is okay but Flow doesn't know it.\n                var has = Function.call.bind(hasOwnProperty);\n                for(var typeSpecName in typeSpecs){\n                    if (has(typeSpecs, typeSpecName)) {\n                        var error$1 = void 0; // Prop type validation may throw. In case they do, we don't want to\n                        // fail the render phase where it didn't fail before. So we log it.\n                        // After these have been cleaned up, we'll let them throw.\n                        try {\n                            // This is intentionally an invariant that gets caught. It's the same\n                            // behavior as without this statement except with a better message.\n                            if (typeof typeSpecs[typeSpecName] !== \"function\") {\n                                // eslint-disable-next-line react-internal/prod-error-codes\n                                var err = Error((componentName || \"React class\") + \": \" + location + \" type `\" + typeSpecName + \"` is invalid; \" + \"it must be a function, usually from the `prop-types` package, but received `\" + typeof typeSpecs[typeSpecName] + \"`.\" + \"This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.\");\n                                err.name = \"Invariant Violation\";\n                                throw err;\n                            }\n                            error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, \"SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED\");\n                        } catch (ex) {\n                            error$1 = ex;\n                        }\n                        if (error$1 && !(error$1 instanceof Error)) {\n                            setCurrentlyValidatingElement$1(element);\n                            error(\"%s: type specification of %s\" + \" `%s` is invalid; the type checker \" + \"function must return `null` or an `Error` but returned a %s. \" + \"You may have forgotten to pass an argument to the type checker \" + \"creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and \" + \"shape all require an argument).\", componentName || \"React class\", location, typeSpecName, typeof error$1);\n                            setCurrentlyValidatingElement$1(null);\n                        }\n                        if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {\n                            // Only monitor this failure once because there tends to be a lot of the\n                            // same error.\n                            loggedTypeFailures[error$1.message] = true;\n                            setCurrentlyValidatingElement$1(element);\n                            error(\"Failed %s type: %s\", location, error$1.message);\n                            setCurrentlyValidatingElement$1(null);\n                        }\n                    }\n                }\n            }\n        }\n        var isArrayImpl = Array.isArray; // eslint-disable-next-line no-redeclare\n        function isArray(a) {\n            return isArrayImpl(a);\n        }\n        /*\n * The `'' + value` pattern (used in perf-sensitive code) throws for Symbol\n * and Temporal.* types. See https://github.com/facebook/react/pull/22064.\n *\n * The functions in this module will throw an easier-to-understand,\n * easier-to-debug exception with a clear errors message message explaining the\n * problem. (Instead of a confusing exception thrown inside the implementation\n * of the `value` object).\n */ // $FlowFixMe[incompatible-return] only called in DEV, so void return is not possible.\n        function typeName(value) {\n            {\n                // toStringTag is needed for namespaced types like Temporal.Instant\n                var hasToStringTag = typeof Symbol === \"function\" && Symbol.toStringTag;\n                var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || \"Object\"; // $FlowFixMe[incompatible-return]\n                return type;\n            }\n        } // $FlowFixMe[incompatible-return] only called in DEV, so void return is not possible.\n        function willCoercionThrow(value) {\n            {\n                try {\n                    testStringCoercion(value);\n                    return false;\n                } catch (e) {\n                    return true;\n                }\n            }\n        }\n        function testStringCoercion(value) {\n            // If you ended up here by following an exception call stack, here's what's\n            // happened: you supplied an object or symbol value to React (as a prop, key,\n            // DOM attribute, CSS property, string ref, etc.) and when React tried to\n            // coerce it to a string using `'' + value`, an exception was thrown.\n            //\n            // The most common types that will cause this exception are `Symbol` instances\n            // and Temporal objects like `Temporal.Instant`. But any object that has a\n            // `valueOf` or `[Symbol.toPrimitive]` method that throws will also cause this\n            // exception. (Library authors do this to prevent users from using built-in\n            // numeric operators like `+` or comparison operators like `>=` because custom\n            // methods are needed to perform accurate arithmetic or comparison.)\n            //\n            // To fix the problem, coerce this object or symbol value to a string before\n            // passing it to React. The most reliable way is usually `String(value)`.\n            //\n            // To find which value is throwing, check the browser or debugger console.\n            // Before this exception was thrown, there should be `console.error` output\n            // that shows the type (Symbol, Temporal.PlainDate, etc.) that caused the\n            // problem and how that type was used: key, atrribute, input value prop, etc.\n            // In most cases, this console output also shows the component and its\n            // ancestor components where the exception happened.\n            //\n            // eslint-disable-next-line react-internal/safe-string-coercion\n            return \"\" + value;\n        }\n        function checkKeyStringCoercion(value) {\n            {\n                if (willCoercionThrow(value)) {\n                    error(\"The provided key is an unsupported type %s.\" + \" This value must be coerced to a string before using it here.\", typeName(value));\n                    return testStringCoercion(value); // throw (to help callers find troubleshooting comments)\n                }\n            }\n        }\n        var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;\n        var RESERVED_PROPS = {\n            key: true,\n            ref: true,\n            __self: true,\n            __source: true\n        };\n        var specialPropKeyWarningShown;\n        var specialPropRefWarningShown;\n        var didWarnAboutStringRefs;\n        {\n            didWarnAboutStringRefs = {};\n        }\n        function hasValidRef(config) {\n            {\n                if (hasOwnProperty.call(config, \"ref\")) {\n                    var getter = Object.getOwnPropertyDescriptor(config, \"ref\").get;\n                    if (getter && getter.isReactWarning) {\n                        return false;\n                    }\n                }\n            }\n            return config.ref !== undefined;\n        }\n        function hasValidKey(config) {\n            {\n                if (hasOwnProperty.call(config, \"key\")) {\n                    var getter = Object.getOwnPropertyDescriptor(config, \"key\").get;\n                    if (getter && getter.isReactWarning) {\n                        return false;\n                    }\n                }\n            }\n            return config.key !== undefined;\n        }\n        function warnIfStringRefCannotBeAutoConverted(config, self) {\n            {\n                if (typeof config.ref === \"string\" && ReactCurrentOwner$1.current && self && ReactCurrentOwner$1.current.stateNode !== self) {\n                    var componentName = getComponentNameFromType(ReactCurrentOwner$1.current.type);\n                    if (!didWarnAboutStringRefs[componentName]) {\n                        error('Component \"%s\" contains the string ref \"%s\". ' + \"Support for string refs will be removed in a future major release. \" + \"This case cannot be automatically converted to an arrow function. \" + \"We ask you to manually fix this case by using useRef() or createRef() instead. \" + \"Learn more about using refs safely here: \" + \"https://reactjs.org/link/strict-mode-string-ref\", getComponentNameFromType(ReactCurrentOwner$1.current.type), config.ref);\n                        didWarnAboutStringRefs[componentName] = true;\n                    }\n                }\n            }\n        }\n        function defineKeyPropWarningGetter(props, displayName) {\n            {\n                var warnAboutAccessingKey = function() {\n                    if (!specialPropKeyWarningShown) {\n                        specialPropKeyWarningShown = true;\n                        error(\"%s: `key` is not a prop. Trying to access it will result \" + \"in `undefined` being returned. If you need to access the same \" + \"value within the child component, you should pass it as a different \" + \"prop. (https://reactjs.org/link/special-props)\", displayName);\n                    }\n                };\n                warnAboutAccessingKey.isReactWarning = true;\n                Object.defineProperty(props, \"key\", {\n                    get: warnAboutAccessingKey,\n                    configurable: true\n                });\n            }\n        }\n        function defineRefPropWarningGetter(props, displayName) {\n            {\n                var warnAboutAccessingRef = function() {\n                    if (!specialPropRefWarningShown) {\n                        specialPropRefWarningShown = true;\n                        error(\"%s: `ref` is not a prop. Trying to access it will result \" + \"in `undefined` being returned. If you need to access the same \" + \"value within the child component, you should pass it as a different \" + \"prop. (https://reactjs.org/link/special-props)\", displayName);\n                    }\n                };\n                warnAboutAccessingRef.isReactWarning = true;\n                Object.defineProperty(props, \"ref\", {\n                    get: warnAboutAccessingRef,\n                    configurable: true\n                });\n            }\n        }\n        /**\n * Factory method to create a new React element. This no longer adheres to\n * the class pattern, so do not use new to call it. Also, instanceof check\n * will not work. Instead test $$typeof field against Symbol.for('react.element') to check\n * if something is a React Element.\n *\n * @param {*} type\n * @param {*} props\n * @param {*} key\n * @param {string|object} ref\n * @param {*} owner\n * @param {*} self A *temporary* helper to detect places where `this` is\n * different from the `owner` when React.createElement is called, so that we\n * can warn. We want to get rid of owner and replace string `ref`s with arrow\n * functions, and as long as `this` and owner are the same, there will be no\n * change in behavior.\n * @param {*} source An annotation object (added by a transpiler or otherwise)\n * indicating filename, line number, and/or other information.\n * @internal\n */ function ReactElement(type, key, ref, self, source, owner, props) {\n            var element = {\n                // This tag allows us to uniquely identify this as a React Element\n                $$typeof: REACT_ELEMENT_TYPE,\n                // Built-in properties that belong on the element\n                type: type,\n                key: key,\n                ref: ref,\n                props: props,\n                // Record the component responsible for creating this element.\n                _owner: owner\n            };\n            {\n                // The validation flag is currently mutative. We put it on\n                // an external backing store so that we can freeze the whole object.\n                // This can be replaced with a WeakMap once they are implemented in\n                // commonly used development environments.\n                element._store = {}; // To make comparing ReactElements easier for testing purposes, we make\n                // the validation flag non-enumerable (where possible, which should\n                // include every environment we run tests in), so the test framework\n                // ignores it.\n                Object.defineProperty(element._store, \"validated\", {\n                    configurable: false,\n                    enumerable: false,\n                    writable: true,\n                    value: false\n                }); // self and source are DEV only properties.\n                Object.defineProperty(element, \"_self\", {\n                    configurable: false,\n                    enumerable: false,\n                    writable: false,\n                    value: self\n                }); // Two elements created in two different places should be considered\n                // equal for testing purposes and therefore we hide it from enumeration.\n                Object.defineProperty(element, \"_source\", {\n                    configurable: false,\n                    enumerable: false,\n                    writable: false,\n                    value: source\n                });\n                if (Object.freeze) {\n                    Object.freeze(element.props);\n                    Object.freeze(element);\n                }\n            }\n            return element;\n        }\n        /**\n * https://github.com/reactjs/rfcs/pull/107\n * @param {*} type\n * @param {object} props\n * @param {string} key\n */ function jsxDEV$1(type, config, maybeKey, source, self) {\n            {\n                var propName; // Reserved names are extracted\n                var props = {};\n                var key = null;\n                var ref = null; // Currently, key can be spread in as a prop. This causes a potential\n                // issue if key is also explicitly declared (ie. <div {...props} key=\"Hi\" />\n                // or <div key=\"Hi\" {...props} /> ). We want to deprecate key spread,\n                // but as an intermediary step, we will use jsxDEV for everything except\n                // <div {...props} key=\"Hi\" />, because we aren't currently able to tell if\n                // key is explicitly declared to be undefined or not.\n                if (maybeKey !== undefined) {\n                    {\n                        checkKeyStringCoercion(maybeKey);\n                    }\n                    key = \"\" + maybeKey;\n                }\n                if (hasValidKey(config)) {\n                    {\n                        checkKeyStringCoercion(config.key);\n                    }\n                    key = \"\" + config.key;\n                }\n                if (hasValidRef(config)) {\n                    ref = config.ref;\n                    warnIfStringRefCannotBeAutoConverted(config, self);\n                } // Remaining properties are added to a new props object\n                for(propName in config){\n                    if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {\n                        props[propName] = config[propName];\n                    }\n                } // Resolve default props\n                if (type && type.defaultProps) {\n                    var defaultProps = type.defaultProps;\n                    for(propName in defaultProps){\n                        if (props[propName] === undefined) {\n                            props[propName] = defaultProps[propName];\n                        }\n                    }\n                }\n                if (key || ref) {\n                    var displayName = typeof type === \"function\" ? type.displayName || type.name || \"Unknown\" : type;\n                    if (key) {\n                        defineKeyPropWarningGetter(props, displayName);\n                    }\n                    if (ref) {\n                        defineRefPropWarningGetter(props, displayName);\n                    }\n                }\n                return ReactElement(type, key, ref, self, source, ReactCurrentOwner$1.current, props);\n            }\n        }\n        var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;\n        var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\n        var REACT_CLIENT_REFERENCE = Symbol.for(\"react.client.reference\");\n        function setCurrentlyValidatingElement(element) {\n            {\n                if (element) {\n                    var owner = element._owner;\n                    var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);\n                    ReactDebugCurrentFrame.setExtraStackFrame(stack);\n                } else {\n                    ReactDebugCurrentFrame.setExtraStackFrame(null);\n                }\n            }\n        }\n        var propTypesMisspellWarningShown;\n        {\n            propTypesMisspellWarningShown = false;\n        }\n        /**\n * Verifies the object is a ReactElement.\n * See https://reactjs.org/docs/react-api.html#isvalidelement\n * @param {?object} object\n * @return {boolean} True if `object` is a ReactElement.\n * @final\n */ function isValidElement(object) {\n            {\n                return typeof object === \"object\" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;\n            }\n        }\n        function getDeclarationErrorAddendum() {\n            {\n                if (ReactCurrentOwner.current) {\n                    var name = getComponentNameFromType(ReactCurrentOwner.current.type);\n                    if (name) {\n                        return \"\\n\\nCheck the render method of `\" + name + \"`.\";\n                    }\n                }\n                return \"\";\n            }\n        }\n        function getSourceInfoErrorAddendum(source) {\n            {\n                if (source !== undefined) {\n                    var fileName = source.fileName.replace(/^.*[\\\\\\/]/, \"\");\n                    var lineNumber = source.lineNumber;\n                    return \"\\n\\nCheck your code at \" + fileName + \":\" + lineNumber + \".\";\n                }\n                return \"\";\n            }\n        }\n        /**\n * Warn if there's no key explicitly set on dynamic arrays of children or\n * object keys are not valid. This allows us to keep track of children between\n * updates.\n */ var ownerHasKeyUseWarning = {};\n        function getCurrentComponentErrorInfo(parentType) {\n            {\n                var info = getDeclarationErrorAddendum();\n                if (!info) {\n                    var parentName = getComponentNameFromType(parentType);\n                    if (parentName) {\n                        info = \"\\n\\nCheck the top-level render call using <\" + parentName + \">.\";\n                    }\n                }\n                return info;\n            }\n        }\n        /**\n * Warn if the element doesn't have an explicit key assigned to it.\n * This element is in an array. The array could grow and shrink or be\n * reordered. All children that haven't already been validated are required to\n * have a \"key\" property assigned to it. Error statuses are cached so a warning\n * will only be shown once.\n *\n * @internal\n * @param {ReactElement} element Element that requires a key.\n * @param {*} parentType element's parent's type.\n */ function validateExplicitKey(element, parentType) {\n            {\n                if (!element._store || element._store.validated || element.key != null) {\n                    return;\n                }\n                element._store.validated = true;\n                var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);\n                if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {\n                    return;\n                }\n                ownerHasKeyUseWarning[currentComponentErrorInfo] = true; // Usually the current owner is the offender, but if it accepts children as a\n                // property, it may be the creator of the child that's responsible for\n                // assigning it a key.\n                var childOwner = \"\";\n                if (element && element._owner && element._owner !== ReactCurrentOwner.current) {\n                    // Give the component that originally created this child.\n                    childOwner = \" It was passed a child from \" + getComponentNameFromType(element._owner.type) + \".\";\n                }\n                setCurrentlyValidatingElement(element);\n                error('Each child in a list should have a unique \"key\" prop.' + \"%s%s See https://reactjs.org/link/warning-keys for more information.\", currentComponentErrorInfo, childOwner);\n                setCurrentlyValidatingElement(null);\n            }\n        }\n        /**\n * Ensure that every element either is passed in a static location, in an\n * array with an explicit keys property defined, or in an object literal\n * with valid key property.\n *\n * @internal\n * @param {ReactNode} node Statically passed child of any type.\n * @param {*} parentType node's parent's type.\n */ function validateChildKeys(node, parentType) {\n            {\n                if (typeof node !== \"object\" || !node) {\n                    return;\n                }\n                if (node.$$typeof === REACT_CLIENT_REFERENCE) ;\n                else if (isArray(node)) {\n                    for(var i = 0; i < node.length; i++){\n                        var child = node[i];\n                        if (isValidElement(child)) {\n                            validateExplicitKey(child, parentType);\n                        }\n                    }\n                } else if (isValidElement(node)) {\n                    // This element was passed in a valid location.\n                    if (node._store) {\n                        node._store.validated = true;\n                    }\n                } else {\n                    var iteratorFn = getIteratorFn(node);\n                    if (typeof iteratorFn === \"function\") {\n                        // Entry iterators used to provide implicit keys,\n                        // but now we print a separate warning for them later.\n                        if (iteratorFn !== node.entries) {\n                            var iterator = iteratorFn.call(node);\n                            var step;\n                            while(!(step = iterator.next()).done){\n                                if (isValidElement(step.value)) {\n                                    validateExplicitKey(step.value, parentType);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        /**\n * Given an element, validate that its props follow the propTypes definition,\n * provided by the type.\n *\n * @param {ReactElement} element\n */ function validatePropTypes(element) {\n            {\n                var type = element.type;\n                if (type === null || type === undefined || typeof type === \"string\") {\n                    return;\n                }\n                if (type.$$typeof === REACT_CLIENT_REFERENCE) {\n                    return;\n                }\n                var propTypes;\n                if (typeof type === \"function\") {\n                    propTypes = type.propTypes;\n                } else if (typeof type === \"object\" && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.\n                // Inner props are checked in the reconciler.\n                type.$$typeof === REACT_MEMO_TYPE)) {\n                    propTypes = type.propTypes;\n                } else {\n                    return;\n                }\n                if (propTypes) {\n                    // Intentionally inside to avoid triggering lazy initializers:\n                    var name = getComponentNameFromType(type);\n                    checkPropTypes(propTypes, element.props, \"prop\", name, element);\n                } else if (type.PropTypes !== undefined && !propTypesMisspellWarningShown) {\n                    propTypesMisspellWarningShown = true; // Intentionally inside to avoid triggering lazy initializers:\n                    var _name = getComponentNameFromType(type);\n                    error(\"Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?\", _name || \"Unknown\");\n                }\n                if (typeof type.getDefaultProps === \"function\" && !type.getDefaultProps.isReactClassApproved) {\n                    error(\"getDefaultProps is only used on classic React.createClass \" + \"definitions. Use a static property named `defaultProps` instead.\");\n                }\n            }\n        }\n        /**\n * Given a fragment, validate that it can only be provided with fragment props\n * @param {ReactElement} fragment\n */ function validateFragmentProps(fragment) {\n            {\n                var keys = Object.keys(fragment.props);\n                for(var i = 0; i < keys.length; i++){\n                    var key = keys[i];\n                    if (key !== \"children\" && key !== \"key\") {\n                        setCurrentlyValidatingElement(fragment);\n                        error(\"Invalid prop `%s` supplied to `React.Fragment`. \" + \"React.Fragment can only have `key` and `children` props.\", key);\n                        setCurrentlyValidatingElement(null);\n                        break;\n                    }\n                }\n                if (fragment.ref !== null) {\n                    setCurrentlyValidatingElement(fragment);\n                    error(\"Invalid attribute `ref` supplied to `React.Fragment`.\");\n                    setCurrentlyValidatingElement(null);\n                }\n            }\n        }\n        var didWarnAboutKeySpread = {};\n        function jsxWithValidation(type, props, key, isStaticChildren, source, self) {\n            {\n                var validType = isValidElementType(type); // We warn in this case but don't throw. We expect the element creation to\n                // succeed and there will likely be errors in render.\n                if (!validType) {\n                    var info = \"\";\n                    if (type === undefined || typeof type === \"object\" && type !== null && Object.keys(type).length === 0) {\n                        info += \" You likely forgot to export your component from the file \" + \"it's defined in, or you might have mixed up default and named imports.\";\n                    }\n                    var sourceInfo = getSourceInfoErrorAddendum(source);\n                    if (sourceInfo) {\n                        info += sourceInfo;\n                    } else {\n                        info += getDeclarationErrorAddendum();\n                    }\n                    var typeString;\n                    if (type === null) {\n                        typeString = \"null\";\n                    } else if (isArray(type)) {\n                        typeString = \"array\";\n                    } else if (type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE) {\n                        typeString = \"<\" + (getComponentNameFromType(type.type) || \"Unknown\") + \" />\";\n                        info = \" Did you accidentally export a JSX literal instead of a component?\";\n                    } else {\n                        typeString = typeof type;\n                    }\n                    error(\"React.jsx: type is invalid -- expected a string (for \" + \"built-in components) or a class/function (for composite \" + \"components) but got: %s.%s\", typeString, info);\n                }\n                var element = jsxDEV$1(type, props, key, source, self); // The result can be nullish if a mock or a custom function is used.\n                // TODO: Drop this when these are no longer allowed as the type argument.\n                if (element == null) {\n                    return element;\n                } // Skip key warning if the type isn't valid since our key validation logic\n                // doesn't expect a non-string/function type and can throw confusing errors.\n                // We don't want exception behavior to differ between dev and prod.\n                // (Rendering will throw with a helpful message and as soon as the type is\n                // fixed, the key warnings will appear.)\n                if (validType) {\n                    var children = props.children;\n                    if (children !== undefined) {\n                        if (isStaticChildren) {\n                            if (isArray(children)) {\n                                for(var i = 0; i < children.length; i++){\n                                    validateChildKeys(children[i], type);\n                                }\n                                if (Object.freeze) {\n                                    Object.freeze(children);\n                                }\n                            } else {\n                                error(\"React.jsx: Static children should always be an array. \" + \"You are likely explicitly calling React.jsxs or React.jsxDEV. \" + \"Use the Babel transform instead.\");\n                            }\n                        } else {\n                            validateChildKeys(children, type);\n                        }\n                    }\n                }\n                if (hasOwnProperty.call(props, \"key\")) {\n                    var componentName = getComponentNameFromType(type);\n                    var keys = Object.keys(props).filter(function(k) {\n                        return k !== \"key\";\n                    });\n                    var beforeExample = keys.length > 0 ? \"{key: someKey, \" + keys.join(\": ..., \") + \": ...}\" : \"{key: someKey}\";\n                    if (!didWarnAboutKeySpread[componentName + beforeExample]) {\n                        var afterExample = keys.length > 0 ? \"{\" + keys.join(\": ..., \") + \": ...}\" : \"{}\";\n                        error('A props object containing a \"key\" prop is being spread into JSX:\\n' + \"  let props = %s;\\n\" + \"  <%s {...props} />\\n\" + \"React keys must be passed directly to JSX without using spread:\\n\" + \"  let props = %s;\\n\" + \"  <%s key={someKey} {...props} />\", beforeExample, componentName, afterExample, componentName);\n                        didWarnAboutKeySpread[componentName + beforeExample] = true;\n                    }\n                }\n                if (type === REACT_FRAGMENT_TYPE) {\n                    validateFragmentProps(element);\n                } else {\n                    validatePropTypes(element);\n                }\n                return element;\n            }\n        } // These two functions exist to still get child warnings in dev\n        var jsxDEV = jsxWithValidation;\n        exports.Fragment = REACT_FRAGMENT_TYPE;\n        exports.jsxDEV = jsxDEV;\n    })();\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/compiled/react/cjs/react-jsx-dev-runtime.development.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js":
/*!******************************************************************!*\
  !*** ./node_modules/next/dist/compiled/react/jsx-dev-runtime.js ***!
  \******************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nif (false) {} else {\n    module.exports = __webpack_require__(/*! ./cjs/react-jsx-dev-runtime.development.js */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/cjs/react-jsx-dev-runtime.development.js\");\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvY29tcGlsZWQvcmVhY3QvanN4LWRldi1ydW50aW1lLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUEsSUFBSUEsS0FBeUIsRUFBYyxFQUUxQyxNQUFNO0lBQ0xDLDhMQUF5QjtBQUMzQiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NvbXBpbGVkL3JlYWN0L2pzeC1kZXYtcnVudGltZS5qcz9jYTIwIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1qc3gtZGV2LXJ1bnRpbWUucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtanN4LWRldi1ydW50aW1lLmRldmVsb3BtZW50LmpzJyk7XG59XG4iXSwibmFtZXMiOlsicHJvY2VzcyIsIm1vZHVsZSIsImV4cG9ydHMiLCJyZXF1aXJlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./app/table/styles.css":
/*!******************************!*\
  !*** ./app/table/styles.css ***!
  \******************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony default export */ __webpack_exports__[\"default\"] = (\"249f4dadfeac\");\nif (true) { module.hot.accept() }\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL2FwcC90YWJsZS9zdHlsZXMuY3NzIiwibWFwcGluZ3MiOiI7QUFBQSwrREFBZSxjQUFjO0FBQzdCLElBQUksSUFBVSxJQUFJLGlCQUFpQiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9hcHAvdGFibGUvc3R5bGVzLmNzcz80MGMyIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IFwiMjQ5ZjRkYWRmZWFjXCJcbmlmIChtb2R1bGUuaG90KSB7IG1vZHVsZS5ob3QuYWNjZXB0KCkgfVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./app/table/styles.css\n"));

/***/ }),

/***/ "(app-pages-browser)/./app/table/page.tsx":
/*!****************************!*\
  !*** ./app/table/page.tsx ***!
  \****************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ ColumnGrouping; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var _styles_css__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./styles.css */ \"(app-pages-browser)/./app/table/styles.css\");\n/* harmony import */ var react_data_grid__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react-data-grid */ \"(app-pages-browser)/./node_modules/react-data-grid/lib/bundle.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_2__);\n/* __next_internal_client_entry_do_not_use__ default auto */ \nvar _s = $RefreshSig$();\n\n\n\n// import { renderCoordinates } from \"./renderers\";\n// import type { Props } from './types';\nlet lists = [\n    {\n        id: \"15783\",\n        name: \"<a href='pt_main.phtml?.sess=u-Fjayk8b90-KP-K04W2B6KS3T4pbrvwD94-rVAVPyj-ytOFtgTB8d0-&.op=3801&pageId=12696&objDefId=10045&.sess=u-Fjayk8b90-KP-K04W2B6KS3T4pbrvwD94-rVAVPyj-ytOFtgTB8d0-&.op=3801&id=15783'>15783--Majuba UCG Site-Hydrogeological Services</a>\",\n        value: \"51 055.40\",\n        billed: \"0\",\n        forecast: \"51 055.40\",\n        cashflow: \"[]\",\n        cashflow_monthly: \"{}\",\n        row: 0\n    },\n    {\n        id: \"15781\",\n        name: \"<a href='pt_main.phtml?.sess=u-Fjayk8b90-KP-K04W2B6KS3T4pbrvwD94-rVAVPyj-ytOFtgTB8d0-&.op=3801&pageId=12696&objDefId=10045&.sess=u-Fjayk8b90-KP-K04W2B6KS3T4pbrvwD94-rVAVPyj-ytOFtgTB8d0-&.op=3801&id=15781'>15781--MCWAP ECO</a>\",\n        value: \"454 489.92\",\n        billed: \"0\",\n        forecast: \"454 489.92\",\n        cashflow: \"[]\",\n        cashflow_monthly: \"{}\",\n        row: 1\n    },\n    {\n        id: \"15779\",\n        name: \"<a href='pt_main.phtml?.sess=u-Fjayk8b90-KP-K04W2B6KS3T4pbrvwD94-rVAVPyj-ytOFtgTB8d0-&.op=3801&pageId=12696&objDefId=10045&.sess=u-Fjayk8b90-KP-K04W2B6KS3T4pbrvwD94-rVAVPyj-ytOFtgTB8d0-&.op=3801&id=15779'>15779--Witkop Pietersburg line 3 132kv powerline-ECO-Task Order</a>\",\n        value: \"542 716.20\",\n        billed: \"0\",\n        forecast: \"542 716.20\",\n        cashflow: \"[]\",\n        cashflow_monthly: \"{}\",\n        row: 2\n    },\n    {\n        id: \"15770\",\n        name: \"<a href='pt_main.phtml?.sess=u-Fjayk8b90-KP-K04W2B6KS3T4pbrvwD94-rVAVPyj-ytOFtgTB8d0-&.op=3801&pageId=12696&objDefId=10045&.sess=u-Fjayk8b90-KP-K04W2B6KS3T4pbrvwD94-rVAVPyj-ytOFtgTB8d0-&.op=3801&id=15770'>15770--CMJAH Fire Remedial Works</a>\",\n        value: \"1 251 232.12\",\n        billed: \"0\",\n        forecast: \"1 251 232.12\",\n        cashflow: \"[]\",\n        cashflow_monthly: \"{}\",\n        row: 3\n    },\n    {\n        id: \"11364\",\n        name: \"<a href='pt_main.phtml?.sess=u-Fjayk8b90-KP-K04W2B6KS3T4pbrvwD94-rVAVPyj-ytOFtgTB8d0-&.op=3801&pageId=12696&objDefId=10045&.sess=u-Fjayk8b90-KP-K04W2B6KS3T4pbrvwD94-rVAVPyj-ytOFtgTB8d0-&.op=3801&id=11364'>11364--Tshebela  Rampheri Unin 132 kv Power line</a>\",\n        value: \"376 965.20\",\n        billed: \"0\",\n        forecast: \"376 965.20\",\n        cashflow: \"[]\",\n        cashflow_monthly: \"{}\",\n        row: 4\n    },\n    {\n        id: \"11365\",\n        name: \"<a href='pt_main.phtml?.sess=u-Fjayk8b90-KP-K04W2B6KS3T4pbrvwD94-rVAVPyj-ytOFtgTB8d0-&.op=3801&pageId=12696&objDefId=10045&.sess=u-Fjayk8b90-KP-K04W2B6KS3T4pbrvwD94-rVAVPyj-ytOFtgTB8d0-&.op=3801&id=11365'>11365--TASEZ PHASE 2 CDC/606/23</a>\",\n        value: \"316 375.00\",\n        billed: \"0\",\n        forecast: \"316 375.00\",\n        cashflow: \"[]\",\n        cashflow_monthly: \"{}\",\n        row: 5\n    },\n    {\n        id: \"11366\",\n        name: \"<a href='pt_main.phtml?.sess=u-Fjayk8b90-KP-K04W2B6KS3T4pbrvwD94-rVAVPyj-ytOFtgTB8d0-&.op=3801&pageId=12696&objDefId=10045&.sess=u-Fjayk8b90-KP-K04W2B6KS3T4pbrvwD94-rVAVPyj-ytOFtgTB8d0-&.op=3801&id=11366'>11366--Mhinga Substation 4503403637</a>\",\n        value: \"526 245.40\",\n        billed: \"0\",\n        forecast: \"526 245.40\",\n        cashflow: \"[]\",\n        cashflow_monthly: \"{}\",\n        row: 6\n    },\n    {\n        id: \"11367\",\n        name: \"<a href='pt_main.phtml?.sess=u-Fjayk8b90-KP-K04W2B6KS3T4pbrvwD94-rVAVPyj-ytOFtgTB8d0-&.op=3801&pageId=12696&objDefId=10045&.sess=u-Fjayk8b90-KP-K04W2B6KS3T4pbrvwD94-rVAVPyj-ytOFtgTB8d0-&.op=3801&id=11367'>11367--Majuba UCG</a>\",\n        value: \"2 561 280.00\",\n        billed: \"0\",\n        forecast: \"2 561 280.00\",\n        cashflow: \"[]\",\n        cashflow_monthly: \"{}\",\n        row: 7\n    },\n    {\n        id: \"11368\",\n        name: \"<a href='pt_main.phtml?.sess=u-Fjayk8b90-KP-K04W2B6KS3T4pbrvwD94-rVAVPyj-ytOFtgTB8d0-&.op=3801&pageId=12696&objDefId=10045&.sess=u-Fjayk8b90-KP-K04W2B6KS3T4pbrvwD94-rVAVPyj-ytOFtgTB8d0-&.op=3801&id=11368'>11368--Leseding Substation  0015TX</a>\",\n        value: \"443 330.00\",\n        billed: \"0\",\n        forecast: \"443 330.00\",\n        cashflow: \"[]\",\n        cashflow_monthly: \"{}\",\n        row: 8\n    },\n    {\n        id: \"11369\",\n        name: \"<a href='pt_main.phtml?.sess=u-Fjayk8b90-KP-K04W2B6KS3T4pbrvwD94-rVAVPyj-ytOFtgTB8d0-&.op=3801&pageId=12696&objDefId=10045&.sess=u-Fjayk8b90-KP-K04W2B6KS3T4pbrvwD94-rVAVPyj-ytOFtgTB8d0-&.op=3801&id=11369'>11369--Alex TRA 1081k</a>\",\n        value: \"136 610.00\",\n        billed: \"0\",\n        forecast: \"116 610.00\",\n        cashflow: \"[]\",\n        cashflow_monthly: '{\"Month Ended March 2024\":{\"amount\":20000,\"key\":\"1431\"}}',\n        row: 9\n    },\n    {\n        id: \"11538\",\n        name: \"<a href='pt_main.phtml?.sess=u-Fjayk8b90-KP-K04W2B6KS3T4pbrvwD94-rVAVPyj-ytOFtgTB8d0-&.op=3801&pageId=12696&objDefId=10045&.sess=u-Fjayk8b90-KP-K04W2B6KS3T4pbrvwD94-rVAVPyj-ytOFtgTB8d0-&.op=3801&id=11538'>11538--Non-billable</a>\",\n        value: \"57 750.00\",\n        billed: \"52 750.00\",\n        forecast: \"5 000.00\",\n        cashflow: '[{\"amount\":2750,\"date\":\"07/31/2024\"},{\"amount\":50000,\"date\":\"07/31/2024\"}]',\n        cashflow_monthly: '{\"Month Ended December 2024\":{\"amount\":5000,\"key\":\"1432\"},\"Month Ended July 2024\":{\"amount\":0,\"key\":\"1433\"},\"Month Ended August 2024\":{\"amount\":0,\"key\":\"1434\"},\"Month Ended September 2024\":{\"amount\":0,\"key\":\"1435\"},\"Month Ended October 2024\":{\"amount\":0,\"key\":\"1436\"},\"Month Ended November 2024\":{\"amount\":0,\"key\":\"1437\"},\"Month Ended March 2024\":{\"amount\":15000,\"key\":\"1421\"},\"Month Ended April 2024\":{\"amount\":20000,\"key\":\"1422\"},\"Month Ended May 2024\":{\"amount\":6787,\"key\":\"1423\"},\"Month Ended June 2024\":{\"amount\":5963,\"key\":\"1424\"}}',\n        row: 10\n    },\n    {\n        id: \"12045\",\n        name: \"<a href='pt_main.phtml?.sess=u-Fjayk8b90-KP-K04W2B6KS3T4pbrvwD94-rVAVPyj-ytOFtgTB8d0-&.op=3801&pageId=12696&objDefId=10045&.sess=u-Fjayk8b90-KP-K04W2B6KS3T4pbrvwD94-rVAVPyj-ytOFtgTB8d0-&.op=3801&id=12045'>12045--Uchoba Task Order -Ecological Walk down</a>\",\n        value: \"118 983.50\",\n        billed: \"0\",\n        forecast: \"118 983.50\",\n        cashflow: \"[]\",\n        cashflow_monthly: \"{}\",\n        row: 11\n    },\n    {\n        id: \"12051\",\n        name: \"<a href='pt_main.phtml?.sess=u-Fjayk8b90-KP-K04W2B6KS3T4pbrvwD94-rVAVPyj-ytOFtgTB8d0-&.op=3801&pageId=12696&objDefId=10045&.sess=u-Fjayk8b90-KP-K04W2B6KS3T4pbrvwD94-rVAVPyj-ytOFtgTB8d0-&.op=3801&id=12051'>12051--Uchoba Task Order - Heritage Walkdown</a>\",\n        value: \"164 309.50\",\n        billed: \"0\",\n        forecast: \"164 309.50\",\n        cashflow: \"[]\",\n        cashflow_monthly: \"{}\",\n        row: 12\n    },\n    {\n        id: \"12064\",\n        name: \"<a href='pt_main.phtml?.sess=u-Fjayk8b90-KP-K04W2B6KS3T4pbrvwD94-rVAVPyj-ytOFtgTB8d0-&.op=3801&pageId=12696&objDefId=10045&.sess=u-Fjayk8b90-KP-K04W2B6KS3T4pbrvwD94-rVAVPyj-ytOFtgTB8d0-&.op=3801&id=12064'>12064--Entokozweni Tekwane North 132KVS Power Line - Heritage Walkthrought</a>\",\n        value: \"94 646.80\",\n        billed: \"0\",\n        forecast: \"94 646.80\",\n        cashflow: \"[]\",\n        cashflow_monthly: \"{}\",\n        row: 13\n    },\n    {\n        id: \"12065\",\n        name: \"<a href='pt_main.phtml?.sess=u-Fjayk8b90-KP-K04W2B6KS3T4pbrvwD94-rVAVPyj-ytOFtgTB8d0-&.op=3801&pageId=12696&objDefId=10045&.sess=u-Fjayk8b90-KP-K04W2B6KS3T4pbrvwD94-rVAVPyj-ytOFtgTB8d0-&.op=3801&id=12065'>12065--Entokozweni Tekwane North 132KVS Power Line - Ecological Walkthrought</a>\",\n        value: \"104 306.80\",\n        billed: \"0\",\n        forecast: \"104 306.80\",\n        cashflow: \"[]\",\n        cashflow_monthly: \"{}\",\n        row: 14\n    },\n    {\n        id: \"12074\",\n        name: \"<a href='pt_main.phtml?.sess=u-Fjayk8b90-KP-K04W2B6KS3T4pbrvwD94-rVAVPyj-ytOFtgTB8d0-&.op=3801&pageId=12696&objDefId=10045&.sess=u-Fjayk8b90-KP-K04W2B6KS3T4pbrvwD94-rVAVPyj-ytOFtgTB8d0-&.op=3801&id=12074'>12074--2319H – ARIES UPINGTON 400KV</a>\",\n        value: \"4 407 800.00\",\n        billed: \"0\",\n        forecast: \"3 857 800.00\",\n        cashflow: \"[]\",\n        cashflow_monthly: '{\"Month Ended August 2024\":{\"amount\":500000,\"key\":\"1425\"},\"Month Ended March 2024\":{\"amount\":50000,\"key\":\"1426\"},\"Month Ended April 2024\":{\"amount\":0,\"key\":\"1427\"},\"Month Ended May 2024\":{\"amount\":0,\"key\":\"1428\"},\"Month Ended June 2024\":{\"amount\":0,\"key\":\"1429\"},\"Month Ended July 2024\":{\"amount\":0,\"key\":\"1430\"}}',\n        row: 15\n    },\n    {\n        id: \"12097\",\n        name: \"<a href='pt_main.phtml?.sess=u-Fjayk8b90-KP-K04W2B6KS3T4pbrvwD94-rVAVPyj-ytOFtgTB8d0-&.op=3801&pageId=12696&objDefId=10045&.sess=u-Fjayk8b90-KP-K04W2B6KS3T4pbrvwD94-rVAVPyj-ytOFtgTB8d0-&.op=3801&id=12097'>12097--GEMSBOK KWAMHLANGA 132KV POWERLINE – ECOLOGICAL WALKTHROUGH</a>\",\n        value: \"53 675.00\",\n        billed: \"0\",\n        forecast: \"53 675.00\",\n        cashflow: \"[]\",\n        cashflow_monthly: \"{}\",\n        row: 16\n    }\n];\nfunction aggregateMonthlyTotals(data) {\n    // Object to store the sum of amounts for each month\n    const monthlyTotals = {};\n    data.forEach((entry)=>{\n        const amount = entry.amount;\n        const dateStr = entry.date;\n        // Parse the date string into a Date object\n        const dateObj = new Date(dateStr);\n        // Extract year and month (0-based month)\n        const year = dateObj.getFullYear();\n        const month = dateObj.getMonth(); // 0 for January, 11 for December\n        // Format the key as \"YYYY-MM\" to group by month and year\n        const yearMonth = \"\".concat(year, \"-\").concat(String(month + 1).padStart(2, \"0\"));\n        // Add the amount to the corresponding month\n        if (!monthlyTotals[yearMonth]) {\n            monthlyTotals[yearMonth] = 0;\n        }\n        monthlyTotals[yearMonth] += amount;\n    });\n    // Convert the result to the desired format\n    const result = {};\n    Object.keys(monthlyTotals).forEach((yearMonth)=>{\n        const [year, month] = yearMonth.split(\"-\");\n        // Create a date object for the last day of the month\n        const endDate = new Date(Number(year), Number(month), 0); // 0 is the last day of the previous month\n        // Format the date to \"Month Ended Month YYYY\"\n        const formattedDate = \"Month Ended \".concat(formatDateToCustomFormat(new Date(Number(year), Number(month) - 1)));\n        result[formattedDate] = monthlyTotals[yearMonth];\n    });\n    return result;\n}\nlists = lists.map((el)=>{\n    let new_el = el;\n    new_el.cashflow_monthly = JSON.parse(new_el.cashflow_monthly);\n    new_el.cashflow = aggregateMonthlyTotals(JSON.parse(new_el.cashflow));\n    return new_el;\n});\nconsole.log(\"updated el\", lists);\nfunction formatDateToCustomFormat(date) {\n    const options = {\n        month: \"long\",\n        year: \"numeric\"\n    };\n    return new Intl.DateTimeFormat(\"en-GB\", options).format(date);\n}\nfunction getFinancialYearPeriods() {\n    const today = new Date();\n    const year = today.getFullYear();\n    // Financial year starts on March 1st of the current year or previous year\n    const financialYearStart = new Date(year, 2, 1); // March 1st of the current year\n    if (today < financialYearStart) {\n        // If today is before March 1st, the financial year starts last year\n        financialYearStart.setFullYear(year - 1);\n    }\n    // Calculate the start and end dates for the current financial year\n    const financialYearEnd = new Date(financialYearStart);\n    financialYearEnd.setFullYear(financialYearStart.getFullYear() + 1);\n    financialYearEnd.setMonth(1); // February\n    financialYearEnd.setDate(29); // To ensure it's a leap year if necessary\n    // Periods for the current financial year\n    const currentYearPeriods = [];\n    let periodStart = new Date(financialYearStart);\n    for(let i = 0; i < 24; i++){\n        // Get the end of the month\n        const endOfMonth = new Date(periodStart.getFullYear(), periodStart.getMonth() + 1, 0);\n        // Format for \"Month Ended September 2024\"\n        const monthEnded = \"Month Ended \".concat(formatDateToCustomFormat(endOfMonth));\n        currentYearPeriods.push({\n            name: monthEnded,\n            children: [\n                {\n                    key: \"2\" + i,\n                    name: \"Claimed\",\n                    width: \"190px\",\n                    renderCell (props) {\n                        if (props.row.cashflow[props.column.parent.name]) {\n                            let amount = Number(props.row.cashflow[props.column.parent.name]) //* (100/115)\n                            ;\n                            return new Intl.NumberFormat(\"en-US\", {\n                                minimumFractionDigits: 2,\n                                maximumFractionDigits: 2,\n                                useGrouping: true\n                            }).format(amount).replace(/,/g, \" \");\n                        }\n                        return \"0.00\";\n                    }\n                },\n                {\n                    key: \"3\" + i,\n                    name: \"Vat\",\n                    width: \"150px\",\n                    renderCell (props) {\n                        if (props.row.cashflow[props.column.parent.name]) {\n                            let amount = Number(props.row.cashflow[props.column.parent.name]) * (15 / 100);\n                            return new Intl.NumberFormat(\"en-US\", {\n                                minimumFractionDigits: 2,\n                                maximumFractionDigits: 2,\n                                useGrouping: true\n                            }).format(amount).replace(/,/g, \" \");\n                        }\n                        return \"0.00\";\n                    }\n                },\n                {\n                    key: \"4\" + i,\n                    name: \"Total Claimed\",\n                    renderCell (props) {\n                        if (props.row.cashflow[props.column.parent.name]) {\n                            let amount = Number(props.row.cashflow[props.column.parent.name]) * (115 / 100);\n                            return new Intl.NumberFormat(\"en-US\", {\n                                minimumFractionDigits: 2,\n                                maximumFractionDigits: 2,\n                                useGrouping: true\n                            }).format(amount).replace(/,/g, \" \");\n                        }\n                        return \"0.00\";\n                    }\n                },\n                {\n                    key: monthEnded,\n                    name: \"Budgted\",\n                    width: \"150px\",\n                    renderEditCell: react_data_grid__WEBPACK_IMPORTED_MODULE_3__.textEditor,\n                    renderCell (props) {\n                        let amount = 0;\n                        if (props.row[props.column.parent.name]) {\n                            amount = Number(props.row[props.column.parent.name]);\n                        } else if (props.row.cashflow_monthly[props.column.parent.name]) {\n                            amount = Number(props.row.cashflow_monthly[props.column.parent.name].amount) * (100 / 100);\n                        }\n                        return new Intl.NumberFormat(\"en-US\", {\n                            minimumFractionDigits: 2,\n                            maximumFractionDigits: 2,\n                            useGrouping: true\n                        }).format(amount).replace(/,/g, \" \");\n                    }\n                },\n                {\n                    key: \"6\" + i,\n                    name: \"Vat\",\n                    width: \"150px\",\n                    renderCell (props) {\n                        let amount = 0;\n                        if (props.row[props.column.parent.name]) {\n                            amount = props.row[props.column.parent.name] * (15 / 100);\n                        } else if (props.row.cashflow_monthly[props.column.parent.name]) {\n                            amount = Number(props.row.cashflow_monthly[props.column.parent.name].amount) * (15 / 100);\n                        }\n                        return new Intl.NumberFormat(\"en-US\", {\n                            minimumFractionDigits: 2,\n                            maximumFractionDigits: 2,\n                            useGrouping: true\n                        }).format(amount).replace(/,/g, \" \");\n                    }\n                },\n                {\n                    key: \"7\" + i,\n                    name: \"Total Budgted\",\n                    width: \"150px\",\n                    renderCell (props) {\n                        let amount = 0;\n                        if (props.row[props.column.parent.name]) {\n                            amount = props.row[props.column.parent.name] * (115 / 100);\n                        } else if (props.row.cashflow_monthly[props.column.parent.name]) {\n                            amount = Number(props.row.cashflow_monthly[props.column.parent.name].amount) * (115 / 100);\n                        }\n                        return new Intl.NumberFormat(\"en-US\", {\n                            minimumFractionDigits: 2,\n                            maximumFractionDigits: 2,\n                            useGrouping: true\n                        }).format(amount).replace(/,/g, \" \");\n                    }\n                },\n                {\n                    key: \"8\" + i,\n                    name: \"Over/Under Billed\",\n                    renderCell (props) {\n                        let totoal_budget = 0;\n                        if (props.row[props.column.parent.name]) {\n                            totoal_budget = props.row[props.column.parent.name] * (115 / 100);\n                        } else if (props.row.cashflow_monthly[props.column.parent.name]) {\n                            totoal_budget = Number(props.row.cashflow_monthly[props.column.parent.name].amount) * (115 / 100);\n                        }\n                        let actual = 0;\n                        if (props.row.cashflow[props.column.parent.name]) {\n                            actual = Number(props.row.cashflow[props.column.parent.name]) * (115 / 100);\n                        }\n                        let diff = actual - totoal_budget;\n                        return new Intl.NumberFormat(\"en-US\", {\n                            minimumFractionDigits: 2,\n                            maximumFractionDigits: 2,\n                            useGrouping: true\n                        }).format(diff).replace(/,/g, \" \");\n                    }\n                }\n            ],\n            key: \"9\" + i\n        });\n        // Move to the next month\n        periodStart.setMonth(periodStart.getMonth() + 1);\n    }\n    return currentYearPeriods;\n}\nconsole.log(getFinancialYearPeriods());\nlet res = getFinancialYearPeriods();\nconst columns = [\n    {\n        name: \"Project Billing Projections\",\n        children: [\n            {\n                key: \"1\",\n                name: \"Task Order\",\n                frozen: true,\n                width: \"200px\",\n                renderCell (props) {\n                    return props.row[\"name\"];\n                }\n            },\n            {\n                key: \"3\",\n                name: \"Value\",\n                width: \"140px\",\n                renderCell (props) {\n                    return props.row[\"value\"];\n                }\n            },\n            {\n                key: \"4\",\n                name: \"Claimed Excl\",\n                width: \"140px\",\n                renderCell (props) {\n                    let num = Number(props.row[\"billed\"].replace(/\\s+/g, \"\")) * (100 / 100);\n                    return new Intl.NumberFormat(\"en-US\", {\n                        minimumFractionDigits: 2,\n                        maximumFractionDigits: 2,\n                        useGrouping: true\n                    }).format(num).replace(/,/g, \" \");\n                }\n            },\n            {\n                key: \"5\",\n                name: \"Vat\",\n                width: \"150px\",\n                renderCell (props) {\n                    let num = (Number(props.row[\"billed\"].replace(/\\s+/g, \"\")) * (15 / 100)).toFixed(2);\n                    return new Intl.NumberFormat(\"en-US\", {\n                        minimumFractionDigits: 2,\n                        maximumFractionDigits: 2,\n                        useGrouping: true\n                    }).format(num).replace(/,/g, \" \");\n                }\n            },\n            {\n                key: \"6\",\n                name: \"Total Claimed\",\n                width: \"150px\",\n                renderCell (props) {\n                    let num = (Number(props.row[\"billed\"].replace(/\\s+/g, \"\")) * (115 / 100)).toFixed(2);\n                    return new Intl.NumberFormat(\"en-US\", {\n                        minimumFractionDigits: 2,\n                        maximumFractionDigits: 2,\n                        useGrouping: true\n                    }).format(num).replace(/,/g, \" \");\n                }\n            },\n            {\n                key: \"forecast\",\n                width: \"150px\",\n                name: \"Budget Remaining\",\n                renderEditCell: react_data_grid__WEBPACK_IMPORTED_MODULE_3__.textEditor\n            }\n        ]\n    },\n    {\n        key: \"8\",\n        name: \" \"\n    },\n    ...res\n];\nconst rows = lists;\nconsole.log(rows);\nfunction rowKeyGetter(row) {\n    return row.id;\n}\nfunction ColumnGrouping(param) {\n    let {} = param;\n    _s();\n    const [rowss, setRowss] = (0,react__WEBPACK_IMPORTED_MODULE_2__.useState)(rows);\n    const [selectedRows, setSelectedRows] = (0,react__WEBPACK_IMPORTED_MODULE_2__.useState)(()=>new Set());\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(react_data_grid__WEBPACK_IMPORTED_MODULE_3__[\"default\"], {\n        style: {\n            height: \"100vh\"\n        },\n        //   rowKeyGetter={rowKeyGetter}\n        columns: columns,\n        rows: rowss,\n        onRowsChange: setRowss,\n        onSelectedRowsChange: setSelectedRows,\n        topSummaryRows: [\n            0\n        ],\n        bottomSummaryRows: [\n            8\n        ],\n        className: \"fill-grid\",\n        // direction={direction}\n        selectedRows: selectedRows,\n        defaultColumnOptions: {\n        }\n    }, void 0, false, {\n        fileName: \"/Users/nekhavhambemartin/Desktop/insnip copy/app/table/page.tsx\",\n        lineNumber: 495,\n        columnNumber: 5\n    }, this);\n}\n_s(ColumnGrouping, \"KSIjp0A/1r3QfYwMvCXk16AoVi8=\");\n_c = ColumnGrouping;\nvar _c;\n$RefreshReg$(_c, \"ColumnGrouping\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./app/table/page.tsx\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/clsx/dist/clsx.mjs":
/*!*****************************************!*\
  !*** ./node_modules/clsx/dist/clsx.mjs ***!
  \*****************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   clsx: function() { return /* binding */ clsx; }\n/* harmony export */ });\nfunction r(e) {\n    var t, f, n = \"\";\n    if (\"string\" == typeof e || \"number\" == typeof e) n += e;\n    else if (\"object\" == typeof e) if (Array.isArray(e)) {\n        var o = e.length;\n        for(t = 0; t < o; t++)e[t] && (f = r(e[t])) && (n && (n += \" \"), n += f);\n    } else for(f in e)e[f] && (n && (n += \" \"), n += f);\n    return n;\n}\nfunction clsx() {\n    for(var e, t, f = 0, n = \"\", o = arguments.length; f < o; f++)(e = arguments[f]) && (t = r(e)) && (n && (n += \" \"), n += t);\n    return n;\n}\n/* harmony default export */ __webpack_exports__[\"default\"] = (clsx);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9jbHN4L2Rpc3QvY2xzeC5tanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLFNBQVNBLEVBQUVDLENBQUM7SUFBRSxJQUFJQyxHQUFFQyxHQUFFQyxJQUFFO0lBQUcsSUFBRyxZQUFVLE9BQU9ILEtBQUcsWUFBVSxPQUFPQSxHQUFFRyxLQUFHSDtTQUFPLElBQUcsWUFBVSxPQUFPQSxHQUFFLElBQUdJLE1BQU1DLE9BQU8sQ0FBQ0wsSUFBRztRQUFDLElBQUlNLElBQUVOLEVBQUVPLE1BQU07UUFBQyxJQUFJTixJQUFFLEdBQUVBLElBQUVLLEdBQUVMLElBQUlELENBQUMsQ0FBQ0MsRUFBRSxJQUFHQyxDQUFBQSxJQUFFSCxFQUFFQyxDQUFDLENBQUNDLEVBQUUsTUFBS0UsQ0FBQUEsS0FBSUEsQ0FBQUEsS0FBRyxHQUFFLEdBQUdBLEtBQUdELENBQUFBO0lBQUUsT0FBTSxJQUFJQSxLQUFLRixFQUFFQSxDQUFDLENBQUNFLEVBQUUsSUFBR0MsQ0FBQUEsS0FBSUEsQ0FBQUEsS0FBRyxHQUFFLEdBQUdBLEtBQUdELENBQUFBO0lBQUcsT0FBT0M7QUFBQztBQUFRLFNBQVNLO0lBQU8sSUFBSSxJQUFJUixHQUFFQyxHQUFFQyxJQUFFLEdBQUVDLElBQUUsSUFBR0csSUFBRUcsVUFBVUYsTUFBTSxFQUFDTCxJQUFFSSxHQUFFSixJQUFJLENBQUNGLElBQUVTLFNBQVMsQ0FBQ1AsRUFBRSxLQUFJRCxDQUFBQSxJQUFFRixFQUFFQyxFQUFDLEtBQUtHLENBQUFBLEtBQUlBLENBQUFBLEtBQUcsR0FBRSxHQUFHQSxLQUFHRixDQUFBQTtJQUFHLE9BQU9FO0FBQUM7QUFBQywrREFBZUssSUFBSUEsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvY2xzeC9kaXN0L2Nsc3gubWpzP2Q5YzYiXSwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gcihlKXt2YXIgdCxmLG49XCJcIjtpZihcInN0cmluZ1wiPT10eXBlb2YgZXx8XCJudW1iZXJcIj09dHlwZW9mIGUpbis9ZTtlbHNlIGlmKFwib2JqZWN0XCI9PXR5cGVvZiBlKWlmKEFycmF5LmlzQXJyYXkoZSkpe3ZhciBvPWUubGVuZ3RoO2Zvcih0PTA7dDxvO3QrKyllW3RdJiYoZj1yKGVbdF0pKSYmKG4mJihuKz1cIiBcIiksbis9Zil9ZWxzZSBmb3IoZiBpbiBlKWVbZl0mJihuJiYobis9XCIgXCIpLG4rPWYpO3JldHVybiBufWV4cG9ydCBmdW5jdGlvbiBjbHN4KCl7Zm9yKHZhciBlLHQsZj0wLG49XCJcIixvPWFyZ3VtZW50cy5sZW5ndGg7ZjxvO2YrKykoZT1hcmd1bWVudHNbZl0pJiYodD1yKGUpKSYmKG4mJihuKz1cIiBcIiksbis9dCk7cmV0dXJuIG59ZXhwb3J0IGRlZmF1bHQgY2xzeDsiXSwibmFtZXMiOlsiciIsImUiLCJ0IiwiZiIsIm4iLCJBcnJheSIsImlzQXJyYXkiLCJvIiwibGVuZ3RoIiwiY2xzeCIsImFyZ3VtZW50cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/clsx/dist/clsx.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/react-data-grid/lib/bundle.js":
/*!****************************************************!*\
  !*** ./node_modules/react-data-grid/lib/bundle.js ***!
  \****************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DataGridDefaultRenderersProvider: function() { return /* binding */ DataGridDefaultRenderersProvider; },\n/* harmony export */   Row: function() { return /* binding */ RowComponent$1; },\n/* harmony export */   SELECT_COLUMN_KEY: function() { return /* binding */ SELECT_COLUMN_KEY; },\n/* harmony export */   SelectCellFormatter: function() { return /* binding */ SelectCellFormatter; },\n/* harmony export */   SelectColumn: function() { return /* binding */ SelectColumn; },\n/* harmony export */   ToggleGroup: function() { return /* binding */ ToggleGroup; },\n/* harmony export */   TreeDataGrid: function() { return /* binding */ TreeDataGrid$1; },\n/* harmony export */   \"default\": function() { return /* binding */ DataGrid$1; },\n/* harmony export */   renderCheckbox: function() { return /* binding */ renderCheckbox; },\n/* harmony export */   renderHeaderCell: function() { return /* binding */ renderHeaderCell; },\n/* harmony export */   renderSortIcon: function() { return /* binding */ renderSortIcon; },\n/* harmony export */   renderSortPriority: function() { return /* binding */ renderSortPriority; },\n/* harmony export */   renderToggleGroup: function() { return /* binding */ renderToggleGroup; },\n/* harmony export */   renderValue: function() { return /* binding */ renderValue; },\n/* harmony export */   textEditor: function() { return /* binding */ textEditor; },\n/* harmony export */   useRowSelection: function() { return /* binding */ useRowSelection; }\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react-dom */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react-dom/index.js\");\n/* harmony import */ var clsx__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! clsx */ \"(app-pages-browser)/./node_modules/clsx/dist/clsx.mjs\");\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react/jsx-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-runtime.js\");\nvar _s = $RefreshSig$(), _s1 = $RefreshSig$(), _s2 = $RefreshSig$(), _s3 = $RefreshSig$(), _s4 = $RefreshSig$(), _s5 = $RefreshSig$(), _s6 = $RefreshSig$(), _s7 = $RefreshSig$(), _s8 = $RefreshSig$(), _s9 = $RefreshSig$(), _s10 = $RefreshSig$(), _s11 = $RefreshSig$(), _s12 = $RefreshSig$(), _s13 = $RefreshSig$(), _s14 = $RefreshSig$(), _s15 = $RefreshSig$(), _s16 = $RefreshSig$(), _s17 = $RefreshSig$(), _s18 = $RefreshSig$(), _s19 = $RefreshSig$(), _s20 = $RefreshSig$(), _s21 = $RefreshSig$(), _s22 = $RefreshSig$(), _s23 = $RefreshSig$(), _s24 = $RefreshSig$();\n\n\n\n\nfunction getColSpan(column, lastFrozenColumnIndex, args) {\n    const colSpan = typeof column.colSpan === \"function\" ? column.colSpan(args) : 1;\n    if (Number.isInteger(colSpan) && colSpan > 1 && (!column.frozen || column.idx + colSpan - 1 <= lastFrozenColumnIndex)) {\n        return colSpan;\n    }\n    return undefined;\n}\nfunction stopPropagation(event) {\n    event.stopPropagation();\n}\nfunction scrollIntoView(element) {\n    element === null || element === void 0 ? void 0 : element.scrollIntoView({\n        inline: \"nearest\",\n        block: \"nearest\"\n    });\n}\nfunction createCellEvent(event) {\n    let defaultPrevented = false;\n    const cellEvent = {\n        ...event,\n        preventGridDefault () {\n            defaultPrevented = true;\n        },\n        isGridDefaultPrevented () {\n            return defaultPrevented;\n        }\n    };\n    Object.setPrototypeOf(cellEvent, Object.getPrototypeOf(event));\n    return cellEvent;\n}\nconst nonInputKeys = new Set([\n    \"Unidentified\",\n    \"Alt\",\n    \"AltGraph\",\n    \"CapsLock\",\n    \"Control\",\n    \"Fn\",\n    \"FnLock\",\n    \"Meta\",\n    \"NumLock\",\n    \"ScrollLock\",\n    \"Shift\",\n    \"Tab\",\n    \"ArrowDown\",\n    \"ArrowLeft\",\n    \"ArrowRight\",\n    \"ArrowUp\",\n    \"End\",\n    \"Home\",\n    \"PageDown\",\n    \"PageUp\",\n    \"Insert\",\n    \"ContextMenu\",\n    \"Escape\",\n    \"Pause\",\n    \"Play\",\n    \"PrintScreen\",\n    \"F1\",\n    \"F3\",\n    \"F4\",\n    \"F5\",\n    \"F6\",\n    \"F7\",\n    \"F8\",\n    \"F9\",\n    \"F10\",\n    \"F11\",\n    \"F12\"\n]);\nfunction isCtrlKeyHeldDown(e) {\n    return (e.ctrlKey || e.metaKey) && e.key !== \"Control\";\n}\nfunction isDefaultCellInput(event) {\n    const vKey = 86;\n    if (isCtrlKeyHeldDown(event) && event.keyCode !== vKey) return false;\n    return !nonInputKeys.has(event.key);\n}\nfunction onEditorNavigation(param) {\n    let { key, target } = param;\n    if (key === \"Tab\" && (target instanceof HTMLInputElement || target instanceof HTMLTextAreaElement || target instanceof HTMLSelectElement)) {\n        var _target_closest;\n        return ((_target_closest = target.closest(\".rdg-editor-container\")) === null || _target_closest === void 0 ? void 0 : _target_closest.querySelectorAll(\"input, textarea, select\").length) === 1;\n    }\n    return false;\n}\nconst measuringCellClassname = \"mlln6zg7-0-0-beta-46\";\nfunction renderMeasuringCells(viewportColumns) {\n    return viewportColumns.map((param)=>{\n        let { key, idx, minWidth, maxWidth } = param;\n        return /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(\"div\", {\n            className: measuringCellClassname,\n            style: {\n                gridColumnStart: idx + 1,\n                minWidth,\n                maxWidth\n            },\n            \"data-measuring-cell-key\": key\n        }, key);\n    });\n}\nfunction isSelectedCellEditable(param) {\n    let { selectedPosition, columns, rows } = param;\n    const column = columns[selectedPosition.idx];\n    const row = rows[selectedPosition.rowIdx];\n    return isCellEditableUtil(column, row);\n}\nfunction isCellEditableUtil(column, row) {\n    return column.renderEditCell != null && (typeof column.editable === \"function\" ? column.editable(row) : column.editable) !== false;\n}\nfunction getSelectedCellColSpan(param) {\n    let { rows, topSummaryRows, bottomSummaryRows, rowIdx, mainHeaderRowIdx, lastFrozenColumnIndex, column } = param;\n    var _topSummaryRows_length;\n    const topSummaryRowsCount = (_topSummaryRows_length = topSummaryRows === null || topSummaryRows === void 0 ? void 0 : topSummaryRows.length) !== null && _topSummaryRows_length !== void 0 ? _topSummaryRows_length : 0;\n    if (rowIdx === mainHeaderRowIdx) {\n        return getColSpan(column, lastFrozenColumnIndex, {\n            type: \"HEADER\"\n        });\n    }\n    if (topSummaryRows && rowIdx > mainHeaderRowIdx && rowIdx <= topSummaryRowsCount + mainHeaderRowIdx) {\n        return getColSpan(column, lastFrozenColumnIndex, {\n            type: \"SUMMARY\",\n            row: topSummaryRows[rowIdx + topSummaryRowsCount]\n        });\n    }\n    if (rowIdx >= 0 && rowIdx < rows.length) {\n        const row = rows[rowIdx];\n        return getColSpan(column, lastFrozenColumnIndex, {\n            type: \"ROW\",\n            row\n        });\n    }\n    if (bottomSummaryRows) {\n        return getColSpan(column, lastFrozenColumnIndex, {\n            type: \"SUMMARY\",\n            row: bottomSummaryRows[rowIdx - rows.length]\n        });\n    }\n    return undefined;\n}\nfunction getNextSelectedCellPosition(param) {\n    let { moveUp, moveNext, cellNavigationMode, columns, colSpanColumns, rows, topSummaryRows, bottomSummaryRows, minRowIdx, mainHeaderRowIdx, maxRowIdx, currentPosition: { idx: currentIdx, rowIdx: currentRowIdx }, nextPosition, lastFrozenColumnIndex, isCellWithinBounds } = param;\n    let { idx: nextIdx, rowIdx: nextRowIdx } = nextPosition;\n    const columnsCount = columns.length;\n    const setColSpan = (moveNext)=>{\n        for (const column of colSpanColumns){\n            const colIdx = column.idx;\n            if (colIdx > nextIdx) break;\n            const colSpan = getSelectedCellColSpan({\n                rows,\n                topSummaryRows,\n                bottomSummaryRows,\n                rowIdx: nextRowIdx,\n                mainHeaderRowIdx,\n                lastFrozenColumnIndex,\n                column\n            });\n            if (colSpan && nextIdx > colIdx && nextIdx < colSpan + colIdx) {\n                nextIdx = colIdx + (moveNext ? colSpan : 0);\n                break;\n            }\n        }\n    };\n    const getParentRowIdx = (parent)=>{\n        return parent.level + mainHeaderRowIdx;\n    };\n    const setHeaderGroupColAndRowSpan = ()=>{\n        if (moveNext) {\n            const nextColumn = columns[nextIdx];\n            let parent = nextColumn.parent;\n            while(parent !== undefined){\n                const parentRowIdx = getParentRowIdx(parent);\n                if (nextRowIdx === parentRowIdx) {\n                    nextIdx = parent.idx + parent.colSpan;\n                    break;\n                }\n                parent = parent.parent;\n            }\n        } else if (moveUp) {\n            const nextColumn = columns[nextIdx];\n            let parent = nextColumn.parent;\n            let found = false;\n            while(parent !== undefined){\n                const parentRowIdx = getParentRowIdx(parent);\n                if (nextRowIdx >= parentRowIdx) {\n                    nextIdx = parent.idx;\n                    nextRowIdx = parentRowIdx;\n                    found = true;\n                    break;\n                }\n                parent = parent.parent;\n            }\n            if (!found) {\n                nextIdx = currentIdx;\n                nextRowIdx = currentRowIdx;\n            }\n        }\n    };\n    if (isCellWithinBounds(nextPosition)) {\n        setColSpan(moveNext);\n        if (nextRowIdx < mainHeaderRowIdx) {\n            setHeaderGroupColAndRowSpan();\n        }\n    }\n    if (cellNavigationMode === \"CHANGE_ROW\") {\n        const isAfterLastColumn = nextIdx === columnsCount;\n        const isBeforeFirstColumn = nextIdx === -1;\n        if (isAfterLastColumn) {\n            const isLastRow = nextRowIdx === maxRowIdx;\n            if (!isLastRow) {\n                nextIdx = 0;\n                nextRowIdx += 1;\n            }\n        } else if (isBeforeFirstColumn) {\n            const isFirstRow = nextRowIdx === minRowIdx;\n            if (!isFirstRow) {\n                nextRowIdx -= 1;\n                nextIdx = columnsCount - 1;\n            }\n            setColSpan(false);\n        }\n    }\n    if (nextRowIdx < mainHeaderRowIdx) {\n        const nextColumn = columns[nextIdx];\n        let parent = nextColumn.parent;\n        const nextParentRowIdx = nextRowIdx;\n        nextRowIdx = mainHeaderRowIdx;\n        while(parent !== undefined){\n            const parentRowIdx = getParentRowIdx(parent);\n            if (parentRowIdx >= nextParentRowIdx) {\n                nextRowIdx = parentRowIdx;\n                nextIdx = parent.idx;\n            }\n            parent = parent.parent;\n        }\n    }\n    return {\n        idx: nextIdx,\n        rowIdx: nextRowIdx\n    };\n}\nfunction canExitGrid(param) {\n    let { maxColIdx, minRowIdx, maxRowIdx, selectedPosition: { rowIdx, idx }, shiftKey } = param;\n    const atLastCellInRow = idx === maxColIdx;\n    const atFirstCellInRow = idx === 0;\n    const atLastRow = rowIdx === maxRowIdx;\n    const atFirstRow = rowIdx === minRowIdx;\n    return shiftKey ? atFirstCellInRow && atFirstRow : atLastCellInRow && atLastRow;\n}\nconst cell = \"cj343x07-0-0-beta-46\";\nconst cellClassname = \"rdg-cell \".concat(cell);\nconst cellFrozen = \"csofj7r7-0-0-beta-46\";\nconst cellFrozenClassname = \"rdg-cell-frozen \".concat(cellFrozen);\nfunction getRowStyle(rowIdx) {\n    return {\n        \"--rdg-grid-row-start\": rowIdx\n    };\n}\nfunction getHeaderCellStyle(column, rowIdx, rowSpan) {\n    const gridRowEnd = rowIdx + 1;\n    const paddingBlockStart = \"calc(\".concat(rowSpan - 1, \" * var(--rdg-header-row-height))\");\n    if (column.parent === undefined) {\n        return {\n            insetBlockStart: 0,\n            gridRowStart: 1,\n            gridRowEnd,\n            paddingBlockStart\n        };\n    }\n    return {\n        insetBlockStart: \"calc(\".concat(rowIdx - rowSpan, \" * var(--rdg-header-row-height))\"),\n        gridRowStart: gridRowEnd - rowSpan,\n        gridRowEnd,\n        paddingBlockStart\n    };\n}\nfunction getCellStyle(column) {\n    let colSpan = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 1;\n    const index = column.idx + 1;\n    return {\n        gridColumnStart: index,\n        gridColumnEnd: index + colSpan,\n        insetInlineStart: column.frozen ? \"var(--rdg-frozen-left-\".concat(column.idx, \")\") : undefined\n    };\n}\nfunction getCellClassname(column) {\n    for(var _len = arguments.length, extraClasses = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){\n        extraClasses[_key - 1] = arguments[_key];\n    }\n    return (0,clsx__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(cellClassname, ...extraClasses, column.frozen && cellFrozenClassname);\n}\nconst { min, max, floor, sign, abs } = Math;\nfunction assertIsValidKeyGetter(keyGetter) {\n    if (typeof keyGetter !== \"function\") {\n        throw new Error(\"Please specify the rowKeyGetter prop to use selection\");\n    }\n}\nfunction clampColumnWidth(width, param) {\n    let { minWidth, maxWidth } = param;\n    width = max(width, minWidth);\n    if (typeof maxWidth === \"number\" && maxWidth >= minWidth) {\n        return min(width, maxWidth);\n    }\n    return width;\n}\nfunction getHeaderCellRowSpan(column, rowIdx) {\n    return column.parent === undefined ? rowIdx : column.level - column.parent.level;\n}\nconst checkboxContainer = \"c1bn88vv7-0-0-beta-46\";\nconst checkbox = \"c1qt073l7-0-0-beta-46\";\nconst checkboxClassname = \"rdg-checkbox-input \".concat(checkbox);\nfunction renderCheckbox(param) {\n    let { onChange, ...props } = param;\n    function handleChange(e) {\n        onChange(e.target.checked, e.nativeEvent.shiftKey);\n    }\n    return /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(\"div\", {\n        className: checkboxContainer,\n        children: /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(\"input\", {\n            type: \"checkbox\",\n            ...props,\n            className: checkboxClassname,\n            onChange: handleChange\n        })\n    });\n}\nconst groupCellContent = \"g1s9ylgp7-0-0-beta-46\";\nconst groupCellContentClassname = \"rdg-group-cell-content \".concat(groupCellContent);\nconst caret = \"cz54e4y7-0-0-beta-46\";\nconst caretClassname = \"rdg-caret \".concat(caret);\nfunction renderToggleGroup(props) {\n    return /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(ToggleGroup, {\n        ...props\n    });\n}\nfunction ToggleGroup(param) {\n    let { groupKey, isExpanded, tabIndex, toggleGroup } = param;\n    function handleKeyDown(param) {\n        let { key } = param;\n        if (key === \"Enter\") {\n            toggleGroup();\n        }\n    }\n    const d = isExpanded ? \"M1 1 L 7 7 L 13 1\" : \"M1 7 L 7 1 L 13 7\";\n    return /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsxs)(\"span\", {\n        className: groupCellContentClassname,\n        tabIndex: tabIndex,\n        onKeyDown: handleKeyDown,\n        children: [\n            groupKey,\n            /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(\"svg\", {\n                viewBox: \"0 0 14 8\",\n                width: \"14\",\n                height: \"8\",\n                className: caretClassname,\n                \"aria-hidden\": true,\n                children: /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(\"path\", {\n                    d: d\n                })\n            })\n        ]\n    });\n}\n_c = ToggleGroup;\nfunction renderValue(props) {\n    try {\n        return props.row[props.column.key];\n    } catch (e) {\n        return null;\n    }\n}\nconst DataGridDefaultRenderersContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)(undefined);\nconst DataGridDefaultRenderersProvider = DataGridDefaultRenderersContext.Provider;\nfunction useDefaultRenderers() {\n    _s();\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(DataGridDefaultRenderersContext);\n}\n_s(useDefaultRenderers, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nfunction SelectCellFormatter(param) {\n    let { value, tabIndex, disabled, onChange, \"aria-label\": ariaLabel, \"aria-labelledby\": ariaLabelledBy } = param;\n    _s1();\n    const renderCheckbox = useDefaultRenderers().renderCheckbox;\n    return renderCheckbox({\n        \"aria-label\": ariaLabel,\n        \"aria-labelledby\": ariaLabelledBy,\n        tabIndex,\n        disabled,\n        checked: value,\n        onChange\n    });\n}\n_s1(SelectCellFormatter, \"a14rNTCCLYsN2sBpDkNzRee2VAA=\", false, function() {\n    return [\n        useDefaultRenderers\n    ];\n});\n_c1 = SelectCellFormatter;\nconst RowSelectionContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)(undefined);\nconst RowSelectionProvider = RowSelectionContext.Provider;\nconst RowSelectionChangeContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)(undefined);\nconst RowSelectionChangeProvider = RowSelectionChangeContext.Provider;\nfunction useRowSelection() {\n    _s2();\n    const rowSelectionContext = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(RowSelectionContext);\n    const rowSelectionChangeContext = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(RowSelectionChangeContext);\n    if (rowSelectionContext === undefined || rowSelectionChangeContext === undefined) {\n        throw new Error(\"useRowSelection must be used within DataGrid cells\");\n    }\n    return [\n        rowSelectionContext,\n        rowSelectionChangeContext\n    ];\n}\n_s2(useRowSelection, \"aqU8GdUfJW2wMarj94NGQABJBw0=\");\nconst SELECT_COLUMN_KEY = \"select-row\";\nfunction HeaderRenderer(props) {\n    _s3();\n    const [isRowSelected, onRowSelectionChange] = useRowSelection();\n    return /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(SelectCellFormatter, {\n        \"aria-label\": \"Select All\",\n        tabIndex: props.tabIndex,\n        value: isRowSelected,\n        onChange: (checked)=>{\n            onRowSelectionChange({\n                type: \"HEADER\",\n                checked\n            });\n        }\n    });\n}\n_s3(HeaderRenderer, \"k9uFIpP/J3RmXb41UqoaNV0F7SQ=\", false, function() {\n    return [\n        useRowSelection\n    ];\n});\n_c2 = HeaderRenderer;\nfunction SelectFormatter(props) {\n    _s4();\n    const [isRowSelected, onRowSelectionChange] = useRowSelection();\n    return /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(SelectCellFormatter, {\n        \"aria-label\": \"Select\",\n        tabIndex: props.tabIndex,\n        value: isRowSelected,\n        onChange: (checked, isShiftClick)=>{\n            onRowSelectionChange({\n                type: \"ROW\",\n                row: props.row,\n                checked,\n                isShiftClick\n            });\n        }\n    });\n}\n_s4(SelectFormatter, \"k9uFIpP/J3RmXb41UqoaNV0F7SQ=\", false, function() {\n    return [\n        useRowSelection\n    ];\n});\n_c3 = SelectFormatter;\nfunction SelectGroupFormatter(props) {\n    _s5();\n    const [isRowSelected, onRowSelectionChange] = useRowSelection();\n    return /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(SelectCellFormatter, {\n        \"aria-label\": \"Select Group\",\n        tabIndex: props.tabIndex,\n        value: isRowSelected,\n        onChange: (checked)=>{\n            onRowSelectionChange({\n                type: \"ROW\",\n                row: props.row,\n                checked,\n                isShiftClick: false\n            });\n        }\n    });\n}\n_s5(SelectGroupFormatter, \"k9uFIpP/J3RmXb41UqoaNV0F7SQ=\", false, function() {\n    return [\n        useRowSelection\n    ];\n});\n_c4 = SelectGroupFormatter;\nconst SelectColumn = {\n    key: SELECT_COLUMN_KEY,\n    name: \"\",\n    width: 35,\n    minWidth: 35,\n    maxWidth: 35,\n    resizable: false,\n    sortable: false,\n    frozen: true,\n    renderHeaderCell (props) {\n        return /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(HeaderRenderer, {\n            ...props\n        });\n    },\n    renderCell (props) {\n        return /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(SelectFormatter, {\n            ...props\n        });\n    },\n    renderGroupCell (props) {\n        return /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(SelectGroupFormatter, {\n            ...props\n        });\n    }\n};\nconst DEFAULT_COLUMN_WIDTH = \"auto\";\nconst DEFAULT_COLUMN_MIN_WIDTH = 50;\nfunction useCalculatedColumns(param) {\n    let { rawColumns, defaultColumnOptions, getColumnWidth, viewportWidth, scrollLeft, enableVirtualization } = param;\n    _s6();\n    var _defaultColumnOptions_width;\n    const defaultWidth = (_defaultColumnOptions_width = defaultColumnOptions === null || defaultColumnOptions === void 0 ? void 0 : defaultColumnOptions.width) !== null && _defaultColumnOptions_width !== void 0 ? _defaultColumnOptions_width : DEFAULT_COLUMN_WIDTH;\n    var _defaultColumnOptions_minWidth;\n    const defaultMinWidth = (_defaultColumnOptions_minWidth = defaultColumnOptions === null || defaultColumnOptions === void 0 ? void 0 : defaultColumnOptions.minWidth) !== null && _defaultColumnOptions_minWidth !== void 0 ? _defaultColumnOptions_minWidth : DEFAULT_COLUMN_MIN_WIDTH;\n    var _defaultColumnOptions_maxWidth;\n    const defaultMaxWidth = (_defaultColumnOptions_maxWidth = defaultColumnOptions === null || defaultColumnOptions === void 0 ? void 0 : defaultColumnOptions.maxWidth) !== null && _defaultColumnOptions_maxWidth !== void 0 ? _defaultColumnOptions_maxWidth : undefined;\n    var _defaultColumnOptions_renderCell;\n    const defaultCellRenderer = (_defaultColumnOptions_renderCell = defaultColumnOptions === null || defaultColumnOptions === void 0 ? void 0 : defaultColumnOptions.renderCell) !== null && _defaultColumnOptions_renderCell !== void 0 ? _defaultColumnOptions_renderCell : renderValue;\n    var _defaultColumnOptions_sortable;\n    const defaultSortable = (_defaultColumnOptions_sortable = defaultColumnOptions === null || defaultColumnOptions === void 0 ? void 0 : defaultColumnOptions.sortable) !== null && _defaultColumnOptions_sortable !== void 0 ? _defaultColumnOptions_sortable : false;\n    var _defaultColumnOptions_resizable;\n    const defaultResizable = (_defaultColumnOptions_resizable = defaultColumnOptions === null || defaultColumnOptions === void 0 ? void 0 : defaultColumnOptions.resizable) !== null && _defaultColumnOptions_resizable !== void 0 ? _defaultColumnOptions_resizable : false;\n    var _defaultColumnOptions_draggable;\n    const defaultDraggable = (_defaultColumnOptions_draggable = defaultColumnOptions === null || defaultColumnOptions === void 0 ? void 0 : defaultColumnOptions.draggable) !== null && _defaultColumnOptions_draggable !== void 0 ? _defaultColumnOptions_draggable : false;\n    const { columns, colSpanColumns, lastFrozenColumnIndex, headerRowsCount } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>{\n        let lastFrozenColumnIndex = -1;\n        let headerRowsCount = 1;\n        const columns = [];\n        collectColumns(rawColumns, 1);\n        function collectColumns(rawColumns, level, parent) {\n            for (const rawColumn of rawColumns){\n                if (\"children\" in rawColumn) {\n                    const calculatedColumnParent = {\n                        name: rawColumn.name,\n                        parent,\n                        idx: -1,\n                        colSpan: 0,\n                        level: 0,\n                        headerCellClass: rawColumn.headerCellClass\n                    };\n                    collectColumns(rawColumn.children, level + 1, calculatedColumnParent);\n                    continue;\n                }\n                var _rawColumn_frozen;\n                const frozen = (_rawColumn_frozen = rawColumn.frozen) !== null && _rawColumn_frozen !== void 0 ? _rawColumn_frozen : false;\n                var _rawColumn_width, _rawColumn_minWidth, _rawColumn_maxWidth, _rawColumn_sortable, _rawColumn_resizable, _rawColumn_draggable, _rawColumn_renderCell;\n                const column = {\n                    ...rawColumn,\n                    parent,\n                    idx: 0,\n                    level: 0,\n                    frozen,\n                    width: (_rawColumn_width = rawColumn.width) !== null && _rawColumn_width !== void 0 ? _rawColumn_width : defaultWidth,\n                    minWidth: (_rawColumn_minWidth = rawColumn.minWidth) !== null && _rawColumn_minWidth !== void 0 ? _rawColumn_minWidth : defaultMinWidth,\n                    maxWidth: (_rawColumn_maxWidth = rawColumn.maxWidth) !== null && _rawColumn_maxWidth !== void 0 ? _rawColumn_maxWidth : defaultMaxWidth,\n                    sortable: (_rawColumn_sortable = rawColumn.sortable) !== null && _rawColumn_sortable !== void 0 ? _rawColumn_sortable : defaultSortable,\n                    resizable: (_rawColumn_resizable = rawColumn.resizable) !== null && _rawColumn_resizable !== void 0 ? _rawColumn_resizable : defaultResizable,\n                    draggable: (_rawColumn_draggable = rawColumn.draggable) !== null && _rawColumn_draggable !== void 0 ? _rawColumn_draggable : defaultDraggable,\n                    renderCell: (_rawColumn_renderCell = rawColumn.renderCell) !== null && _rawColumn_renderCell !== void 0 ? _rawColumn_renderCell : defaultCellRenderer\n                };\n                columns.push(column);\n                if (frozen) {\n                    lastFrozenColumnIndex++;\n                }\n                if (level > headerRowsCount) {\n                    headerRowsCount = level;\n                }\n            }\n        }\n        columns.sort((param, param1)=>{\n            let { key: aKey, frozen: frozenA } = param, { key: bKey, frozen: frozenB } = param1;\n            if (aKey === SELECT_COLUMN_KEY) return -1;\n            if (bKey === SELECT_COLUMN_KEY) return 1;\n            if (frozenA) {\n                if (frozenB) return 0;\n                return -1;\n            }\n            if (frozenB) return 1;\n            return 0;\n        });\n        const colSpanColumns = [];\n        columns.forEach((column, idx)=>{\n            column.idx = idx;\n            updateColumnParent(column, idx, 0);\n            if (column.colSpan != null) {\n                colSpanColumns.push(column);\n            }\n        });\n        return {\n            columns,\n            colSpanColumns,\n            lastFrozenColumnIndex,\n            headerRowsCount\n        };\n    }, [\n        rawColumns,\n        defaultWidth,\n        defaultMinWidth,\n        defaultMaxWidth,\n        defaultCellRenderer,\n        defaultResizable,\n        defaultSortable,\n        defaultDraggable\n    ]);\n    const { templateColumns, layoutCssVars, totalFrozenColumnWidth, columnMetrics } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>{\n        const columnMetrics = new Map();\n        let left = 0;\n        let totalFrozenColumnWidth = 0;\n        const templateColumns = [];\n        for (const column of columns){\n            let width = getColumnWidth(column);\n            if (typeof width === \"number\") {\n                width = clampColumnWidth(width, column);\n            } else {\n                width = column.minWidth;\n            }\n            templateColumns.push(\"\".concat(width, \"px\"));\n            columnMetrics.set(column, {\n                width,\n                left\n            });\n            left += width;\n        }\n        if (lastFrozenColumnIndex !== -1) {\n            const columnMetric = columnMetrics.get(columns[lastFrozenColumnIndex]);\n            totalFrozenColumnWidth = columnMetric.left + columnMetric.width;\n        }\n        const layoutCssVars = {};\n        for(let i = 0; i <= lastFrozenColumnIndex; i++){\n            const column = columns[i];\n            layoutCssVars[\"--rdg-frozen-left-\".concat(column.idx)] = \"\".concat(columnMetrics.get(column).left, \"px\");\n        }\n        return {\n            templateColumns,\n            layoutCssVars,\n            totalFrozenColumnWidth,\n            columnMetrics\n        };\n    }, [\n        getColumnWidth,\n        columns,\n        lastFrozenColumnIndex\n    ]);\n    const [colOverscanStartIdx, colOverscanEndIdx] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>{\n        if (!enableVirtualization) {\n            return [\n                0,\n                columns.length - 1\n            ];\n        }\n        const viewportLeft = scrollLeft + totalFrozenColumnWidth;\n        const viewportRight = scrollLeft + viewportWidth;\n        const lastColIdx = columns.length - 1;\n        const firstUnfrozenColumnIdx = min(lastFrozenColumnIndex + 1, lastColIdx);\n        if (viewportLeft >= viewportRight) {\n            return [\n                firstUnfrozenColumnIdx,\n                firstUnfrozenColumnIdx\n            ];\n        }\n        let colVisibleStartIdx = firstUnfrozenColumnIdx;\n        while(colVisibleStartIdx < lastColIdx){\n            const { left, width } = columnMetrics.get(columns[colVisibleStartIdx]);\n            if (left + width > viewportLeft) {\n                break;\n            }\n            colVisibleStartIdx++;\n        }\n        let colVisibleEndIdx = colVisibleStartIdx;\n        while(colVisibleEndIdx < lastColIdx){\n            const { left, width } = columnMetrics.get(columns[colVisibleEndIdx]);\n            if (left + width >= viewportRight) {\n                break;\n            }\n            colVisibleEndIdx++;\n        }\n        const colOverscanStartIdx = max(firstUnfrozenColumnIdx, colVisibleStartIdx - 1);\n        const colOverscanEndIdx = min(lastColIdx, colVisibleEndIdx + 1);\n        return [\n            colOverscanStartIdx,\n            colOverscanEndIdx\n        ];\n    }, [\n        columnMetrics,\n        columns,\n        lastFrozenColumnIndex,\n        scrollLeft,\n        totalFrozenColumnWidth,\n        viewportWidth,\n        enableVirtualization\n    ]);\n    return {\n        columns,\n        colSpanColumns,\n        colOverscanStartIdx,\n        colOverscanEndIdx,\n        templateColumns,\n        layoutCssVars,\n        headerRowsCount,\n        lastFrozenColumnIndex,\n        totalFrozenColumnWidth\n    };\n}\n_s6(useCalculatedColumns, \"ygPLZeuHtbeScPJd1kAlCpYpiSU=\");\nfunction updateColumnParent(column, index, level) {\n    if (level < column.level) {\n        column.level = level;\n    }\n    if (column.parent !== undefined) {\n        const { parent } = column;\n        if (parent.idx === -1) {\n            parent.idx = index;\n        }\n        parent.colSpan += 1;\n        updateColumnParent(parent, index, level - 1);\n    }\n}\nconst useLayoutEffect =  false ? 0 : react__WEBPACK_IMPORTED_MODULE_0__.useLayoutEffect;\nfunction useColumnWidths(columns, viewportColumns, templateColumns, gridRef, gridWidth, resizedColumnWidths, measuredColumnWidths, setResizedColumnWidths, setMeasuredColumnWidths, onColumnResize) {\n    _s7();\n    const prevGridWidthRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(gridWidth);\n    const columnsCanFlex = columns.length === viewportColumns.length;\n    const ignorePreviouslyMeasuredColumns = columnsCanFlex && gridWidth !== prevGridWidthRef.current;\n    const newTemplateColumns = [\n        ...templateColumns\n    ];\n    const columnsToMeasure = [];\n    for (const { key, idx, width } of viewportColumns){\n        if (typeof width === \"string\" && (ignorePreviouslyMeasuredColumns || !measuredColumnWidths.has(key)) && !resizedColumnWidths.has(key)) {\n            newTemplateColumns[idx] = width;\n            columnsToMeasure.push(key);\n        }\n    }\n    const gridTemplateColumns = newTemplateColumns.join(\" \");\n    useLayoutEffect(()=>{\n        prevGridWidthRef.current = gridWidth;\n        updateMeasuredWidths(columnsToMeasure);\n    });\n    function updateMeasuredWidths(columnsToMeasure) {\n        if (columnsToMeasure.length === 0) return;\n        setMeasuredColumnWidths((measuredColumnWidths)=>{\n            const newMeasuredColumnWidths = new Map(measuredColumnWidths);\n            let hasChanges = false;\n            for (const key of columnsToMeasure){\n                const measuredWidth = measureColumnWidth(gridRef, key);\n                hasChanges || (hasChanges = measuredWidth !== measuredColumnWidths.get(key));\n                if (measuredWidth === undefined) {\n                    newMeasuredColumnWidths.delete(key);\n                } else {\n                    newMeasuredColumnWidths.set(key, measuredWidth);\n                }\n            }\n            return hasChanges ? newMeasuredColumnWidths : measuredColumnWidths;\n        });\n    }\n    function handleColumnResize(column, nextWidth) {\n        const { key: resizingKey } = column;\n        const newTemplateColumns = [\n            ...templateColumns\n        ];\n        const columnsToMeasure = [];\n        for (const { key, idx, width } of viewportColumns){\n            if (resizingKey === key) {\n                const width = typeof nextWidth === \"number\" ? \"\".concat(nextWidth, \"px\") : nextWidth;\n                newTemplateColumns[idx] = width;\n            } else if (columnsCanFlex && typeof width === \"string\" && !resizedColumnWidths.has(key)) {\n                newTemplateColumns[idx] = width;\n                columnsToMeasure.push(key);\n            }\n        }\n        gridRef.current.style.gridTemplateColumns = newTemplateColumns.join(\" \");\n        const measuredWidth = typeof nextWidth === \"number\" ? nextWidth : measureColumnWidth(gridRef, resizingKey);\n        (0,react_dom__WEBPACK_IMPORTED_MODULE_1__.flushSync)(()=>{\n            setResizedColumnWidths((resizedColumnWidths)=>{\n                const newResizedColumnWidths = new Map(resizedColumnWidths);\n                newResizedColumnWidths.set(resizingKey, measuredWidth);\n                return newResizedColumnWidths;\n            });\n            updateMeasuredWidths(columnsToMeasure);\n        });\n        onColumnResize === null || onColumnResize === void 0 ? void 0 : onColumnResize(column.idx, measuredWidth);\n    }\n    return {\n        gridTemplateColumns,\n        handleColumnResize\n    };\n}\n_s7(useColumnWidths, \"gUMcABS2lEQHvFqOOPlisHbgXxI=\");\nfunction measureColumnWidth(gridRef, key) {\n    var _gridRef_current;\n    const selector = '[data-measuring-cell-key=\"'.concat(CSS.escape(key), '\"]');\n    const measuringCell = (_gridRef_current = gridRef.current) === null || _gridRef_current === void 0 ? void 0 : _gridRef_current.querySelector(selector);\n    return measuringCell === null || measuringCell === void 0 ? void 0 : measuringCell.getBoundingClientRect().width;\n}\nfunction useGridDimensions() {\n    _s8();\n    const gridRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    const [inlineSize, setInlineSize] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(1);\n    const [blockSize, setBlockSize] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(1);\n    const [horizontalScrollbarHeight, setHorizontalScrollbarHeight] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(0);\n    useLayoutEffect(()=>{\n        const { ResizeObserver } = window;\n        if (ResizeObserver == null) return;\n        const { clientWidth, clientHeight, offsetWidth, offsetHeight } = gridRef.current;\n        const { width, height } = gridRef.current.getBoundingClientRect();\n        const initialHorizontalScrollbarHeight = offsetHeight - clientHeight;\n        const initialWidth = width - offsetWidth + clientWidth;\n        const initialHeight = height - initialHorizontalScrollbarHeight;\n        setInlineSize(initialWidth);\n        setBlockSize(initialHeight);\n        setHorizontalScrollbarHeight(initialHorizontalScrollbarHeight);\n        const resizeObserver = new ResizeObserver((entries)=>{\n            const size = entries[0].contentBoxSize[0];\n            const { clientHeight, offsetHeight } = gridRef.current;\n            (0,react_dom__WEBPACK_IMPORTED_MODULE_1__.flushSync)(()=>{\n                setInlineSize(size.inlineSize);\n                setBlockSize(size.blockSize);\n                setHorizontalScrollbarHeight(offsetHeight - clientHeight);\n            });\n        });\n        resizeObserver.observe(gridRef.current);\n        return ()=>{\n            resizeObserver.disconnect();\n        };\n    }, []);\n    return [\n        gridRef,\n        inlineSize,\n        blockSize,\n        horizontalScrollbarHeight\n    ];\n}\n_s8(useGridDimensions, \"+8x4gQ8p4rspMyXvDUC/d1/xApI=\");\nfunction useLatestFunc(fn) {\n    _s9();\n    const ref = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(fn);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        ref.current = fn;\n    });\n    const callbackFn = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(function() {\n        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n            args[_key] = arguments[_key];\n        }\n        ref.current(...args);\n    }, []);\n    return fn ? callbackFn : fn;\n}\n_s9(useLatestFunc, \"rxO4L95aXDxN9hGhw3hvuJn02rE=\");\nfunction useRovingTabIndex(isSelected) {\n    _s10();\n    const [isChildFocused, setIsChildFocused] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    if (isChildFocused && !isSelected) {\n        setIsChildFocused(false);\n    }\n    function onFocus(event) {\n        if (event.target !== event.currentTarget) {\n            setIsChildFocused(true);\n        }\n    }\n    const isFocusable = isSelected && !isChildFocused;\n    return {\n        tabIndex: isFocusable ? 0 : -1,\n        childTabIndex: isSelected ? 0 : -1,\n        onFocus: isSelected ? onFocus : undefined\n    };\n}\n_s10(useRovingTabIndex, \"BR7c3T7Bygfa08k6NaJzlxd+yKU=\");\nfunction useViewportColumns(param) {\n    let { columns, colSpanColumns, rows, topSummaryRows, bottomSummaryRows, colOverscanStartIdx, colOverscanEndIdx, lastFrozenColumnIndex, rowOverscanStartIdx, rowOverscanEndIdx } = param;\n    _s11();\n    const startIdx = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>{\n        if (colOverscanStartIdx === 0) return 0;\n        let startIdx = colOverscanStartIdx;\n        const updateStartIdx = (colIdx, colSpan)=>{\n            if (colSpan !== undefined && colIdx + colSpan > colOverscanStartIdx) {\n                startIdx = colIdx;\n                return true;\n            }\n            return false;\n        };\n        for (const column of colSpanColumns){\n            const colIdx = column.idx;\n            if (colIdx >= startIdx) break;\n            if (updateStartIdx(colIdx, getColSpan(column, lastFrozenColumnIndex, {\n                type: \"HEADER\"\n            }))) {\n                break;\n            }\n            for(let rowIdx = rowOverscanStartIdx; rowIdx <= rowOverscanEndIdx; rowIdx++){\n                const row = rows[rowIdx];\n                if (updateStartIdx(colIdx, getColSpan(column, lastFrozenColumnIndex, {\n                    type: \"ROW\",\n                    row\n                }))) {\n                    break;\n                }\n            }\n            if (topSummaryRows != null) {\n                for (const row of topSummaryRows){\n                    if (updateStartIdx(colIdx, getColSpan(column, lastFrozenColumnIndex, {\n                        type: \"SUMMARY\",\n                        row\n                    }))) {\n                        break;\n                    }\n                }\n            }\n            if (bottomSummaryRows != null) {\n                for (const row of bottomSummaryRows){\n                    if (updateStartIdx(colIdx, getColSpan(column, lastFrozenColumnIndex, {\n                        type: \"SUMMARY\",\n                        row\n                    }))) {\n                        break;\n                    }\n                }\n            }\n        }\n        return startIdx;\n    }, [\n        rowOverscanStartIdx,\n        rowOverscanEndIdx,\n        rows,\n        topSummaryRows,\n        bottomSummaryRows,\n        colOverscanStartIdx,\n        lastFrozenColumnIndex,\n        colSpanColumns\n    ]);\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>{\n        const viewportColumns = [];\n        for(let colIdx = 0; colIdx <= colOverscanEndIdx; colIdx++){\n            const column = columns[colIdx];\n            if (colIdx < startIdx && !column.frozen) continue;\n            viewportColumns.push(column);\n        }\n        return viewportColumns;\n    }, [\n        startIdx,\n        colOverscanEndIdx,\n        columns\n    ]);\n}\n_s11(useViewportColumns, \"S7a5BAsXWjdmUyumXGHlWyhhSUo=\");\nfunction useViewportRows(param) {\n    let { rows, rowHeight, clientHeight, scrollTop, enableVirtualization } = param;\n    _s12();\n    const { totalRowHeight, gridTemplateRows, getRowTop, getRowHeight, findRowIdx } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>{\n        if (typeof rowHeight === \"number\") {\n            return {\n                totalRowHeight: rowHeight * rows.length,\n                gridTemplateRows: \" repeat(\".concat(rows.length, \", \").concat(rowHeight, \"px)\"),\n                getRowTop: (rowIdx)=>rowIdx * rowHeight,\n                getRowHeight: ()=>rowHeight,\n                findRowIdx: (offset)=>floor(offset / rowHeight)\n            };\n        }\n        let totalRowHeight = 0;\n        let gridTemplateRows = \" \";\n        const rowPositions = rows.map((row)=>{\n            const currentRowHeight = rowHeight(row);\n            const position = {\n                top: totalRowHeight,\n                height: currentRowHeight\n            };\n            gridTemplateRows += \"\".concat(currentRowHeight, \"px \");\n            totalRowHeight += currentRowHeight;\n            return position;\n        });\n        const validateRowIdx = (rowIdx)=>{\n            return max(0, min(rows.length - 1, rowIdx));\n        };\n        return {\n            totalRowHeight,\n            gridTemplateRows,\n            getRowTop: (rowIdx)=>rowPositions[validateRowIdx(rowIdx)].top,\n            getRowHeight: (rowIdx)=>rowPositions[validateRowIdx(rowIdx)].height,\n            findRowIdx (offset) {\n                let start = 0;\n                let end = rowPositions.length - 1;\n                while(start <= end){\n                    const middle = start + floor((end - start) / 2);\n                    const currentOffset = rowPositions[middle].top;\n                    if (currentOffset === offset) return middle;\n                    if (currentOffset < offset) {\n                        start = middle + 1;\n                    } else if (currentOffset > offset) {\n                        end = middle - 1;\n                    }\n                    if (start > end) return end;\n                }\n                return 0;\n            }\n        };\n    }, [\n        rowHeight,\n        rows\n    ]);\n    let rowOverscanStartIdx = 0;\n    let rowOverscanEndIdx = rows.length - 1;\n    if (enableVirtualization) {\n        const overscanThreshold = 4;\n        const rowVisibleStartIdx = findRowIdx(scrollTop);\n        const rowVisibleEndIdx = findRowIdx(scrollTop + clientHeight);\n        rowOverscanStartIdx = max(0, rowVisibleStartIdx - overscanThreshold);\n        rowOverscanEndIdx = min(rows.length - 1, rowVisibleEndIdx + overscanThreshold);\n    }\n    return {\n        rowOverscanStartIdx,\n        rowOverscanEndIdx,\n        totalRowHeight,\n        gridTemplateRows,\n        getRowTop,\n        getRowHeight,\n        findRowIdx\n    };\n}\n_s12(useViewportRows, \"KjOuaX+3pYy8RpaOlI0viFP3teQ=\");\nconst cellDragHandle = \"c1w9bbhr7-0-0-beta-46\";\nconst cellDragHandleFrozenClassname = \"c1creorc7-0-0-beta-46\";\nconst cellDragHandleClassname = \"rdg-cell-drag-handle \".concat(cellDragHandle);\nfunction DragHandle(param) {\n    let { gridRowStart, rows, column, columnWidth, maxColIdx, isLastRow, selectedPosition, latestDraggedOverRowIdx, isCellEditable, onRowsChange, onFill, onClick, setDragging, setDraggedOverRowIdx } = param;\n    const { idx, rowIdx } = selectedPosition;\n    function handleMouseDown(event) {\n        event.preventDefault();\n        if (event.buttons !== 1) return;\n        setDragging(true);\n        window.addEventListener(\"mouseover\", onMouseOver);\n        window.addEventListener(\"mouseup\", onMouseUp);\n        function onMouseOver(event) {\n            if (event.buttons !== 1) onMouseUp();\n        }\n        function onMouseUp() {\n            window.removeEventListener(\"mouseover\", onMouseOver);\n            window.removeEventListener(\"mouseup\", onMouseUp);\n            setDragging(false);\n            handleDragEnd();\n        }\n    }\n    function handleDragEnd() {\n        const overRowIdx = latestDraggedOverRowIdx.current;\n        if (overRowIdx === undefined) return;\n        const startRowIndex = rowIdx < overRowIdx ? rowIdx + 1 : overRowIdx;\n        const endRowIndex = rowIdx < overRowIdx ? overRowIdx + 1 : rowIdx;\n        updateRows(startRowIndex, endRowIndex);\n        setDraggedOverRowIdx(undefined);\n    }\n    function handleDoubleClick(event) {\n        event.stopPropagation();\n        updateRows(rowIdx + 1, rows.length);\n    }\n    function updateRows(startRowIdx, endRowIdx) {\n        const sourceRow = rows[rowIdx];\n        const updatedRows = [\n            ...rows\n        ];\n        const indexes = [];\n        for(let i = startRowIdx; i < endRowIdx; i++){\n            if (isCellEditable({\n                rowIdx: i,\n                idx\n            })) {\n                const updatedRow = onFill({\n                    columnKey: column.key,\n                    sourceRow,\n                    targetRow: rows[i]\n                });\n                if (updatedRow !== rows[i]) {\n                    updatedRows[i] = updatedRow;\n                    indexes.push(i);\n                }\n            }\n        }\n        if (indexes.length > 0) {\n            onRowsChange === null || onRowsChange === void 0 ? void 0 : onRowsChange(updatedRows, {\n                indexes,\n                column\n            });\n        }\n    }\n    function getStyle() {\n        var _column_colSpan;\n        var _column_colSpan1;\n        const colSpan = (_column_colSpan1 = (_column_colSpan = column.colSpan) === null || _column_colSpan === void 0 ? void 0 : _column_colSpan.call(column, {\n            type: \"ROW\",\n            row: rows[rowIdx]\n        })) !== null && _column_colSpan1 !== void 0 ? _column_colSpan1 : 1;\n        const { insetInlineStart, ...style } = getCellStyle(column, colSpan);\n        const marginEnd = \"calc(var(--rdg-drag-handle-size) * -0.5 + 1px)\";\n        const isLastColumn = column.idx + colSpan - 1 === maxColIdx;\n        return {\n            ...style,\n            gridRowStart,\n            marginInlineEnd: isLastColumn ? undefined : marginEnd,\n            marginBlockEnd: isLastRow ? undefined : marginEnd,\n            insetInlineStart: insetInlineStart ? \"calc(\".concat(insetInlineStart, \" + \").concat(columnWidth, \"px + var(--rdg-drag-handle-size) * -0.5 - 1px)\") : undefined\n        };\n    }\n    return /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(\"div\", {\n        style: getStyle(),\n        className: (0,clsx__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(cellDragHandleClassname, column.frozen && cellDragHandleFrozenClassname),\n        onClick: onClick,\n        onMouseDown: handleMouseDown,\n        onDoubleClick: handleDoubleClick\n    });\n}\n_c5 = DragHandle;\nconst cellEditing = \"cis5rrm7-0-0-beta-46\";\nfunction EditCell(param) {\n    let { column, colSpan, row, rowIdx, onRowChange, closeEditor, onKeyDown, navigate } = param;\n    var _column_editorOptions, _column_editorOptions1, _column_editorOptions2;\n    _s13();\n    const frameRequestRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(undefined);\n    const commitOnOutsideClick = ((_column_editorOptions = column.editorOptions) === null || _column_editorOptions === void 0 ? void 0 : _column_editorOptions.commitOnOutsideClick) !== false;\n    const commitOnOutsideMouseDown = useLatestFunc(()=>{\n        onClose(true, false);\n    });\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        if (!commitOnOutsideClick) return;\n        function onWindowCaptureMouseDown() {\n            frameRequestRef.current = requestAnimationFrame(commitOnOutsideMouseDown);\n        }\n        addEventListener(\"mousedown\", onWindowCaptureMouseDown, {\n            capture: true\n        });\n        return ()=>{\n            removeEventListener(\"mousedown\", onWindowCaptureMouseDown, {\n                capture: true\n            });\n            cancelFrameRequest();\n        };\n    }, [\n        commitOnOutsideClick,\n        commitOnOutsideMouseDown\n    ]);\n    function cancelFrameRequest() {\n        cancelAnimationFrame(frameRequestRef.current);\n    }\n    function handleKeyDown(event) {\n        if (onKeyDown) {\n            const cellEvent = createCellEvent(event);\n            onKeyDown({\n                mode: \"EDIT\",\n                row,\n                column,\n                rowIdx,\n                navigate () {\n                    navigate(event);\n                },\n                onClose\n            }, cellEvent);\n            if (cellEvent.isGridDefaultPrevented()) return;\n        }\n        if (event.key === \"Escape\") {\n            onClose();\n        } else if (event.key === \"Enter\") {\n            onClose(true);\n        } else if (onEditorNavigation(event)) {\n            navigate(event);\n        }\n    }\n    function onClose() {\n        let commitChanges = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : false, shouldFocusCell = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;\n        if (commitChanges) {\n            onRowChange(row, true, shouldFocusCell);\n        } else {\n            closeEditor(shouldFocusCell);\n        }\n    }\n    function onEditorRowChange(row) {\n        let commitChangesAndFocus = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;\n        onRowChange(row, commitChangesAndFocus, commitChangesAndFocus);\n    }\n    const { cellClass } = column;\n    const className = getCellClassname(column, \"rdg-editor-container\", typeof cellClass === \"function\" ? cellClass(row) : cellClass, !((_column_editorOptions1 = column.editorOptions) === null || _column_editorOptions1 === void 0 ? void 0 : _column_editorOptions1.displayCellContent) && cellEditing);\n    return /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(\"div\", {\n        role: \"gridcell\",\n        \"aria-colindex\": column.idx + 1,\n        \"aria-colspan\": colSpan,\n        \"aria-selected\": true,\n        className: className,\n        style: getCellStyle(column, colSpan),\n        onKeyDown: handleKeyDown,\n        onMouseDownCapture: cancelFrameRequest,\n        children: column.renderEditCell != null && /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.Fragment, {\n            children: [\n                column.renderEditCell({\n                    column,\n                    row,\n                    rowIdx,\n                    onRowChange: onEditorRowChange,\n                    onClose\n                }),\n                ((_column_editorOptions2 = column.editorOptions) === null || _column_editorOptions2 === void 0 ? void 0 : _column_editorOptions2.displayCellContent) && column.renderCell({\n                    column,\n                    row,\n                    rowIdx,\n                    isCellEditable: true,\n                    tabIndex: -1,\n                    onRowChange: onEditorRowChange\n                })\n            ]\n        })\n    });\n}\n_s13(EditCell, \"+QAwg0lkm4ZIIR6smN4Vh/v8K9s=\", false, function() {\n    return [\n        useLatestFunc\n    ];\n});\n_c6 = EditCell;\nfunction GroupedColumnHeaderCell(param) {\n    let { column, rowIdx, isCellSelected, selectCell } = param;\n    _s14();\n    const { tabIndex, onFocus } = useRovingTabIndex(isCellSelected);\n    const { colSpan } = column;\n    const rowSpan = getHeaderCellRowSpan(column, rowIdx);\n    const index = column.idx + 1;\n    function onClick() {\n        selectCell({\n            idx: column.idx,\n            rowIdx\n        });\n    }\n    return /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(\"div\", {\n        role: \"columnheader\",\n        \"aria-colindex\": index,\n        \"aria-colspan\": colSpan,\n        \"aria-rowspan\": rowSpan,\n        \"aria-selected\": isCellSelected,\n        tabIndex: tabIndex,\n        className: (0,clsx__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(cellClassname, column.headerCellClass),\n        style: {\n            ...getHeaderCellStyle(column, rowIdx, rowSpan),\n            gridColumnStart: index,\n            gridColumnEnd: index + colSpan\n        },\n        onFocus: onFocus,\n        onClick: onClick,\n        children: column.name\n    });\n}\n_s14(GroupedColumnHeaderCell, \"BDUIpzU7Bw3Jw6L8bt9JxpEenUk=\", false, function() {\n    return [\n        useRovingTabIndex\n    ];\n});\n_c7 = GroupedColumnHeaderCell;\nconst headerSortCellClassname = \"h44jtk67-0-0-beta-46\";\nconst headerSortName = \"hcgkhxz7-0-0-beta-46\";\nconst headerSortNameClassname = \"rdg-header-sort-name \".concat(headerSortName);\nfunction renderHeaderCell(param) {\n    let { column, sortDirection, priority } = param;\n    if (!column.sortable) return column.name;\n    return /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(SortableHeaderCell, {\n        sortDirection: sortDirection,\n        priority: priority,\n        children: column.name\n    });\n}\nfunction SortableHeaderCell(param) {\n    let { sortDirection, priority, children } = param;\n    _s15();\n    const renderSortStatus = useDefaultRenderers().renderSortStatus;\n    return /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsxs)(\"span\", {\n        className: headerSortCellClassname,\n        children: [\n            /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(\"span\", {\n                className: headerSortNameClassname,\n                children: children\n            }),\n            /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(\"span\", {\n                children: renderSortStatus({\n                    sortDirection,\n                    priority\n                })\n            })\n        ]\n    });\n}\n_s15(SortableHeaderCell, \"a14rNTCCLYsN2sBpDkNzRee2VAA=\", false, function() {\n    return [\n        useDefaultRenderers\n    ];\n});\n_c8 = SortableHeaderCell;\nconst cellSortableClassname = \"c6l2wv17-0-0-beta-46\";\nconst cellResizable = \"c1kqdw7y7-0-0-beta-46\";\nconst cellResizableClassname = \"rdg-cell-resizable \".concat(cellResizable);\nconst resizeHandleClassname = \"r1y6ywlx7-0-0-beta-46\";\nconst cellDraggableClassname = \"rdg-cell-draggable\";\nconst cellDragging = \"c1bezg5o7-0-0-beta-46\";\nconst cellDraggingClassname = \"rdg-cell-dragging \".concat(cellDragging);\nconst cellOver = \"c1vc96037-0-0-beta-46\";\nconst cellOverClassname = \"rdg-cell-drag-over \".concat(cellOver);\nfunction HeaderCell(param) {\n    let { column, colSpan, rowIdx, isCellSelected, onColumnResize, onColumnsReorder, sortColumns, onSortColumnsChange, selectCell, shouldFocusGrid, direction, dragDropKey } = param;\n    _s16();\n    const [isDragging, setIsDragging] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    const [isOver, setIsOver] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    const isRtl = direction === \"rtl\";\n    const rowSpan = getHeaderCellRowSpan(column, rowIdx);\n    const { tabIndex, childTabIndex, onFocus } = useRovingTabIndex(isCellSelected);\n    const sortIndex = sortColumns === null || sortColumns === void 0 ? void 0 : sortColumns.findIndex((sort)=>sort.columnKey === column.key);\n    const sortColumn = sortIndex !== undefined && sortIndex > -1 ? sortColumns[sortIndex] : undefined;\n    const sortDirection = sortColumn === null || sortColumn === void 0 ? void 0 : sortColumn.direction;\n    const priority = sortColumn !== undefined && sortColumns.length > 1 ? sortIndex + 1 : undefined;\n    const ariaSort = sortDirection && !priority ? sortDirection === \"ASC\" ? \"ascending\" : \"descending\" : undefined;\n    const { sortable, resizable, draggable } = column;\n    const className = getCellClassname(column, column.headerCellClass, sortable && cellSortableClassname, resizable && cellResizableClassname, draggable && cellDraggableClassname, isDragging && cellDraggingClassname, isOver && cellOverClassname);\n    var _column_renderHeaderCell;\n    const renderHeaderCell$1 = (_column_renderHeaderCell = column.renderHeaderCell) !== null && _column_renderHeaderCell !== void 0 ? _column_renderHeaderCell : renderHeaderCell;\n    function onPointerDown(event) {\n        if (event.pointerType === \"mouse\" && event.buttons !== 1) {\n            return;\n        }\n        event.preventDefault();\n        const { currentTarget, pointerId } = event;\n        const headerCell = currentTarget.parentElement;\n        const { right, left } = headerCell.getBoundingClientRect();\n        const offset = isRtl ? event.clientX - left : right - event.clientX;\n        function onPointerMove(event) {\n            const { right, left } = headerCell.getBoundingClientRect();\n            const width = isRtl ? right + offset - event.clientX : event.clientX + offset - left;\n            if (width > 0) {\n                onColumnResize(column, clampColumnWidth(width, column));\n            }\n        }\n        function onLostPointerCapture() {\n            currentTarget.removeEventListener(\"pointermove\", onPointerMove);\n            currentTarget.removeEventListener(\"lostpointercapture\", onLostPointerCapture);\n        }\n        currentTarget.setPointerCapture(pointerId);\n        currentTarget.addEventListener(\"pointermove\", onPointerMove);\n        currentTarget.addEventListener(\"lostpointercapture\", onLostPointerCapture);\n    }\n    function onSort(ctrlClick) {\n        if (onSortColumnsChange == null) return;\n        const { sortDescendingFirst } = column;\n        if (sortColumn === undefined) {\n            const nextSort = {\n                columnKey: column.key,\n                direction: sortDescendingFirst ? \"DESC\" : \"ASC\"\n            };\n            onSortColumnsChange(sortColumns && ctrlClick ? [\n                ...sortColumns,\n                nextSort\n            ] : [\n                nextSort\n            ]);\n        } else {\n            let nextSortColumn;\n            if (sortDescendingFirst === true && sortDirection === \"DESC\" || sortDescendingFirst !== true && sortDirection === \"ASC\") {\n                nextSortColumn = {\n                    columnKey: column.key,\n                    direction: sortDirection === \"ASC\" ? \"DESC\" : \"ASC\"\n                };\n            }\n            if (ctrlClick) {\n                const nextSortColumns = [\n                    ...sortColumns\n                ];\n                if (nextSortColumn) {\n                    nextSortColumns[sortIndex] = nextSortColumn;\n                } else {\n                    nextSortColumns.splice(sortIndex, 1);\n                }\n                onSortColumnsChange(nextSortColumns);\n            } else {\n                onSortColumnsChange(nextSortColumn ? [\n                    nextSortColumn\n                ] : []);\n            }\n        }\n    }\n    function onClick(event) {\n        selectCell({\n            idx: column.idx,\n            rowIdx\n        });\n        if (sortable) {\n            onSort(event.ctrlKey || event.metaKey);\n        }\n    }\n    function onDoubleClick() {\n        onColumnResize(column, \"max-content\");\n    }\n    function handleFocus(event) {\n        onFocus === null || onFocus === void 0 ? void 0 : onFocus(event);\n        if (shouldFocusGrid) {\n            selectCell({\n                idx: 0,\n                rowIdx\n            });\n        }\n    }\n    function onKeyDown(event) {\n        if (event.key === \" \" || event.key === \"Enter\") {\n            event.preventDefault();\n            onSort(event.ctrlKey || event.metaKey);\n        }\n    }\n    function onDragStart(event) {\n        event.dataTransfer.setData(dragDropKey, column.key);\n        event.dataTransfer.dropEffect = \"move\";\n        setIsDragging(true);\n    }\n    function onDragEnd() {\n        setIsDragging(false);\n    }\n    function onDragOver(event) {\n        event.preventDefault();\n        event.dataTransfer.dropEffect = \"move\";\n    }\n    function onDrop(event) {\n        setIsOver(false);\n        if (event.dataTransfer.types.includes(dragDropKey)) {\n            const sourceKey = event.dataTransfer.getData(dragDropKey);\n            if (sourceKey !== column.key) {\n                event.preventDefault();\n                onColumnsReorder === null || onColumnsReorder === void 0 ? void 0 : onColumnsReorder(sourceKey, column.key);\n            }\n        }\n    }\n    function onDragEnter(event) {\n        if (isEventPertinent(event)) {\n            setIsOver(true);\n        }\n    }\n    function onDragLeave(event) {\n        if (isEventPertinent(event)) {\n            setIsOver(false);\n        }\n    }\n    let draggableProps;\n    if (draggable) {\n        draggableProps = {\n            draggable: true,\n            onDragStart,\n            onDragEnd,\n            onDragOver,\n            onDragEnter,\n            onDragLeave,\n            onDrop\n        };\n    }\n    return /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsxs)(\"div\", {\n        role: \"columnheader\",\n        \"aria-colindex\": column.idx + 1,\n        \"aria-colspan\": colSpan,\n        \"aria-rowspan\": rowSpan,\n        \"aria-selected\": isCellSelected,\n        \"aria-sort\": ariaSort,\n        tabIndex: shouldFocusGrid ? 0 : tabIndex,\n        className: className,\n        style: {\n            ...getHeaderCellStyle(column, rowIdx, rowSpan),\n            ...getCellStyle(column, colSpan)\n        },\n        onFocus: handleFocus,\n        onClick: onClick,\n        onKeyDown: sortable ? onKeyDown : undefined,\n        ...draggableProps,\n        children: [\n            renderHeaderCell$1({\n                column,\n                sortDirection,\n                priority,\n                tabIndex: childTabIndex\n            }),\n            resizable && /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(\"div\", {\n                className: resizeHandleClassname,\n                onClick: stopPropagation,\n                onDoubleClick: onDoubleClick,\n                onPointerDown: onPointerDown\n            })\n        ]\n    });\n}\n_s16(HeaderCell, \"8Lg0yy8u/L0mSTyGcfGkUEWXRtA=\", false, function() {\n    return [\n        useRovingTabIndex\n    ];\n});\n_c9 = HeaderCell;\nfunction isEventPertinent(event) {\n    const relatedTarget = event.relatedTarget;\n    return !event.currentTarget.contains(relatedTarget);\n}\nconst row = \"r1upfr807-0-0-beta-46\";\nconst rowClassname = \"rdg-row \".concat(row);\nconst rowSelected = \"r190mhd37-0-0-beta-46\";\nconst rowSelectedClassname = \"rdg-row-selected\";\nconst rowSelectedWithFrozenCell = \"r139qu9m7-0-0-beta-46\";\nconst topSummaryRowClassname = \"rdg-top-summary-row\";\nconst bottomSummaryRowClassname = \"rdg-bottom-summary-row\";\nconst headerRow = \"h10tskcx7-0-0-beta-46\";\nconst headerRowClassname = \"rdg-header-row \".concat(headerRow);\nfunction HeaderRow(param) {\n    let { rowIdx, columns, onColumnResize, onColumnsReorder, sortColumns, onSortColumnsChange, lastFrozenColumnIndex, selectedCellIdx, selectCell, shouldFocusGrid, direction } = param;\n    _s17();\n    const dragDropKey = (0,react__WEBPACK_IMPORTED_MODULE_0__.useId)();\n    const cells = [];\n    for(let index = 0; index < columns.length; index++){\n        const column = columns[index];\n        const colSpan = getColSpan(column, lastFrozenColumnIndex, {\n            type: \"HEADER\"\n        });\n        if (colSpan !== undefined) {\n            index += colSpan - 1;\n        }\n        cells.push(/*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(HeaderCell, {\n            column: column,\n            colSpan: colSpan,\n            rowIdx: rowIdx,\n            isCellSelected: selectedCellIdx === column.idx,\n            onColumnResize: onColumnResize,\n            onColumnsReorder: onColumnsReorder,\n            onSortColumnsChange: onSortColumnsChange,\n            sortColumns: sortColumns,\n            selectCell: selectCell,\n            shouldFocusGrid: shouldFocusGrid && index === 0,\n            direction: direction,\n            dragDropKey: dragDropKey\n        }, column.key));\n    }\n    return /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(\"div\", {\n        role: \"row\",\n        \"aria-rowindex\": rowIdx,\n        className: (0,clsx__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(headerRowClassname, selectedCellIdx === -1 && rowSelectedClassname),\n        children: cells\n    });\n}\n_s17(HeaderRow, \"EumhshiMZSJF+mMVQ2IMIYc/Pio=\", false, function() {\n    return [\n        react__WEBPACK_IMPORTED_MODULE_0__.useId\n    ];\n});\n_c10 = HeaderRow;\nconst HeaderRow$1 = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.memo)(HeaderRow);\n_c11 = HeaderRow$1;\nfunction GroupedColumnHeaderRow(param) {\n    let { rowIdx, level, columns, selectedCellIdx, selectCell } = param;\n    const cells = [];\n    const renderedParents = new Set();\n    for (const column of columns){\n        let { parent } = column;\n        if (parent === undefined) continue;\n        while(parent.level > level){\n            if (parent.parent === undefined) break;\n            parent = parent.parent;\n        }\n        if (parent.level === level && !renderedParents.has(parent)) {\n            renderedParents.add(parent);\n            const { idx } = parent;\n            cells.push(/*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(GroupedColumnHeaderCell, {\n                column: parent,\n                rowIdx: rowIdx,\n                isCellSelected: selectedCellIdx === idx,\n                selectCell: selectCell\n            }, idx));\n        }\n    }\n    return /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(\"div\", {\n        role: \"row\",\n        \"aria-rowindex\": rowIdx,\n        className: headerRowClassname,\n        children: cells\n    });\n}\n_c12 = GroupedColumnHeaderRow;\nconst GroupedColumnHeaderRow$1 = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.memo)(GroupedColumnHeaderRow);\n_c13 = GroupedColumnHeaderRow$1;\nconst cellCopied = \"c6ra8a37-0-0-beta-46\";\nconst cellCopiedClassname = \"rdg-cell-copied \".concat(cellCopied);\nconst cellDraggedOver = \"cq910m07-0-0-beta-46\";\nconst cellDraggedOverClassname = \"rdg-cell-dragged-over \".concat(cellDraggedOver);\nfunction Cell(param) {\n    let { column, colSpan, isCellSelected, isCopied, isDraggedOver, row, rowIdx, onClick, onDoubleClick, onContextMenu, onRowChange, selectCell, ...props } = param;\n    _s18();\n    const { tabIndex, childTabIndex, onFocus } = useRovingTabIndex(isCellSelected);\n    const { cellClass } = column;\n    const className = getCellClassname(column, typeof cellClass === \"function\" ? cellClass(row) : cellClass, isCopied && cellCopiedClassname, isDraggedOver && cellDraggedOverClassname);\n    const isEditable = isCellEditableUtil(column, row);\n    function selectCellWrapper(openEditor) {\n        selectCell({\n            rowIdx,\n            idx: column.idx\n        }, openEditor);\n    }\n    function handleClick(event) {\n        if (onClick) {\n            const cellEvent = createCellEvent(event);\n            onClick({\n                row,\n                column,\n                selectCell: selectCellWrapper\n            }, cellEvent);\n            if (cellEvent.isGridDefaultPrevented()) return;\n        }\n        selectCellWrapper();\n    }\n    function handleContextMenu(event) {\n        if (onContextMenu) {\n            const cellEvent = createCellEvent(event);\n            onContextMenu({\n                row,\n                column,\n                selectCell: selectCellWrapper\n            }, cellEvent);\n            if (cellEvent.isGridDefaultPrevented()) return;\n        }\n        selectCellWrapper();\n    }\n    function handleDoubleClick(event) {\n        if (onDoubleClick) {\n            const cellEvent = createCellEvent(event);\n            onDoubleClick({\n                row,\n                column,\n                selectCell: selectCellWrapper\n            }, cellEvent);\n            if (cellEvent.isGridDefaultPrevented()) return;\n        }\n        selectCellWrapper(true);\n    }\n    function handleRowChange(newRow) {\n        onRowChange(column, newRow);\n    }\n    return /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(\"div\", {\n        role: \"gridcell\",\n        \"aria-colindex\": column.idx + 1,\n        \"aria-colspan\": colSpan,\n        \"aria-selected\": isCellSelected,\n        \"aria-readonly\": !isEditable || undefined,\n        tabIndex: tabIndex,\n        className: className,\n        style: getCellStyle(column, colSpan),\n        onClick: handleClick,\n        onDoubleClick: handleDoubleClick,\n        onContextMenu: handleContextMenu,\n        onFocus: onFocus,\n        ...props,\n        children: column.renderCell({\n            column,\n            row,\n            rowIdx,\n            isCellEditable: isEditable,\n            tabIndex: childTabIndex,\n            onRowChange: handleRowChange\n        })\n    });\n}\n_s18(Cell, \"FOlDZ5V4DEZHV3x0jfMJ8HeV7i0=\", false, function() {\n    return [\n        useRovingTabIndex\n    ];\n});\n_c14 = Cell;\nconst Cell$1 = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.memo)(Cell);\n_c15 = Cell$1;\nfunction Row(param, ref) {\n    let { className, rowIdx, gridRowStart, selectedCellIdx, isRowSelected, copiedCellIdx, draggedOverCellIdx, lastFrozenColumnIndex, row, viewportColumns, selectedCellEditor, onCellClick, onCellDoubleClick, onCellContextMenu, rowClass, setDraggedOverRowIdx, onMouseEnter, onRowChange, selectCell, ...props } = param;\n    _s19();\n    const handleRowChange = useLatestFunc((column, newRow)=>{\n        onRowChange(column, rowIdx, newRow);\n    });\n    function handleDragEnter(event) {\n        setDraggedOverRowIdx === null || setDraggedOverRowIdx === void 0 ? void 0 : setDraggedOverRowIdx(rowIdx);\n        onMouseEnter === null || onMouseEnter === void 0 ? void 0 : onMouseEnter(event);\n    }\n    className = (0,clsx__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(rowClassname, \"rdg-row-\".concat(rowIdx % 2 === 0 ? \"even\" : \"odd\"), rowClass === null || rowClass === void 0 ? void 0 : rowClass(row, rowIdx), className, selectedCellIdx === -1 && rowSelectedClassname);\n    const cells = [];\n    for(let index = 0; index < viewportColumns.length; index++){\n        const column = viewportColumns[index];\n        const { idx } = column;\n        const colSpan = getColSpan(column, lastFrozenColumnIndex, {\n            type: \"ROW\",\n            row\n        });\n        if (colSpan !== undefined) {\n            index += colSpan - 1;\n        }\n        const isCellSelected = selectedCellIdx === idx;\n        if (isCellSelected && selectedCellEditor) {\n            cells.push(selectedCellEditor);\n        } else {\n            cells.push(/*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(Cell$1, {\n                column: column,\n                colSpan: colSpan,\n                row: row,\n                rowIdx: rowIdx,\n                isCopied: copiedCellIdx === idx,\n                isDraggedOver: draggedOverCellIdx === idx,\n                isCellSelected: isCellSelected,\n                onClick: onCellClick,\n                onDoubleClick: onCellDoubleClick,\n                onContextMenu: onCellContextMenu,\n                onRowChange: handleRowChange,\n                selectCell: selectCell\n            }, column.key));\n        }\n    }\n    return /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(RowSelectionProvider, {\n        value: isRowSelected,\n        children: /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(\"div\", {\n            role: \"row\",\n            ref: ref,\n            className: className,\n            onMouseEnter: handleDragEnter,\n            style: getRowStyle(gridRowStart),\n            ...props,\n            children: cells\n        })\n    });\n}\n_s19(Row, \"rbqJVGgVrLkvbE5YBy2IUhNqueM=\", false, function() {\n    return [\n        useLatestFunc\n    ];\n});\n_c16 = Row;\nconst RowComponent = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.memo)(/*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(Row));\n_c17 = RowComponent;\nconst RowComponent$1 = RowComponent;\nfunction defaultRenderRow(key, props) {\n    return /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(RowComponent, {\n        ...props\n    }, key);\n}\nfunction ScrollToCell(param) {\n    let { scrollToPosition: { idx, rowIdx }, gridElement, setScrollToCellPosition } = param;\n    _s20();\n    const ref = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    useLayoutEffect(()=>{\n        scrollIntoView(ref.current);\n    });\n    useLayoutEffect(()=>{\n        function removeScrollToCell() {\n            setScrollToCellPosition(null);\n        }\n        const observer = new IntersectionObserver(removeScrollToCell, {\n            root: gridElement,\n            threshold: 1.0\n        });\n        observer.observe(ref.current);\n        return ()=>{\n            observer.disconnect();\n        };\n    }, [\n        gridElement,\n        setScrollToCellPosition\n    ]);\n    return /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(\"div\", {\n        ref: ref,\n        style: {\n            gridColumn: idx === undefined ? \"1/-1\" : idx + 1,\n            gridRow: rowIdx === undefined ? \"1/-1\" : rowIdx + 2\n        }\n    });\n}\n_s20(ScrollToCell, \"+ypmq7+0U88RCNXgpCENqaHpRy0=\");\n_c18 = ScrollToCell;\nconst arrow = \"a3ejtar7-0-0-beta-46\";\nconst arrowClassname = \"rdg-sort-arrow \".concat(arrow);\nfunction renderSortStatus(param) {\n    let { sortDirection, priority } = param;\n    return /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.Fragment, {\n        children: [\n            renderSortIcon({\n                sortDirection\n            }),\n            renderSortPriority({\n                priority\n            })\n        ]\n    });\n}\nfunction renderSortIcon(param) {\n    let { sortDirection } = param;\n    if (sortDirection === undefined) return null;\n    return /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(\"svg\", {\n        viewBox: \"0 0 12 8\",\n        width: \"12\",\n        height: \"8\",\n        className: arrowClassname,\n        \"aria-hidden\": true,\n        children: /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(\"path\", {\n            d: sortDirection === \"ASC\" ? \"M0 8 6 0 12 8\" : \"M0 0 6 8 12 0\"\n        })\n    });\n}\nfunction renderSortPriority(param) {\n    let { priority } = param;\n    return priority;\n}\nconst root = \"rnvodz57-0-0-beta-46\";\nconst rootClassname = \"rdg \".concat(root);\nconst viewportDragging = \"vlqv91k7-0-0-beta-46\";\nconst viewportDraggingClassname = \"rdg-viewport-dragging \".concat(viewportDragging);\nconst focusSinkClassname = \"f1lsfrzw7-0-0-beta-46\";\nconst focusSinkHeaderAndSummaryClassname = \"f1cte0lg7-0-0-beta-46\";\nconst summaryCellClassname = \"s8wc6fl7-0-0-beta-46\";\nfunction SummaryCell(param) {\n    let { column, colSpan, row, rowIdx, isCellSelected, selectCell } = param;\n    var _column_renderSummaryCell;\n    _s21();\n    const { tabIndex, childTabIndex, onFocus } = useRovingTabIndex(isCellSelected);\n    const { summaryCellClass } = column;\n    const className = getCellClassname(column, summaryCellClassname, typeof summaryCellClass === \"function\" ? summaryCellClass(row) : summaryCellClass);\n    function onClick() {\n        selectCell({\n            rowIdx,\n            idx: column.idx\n        });\n    }\n    return /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(\"div\", {\n        role: \"gridcell\",\n        \"aria-colindex\": column.idx + 1,\n        \"aria-colspan\": colSpan,\n        \"aria-selected\": isCellSelected,\n        tabIndex: tabIndex,\n        className: className,\n        style: getCellStyle(column, colSpan),\n        onClick: onClick,\n        onFocus: onFocus,\n        children: (_column_renderSummaryCell = column.renderSummaryCell) === null || _column_renderSummaryCell === void 0 ? void 0 : _column_renderSummaryCell.call(column, {\n            column,\n            row,\n            tabIndex: childTabIndex\n        })\n    });\n}\n_s21(SummaryCell, \"FOlDZ5V4DEZHV3x0jfMJ8HeV7i0=\", false, function() {\n    return [\n        useRovingTabIndex\n    ];\n});\n_c19 = SummaryCell;\nconst SummaryCell$1 = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.memo)(SummaryCell);\n_c20 = SummaryCell$1;\nconst summaryRow = \"skuhp557-0-0-beta-46\";\nconst topSummaryRow = \"tf8l5ub7-0-0-beta-46\";\nconst summaryRowClassname = \"rdg-summary-row \".concat(summaryRow);\nfunction SummaryRow(param) {\n    let { rowIdx, gridRowStart, row, viewportColumns, top, bottom, lastFrozenColumnIndex, selectedCellIdx, isTop, selectCell, \"aria-rowindex\": ariaRowIndex } = param;\n    const cells = [];\n    for(let index = 0; index < viewportColumns.length; index++){\n        const column = viewportColumns[index];\n        const colSpan = getColSpan(column, lastFrozenColumnIndex, {\n            type: \"SUMMARY\",\n            row\n        });\n        if (colSpan !== undefined) {\n            index += colSpan - 1;\n        }\n        const isCellSelected = selectedCellIdx === column.idx;\n        cells.push(/*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(SummaryCell$1, {\n            column: column,\n            colSpan: colSpan,\n            row: row,\n            rowIdx: rowIdx,\n            isCellSelected: isCellSelected,\n            selectCell: selectCell\n        }, column.key));\n    }\n    return /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(\"div\", {\n        role: \"row\",\n        \"aria-rowindex\": ariaRowIndex,\n        className: (0,clsx__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(rowClassname, \"rdg-row-\".concat(rowIdx % 2 === 0 ? \"even\" : \"odd\"), summaryRowClassname, isTop ? \"\".concat(topSummaryRowClassname, \" \").concat(topSummaryRow) : bottomSummaryRowClassname, selectedCellIdx === -1 && rowSelectedClassname),\n        style: {\n            ...getRowStyle(gridRowStart),\n            \"--rdg-summary-row-top\": top !== undefined ? \"\".concat(top, \"px\") : undefined,\n            \"--rdg-summary-row-bottom\": bottom !== undefined ? \"\".concat(bottom, \"px\") : undefined\n        },\n        children: cells\n    });\n}\n_c21 = SummaryRow;\nconst SummaryRow$1 = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.memo)(SummaryRow);\n_c22 = SummaryRow$1;\nfunction DataGrid(props, ref) {\n    _s22();\n    const { columns: rawColumns, rows, topSummaryRows, bottomSummaryRows, rowKeyGetter, onRowsChange, rowHeight: rawRowHeight, headerRowHeight: rawHeaderRowHeight, summaryRowHeight: rawSummaryRowHeight, selectedRows, onSelectedRowsChange, sortColumns, onSortColumnsChange, defaultColumnOptions, onCellClick, onCellDoubleClick, onCellContextMenu, onCellKeyDown, onSelectedCellChange, onScroll, onColumnResize, onColumnsReorder, onFill, onCopy, onPaste, enableVirtualization: rawEnableVirtualization, renderers, className, style, rowClass, direction: rawDirection, role: rawRole, \"aria-label\": ariaLabel, \"aria-labelledby\": ariaLabelledBy, \"aria-describedby\": ariaDescribedBy, \"aria-rowcount\": rawAriaRowCount, \"data-testid\": testId } = props;\n    const defaultRenderers = useDefaultRenderers();\n    const role = rawRole !== null && rawRole !== void 0 ? rawRole : \"grid\";\n    const rowHeight = rawRowHeight !== null && rawRowHeight !== void 0 ? rawRowHeight : 35;\n    const headerRowHeight = rawHeaderRowHeight !== null && rawHeaderRowHeight !== void 0 ? rawHeaderRowHeight : typeof rowHeight === \"number\" ? rowHeight : 35;\n    const summaryRowHeight = rawSummaryRowHeight !== null && rawSummaryRowHeight !== void 0 ? rawSummaryRowHeight : typeof rowHeight === \"number\" ? rowHeight : 35;\n    var _renderers_renderRow, _ref;\n    const renderRow = (_ref = (_renderers_renderRow = renderers === null || renderers === void 0 ? void 0 : renderers.renderRow) !== null && _renderers_renderRow !== void 0 ? _renderers_renderRow : defaultRenderers === null || defaultRenderers === void 0 ? void 0 : defaultRenderers.renderRow) !== null && _ref !== void 0 ? _ref : defaultRenderRow;\n    var _renderers_renderSortStatus, _ref1;\n    const renderSortStatus$1 = (_ref1 = (_renderers_renderSortStatus = renderers === null || renderers === void 0 ? void 0 : renderers.renderSortStatus) !== null && _renderers_renderSortStatus !== void 0 ? _renderers_renderSortStatus : defaultRenderers === null || defaultRenderers === void 0 ? void 0 : defaultRenderers.renderSortStatus) !== null && _ref1 !== void 0 ? _ref1 : renderSortStatus;\n    var _renderers_renderCheckbox, _ref2;\n    const renderCheckbox$1 = (_ref2 = (_renderers_renderCheckbox = renderers === null || renderers === void 0 ? void 0 : renderers.renderCheckbox) !== null && _renderers_renderCheckbox !== void 0 ? _renderers_renderCheckbox : defaultRenderers === null || defaultRenderers === void 0 ? void 0 : defaultRenderers.renderCheckbox) !== null && _ref2 !== void 0 ? _ref2 : renderCheckbox;\n    var _renderers_noRowsFallback;\n    const noRowsFallback = (_renderers_noRowsFallback = renderers === null || renderers === void 0 ? void 0 : renderers.noRowsFallback) !== null && _renderers_noRowsFallback !== void 0 ? _renderers_noRowsFallback : defaultRenderers === null || defaultRenderers === void 0 ? void 0 : defaultRenderers.noRowsFallback;\n    const enableVirtualization = rawEnableVirtualization !== null && rawEnableVirtualization !== void 0 ? rawEnableVirtualization : true;\n    const direction = rawDirection !== null && rawDirection !== void 0 ? rawDirection : \"ltr\";\n    const [scrollTop, setScrollTop] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(0);\n    const [scrollLeft, setScrollLeft] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(0);\n    const [resizedColumnWidths, setResizedColumnWidths] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(()=>new Map());\n    const [measuredColumnWidths, setMeasuredColumnWidths] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(()=>new Map());\n    const [copiedCell, setCopiedCell] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [isDragging, setDragging] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    const [draggedOverRowIdx, setOverRowIdx] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(undefined);\n    const [scrollToPosition, setScrollToPosition] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const getColumnWidth = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((column)=>{\n        var _resizedColumnWidths_get, _ref;\n        return (_ref = (_resizedColumnWidths_get = resizedColumnWidths.get(column.key)) !== null && _resizedColumnWidths_get !== void 0 ? _resizedColumnWidths_get : measuredColumnWidths.get(column.key)) !== null && _ref !== void 0 ? _ref : column.width;\n    }, [\n        measuredColumnWidths,\n        resizedColumnWidths\n    ]);\n    const [gridRef, gridWidth, gridHeight, horizontalScrollbarHeight] = useGridDimensions();\n    const { columns, colSpanColumns, lastFrozenColumnIndex, headerRowsCount, colOverscanStartIdx, colOverscanEndIdx, templateColumns, layoutCssVars, totalFrozenColumnWidth } = useCalculatedColumns({\n        rawColumns,\n        defaultColumnOptions,\n        getColumnWidth,\n        scrollLeft,\n        viewportWidth: gridWidth,\n        enableVirtualization\n    });\n    var _topSummaryRows_length;\n    const topSummaryRowsCount = (_topSummaryRows_length = topSummaryRows === null || topSummaryRows === void 0 ? void 0 : topSummaryRows.length) !== null && _topSummaryRows_length !== void 0 ? _topSummaryRows_length : 0;\n    var _bottomSummaryRows_length;\n    const bottomSummaryRowsCount = (_bottomSummaryRows_length = bottomSummaryRows === null || bottomSummaryRows === void 0 ? void 0 : bottomSummaryRows.length) !== null && _bottomSummaryRows_length !== void 0 ? _bottomSummaryRows_length : 0;\n    const summaryRowsCount = topSummaryRowsCount + bottomSummaryRowsCount;\n    const headerAndTopSummaryRowsCount = headerRowsCount + topSummaryRowsCount;\n    const groupedColumnHeaderRowsCount = headerRowsCount - 1;\n    const minRowIdx = -headerAndTopSummaryRowsCount;\n    const mainHeaderRowIdx = minRowIdx + groupedColumnHeaderRowsCount;\n    const maxRowIdx = rows.length + bottomSummaryRowsCount - 1;\n    const [selectedPosition, setSelectedPosition] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(()=>({\n            idx: -1,\n            rowIdx: minRowIdx - 1,\n            mode: \"SELECT\"\n        }));\n    const prevSelectedPosition = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(selectedPosition);\n    const latestDraggedOverRowIdx = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(draggedOverRowIdx);\n    const lastSelectedRowIdx = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(-1);\n    const focusSinkRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    const shouldFocusCellRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(false);\n    const isTreeGrid = role === \"treegrid\";\n    const headerRowsHeight = headerRowsCount * headerRowHeight;\n    const summaryRowsHeight = summaryRowsCount * summaryRowHeight;\n    const clientHeight = gridHeight - headerRowsHeight - summaryRowsHeight;\n    const isSelectable = selectedRows != null && onSelectedRowsChange != null;\n    const isRtl = direction === \"rtl\";\n    const leftKey = isRtl ? \"ArrowRight\" : \"ArrowLeft\";\n    const rightKey = isRtl ? \"ArrowLeft\" : \"ArrowRight\";\n    const ariaRowCount = rawAriaRowCount !== null && rawAriaRowCount !== void 0 ? rawAriaRowCount : headerRowsCount + rows.length + summaryRowsCount;\n    const defaultGridComponents = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>({\n            renderCheckbox: renderCheckbox$1,\n            renderSortStatus: renderSortStatus$1\n        }), [\n        renderCheckbox$1,\n        renderSortStatus$1\n    ]);\n    const allRowsSelected = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>{\n        const { length } = rows;\n        return length !== 0 && selectedRows != null && rowKeyGetter != null && selectedRows.size >= length && rows.every((row)=>selectedRows.has(rowKeyGetter(row)));\n    }, [\n        rows,\n        selectedRows,\n        rowKeyGetter\n    ]);\n    const { rowOverscanStartIdx, rowOverscanEndIdx, totalRowHeight, gridTemplateRows, getRowTop, getRowHeight, findRowIdx } = useViewportRows({\n        rows,\n        rowHeight,\n        clientHeight,\n        scrollTop,\n        enableVirtualization\n    });\n    const viewportColumns = useViewportColumns({\n        columns,\n        colSpanColumns,\n        colOverscanStartIdx,\n        colOverscanEndIdx,\n        lastFrozenColumnIndex,\n        rowOverscanStartIdx,\n        rowOverscanEndIdx,\n        rows,\n        topSummaryRows,\n        bottomSummaryRows\n    });\n    const { gridTemplateColumns, handleColumnResize } = useColumnWidths(columns, viewportColumns, templateColumns, gridRef, gridWidth, resizedColumnWidths, measuredColumnWidths, setResizedColumnWidths, setMeasuredColumnWidths, onColumnResize);\n    const minColIdx = isTreeGrid ? -1 : 0;\n    const maxColIdx = columns.length - 1;\n    const selectedCellIsWithinSelectionBounds = isCellWithinSelectionBounds(selectedPosition);\n    const selectedCellIsWithinViewportBounds = isCellWithinViewportBounds(selectedPosition);\n    const scrollHeight = headerRowHeight + totalRowHeight + summaryRowsHeight + horizontalScrollbarHeight;\n    const handleColumnResizeLatest = useLatestFunc(handleColumnResize);\n    const onColumnsReorderLastest = useLatestFunc(onColumnsReorder);\n    const onSortColumnsChangeLatest = useLatestFunc(onSortColumnsChange);\n    const onCellClickLatest = useLatestFunc(onCellClick);\n    const onCellDoubleClickLatest = useLatestFunc(onCellDoubleClick);\n    const onCellContextMenuLatest = useLatestFunc(onCellContextMenu);\n    const selectRowLatest = useLatestFunc(selectRow);\n    const handleFormatterRowChangeLatest = useLatestFunc(updateRow);\n    const selectCellLatest = useLatestFunc(selectCell);\n    const selectHeaderCellLatest = useLatestFunc((param)=>{\n        let { idx, rowIdx } = param;\n        selectCell({\n            rowIdx: minRowIdx + rowIdx - 1,\n            idx\n        });\n    });\n    useLayoutEffect(()=>{\n        if (!selectedCellIsWithinSelectionBounds || isSamePosition(selectedPosition, prevSelectedPosition.current)) {\n            prevSelectedPosition.current = selectedPosition;\n            return;\n        }\n        prevSelectedPosition.current = selectedPosition;\n        if (selectedPosition.idx === -1) {\n            focusSinkRef.current.focus({\n                preventScroll: true\n            });\n            scrollIntoView(focusSinkRef.current);\n        }\n    });\n    useLayoutEffect(()=>{\n        if (!shouldFocusCellRef.current) return;\n        shouldFocusCellRef.current = false;\n        focusCellOrCellContent();\n    });\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useImperativeHandle)(ref, ()=>({\n            element: gridRef.current,\n            scrollToCell (param) {\n                let { idx, rowIdx } = param;\n                const scrollToIdx = idx !== undefined && idx > lastFrozenColumnIndex && idx < columns.length ? idx : undefined;\n                const scrollToRowIdx = rowIdx !== undefined && isRowIdxWithinViewportBounds(rowIdx) ? rowIdx : undefined;\n                if (scrollToIdx !== undefined || scrollToRowIdx !== undefined) {\n                    setScrollToPosition({\n                        idx: scrollToIdx,\n                        rowIdx: scrollToRowIdx\n                    });\n                }\n            },\n            selectCell\n        }));\n    const setDraggedOverRowIdx = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((rowIdx)=>{\n        setOverRowIdx(rowIdx);\n        latestDraggedOverRowIdx.current = rowIdx;\n    }, []);\n    function selectRow(args) {\n        if (!onSelectedRowsChange) return;\n        assertIsValidKeyGetter(rowKeyGetter);\n        if (args.type === \"HEADER\") {\n            const newSelectedRows = new Set(selectedRows);\n            for (const row of rows){\n                const rowKey = rowKeyGetter(row);\n                if (args.checked) {\n                    newSelectedRows.add(rowKey);\n                } else {\n                    newSelectedRows.delete(rowKey);\n                }\n            }\n            onSelectedRowsChange(newSelectedRows);\n            return;\n        }\n        const { row, checked, isShiftClick } = args;\n        const newSelectedRows = new Set(selectedRows);\n        const rowKey = rowKeyGetter(row);\n        const previousRowIdx = lastSelectedRowIdx.current;\n        const rowIdx = rows.indexOf(row);\n        lastSelectedRowIdx.current = rowIdx;\n        if (checked) {\n            newSelectedRows.add(rowKey);\n        } else {\n            newSelectedRows.delete(rowKey);\n        }\n        if (isShiftClick && previousRowIdx !== -1 && previousRowIdx !== rowIdx && previousRowIdx < rows.length) {\n            const step = sign(rowIdx - previousRowIdx);\n            for(let i = previousRowIdx + step; i !== rowIdx; i += step){\n                const row = rows[i];\n                if (checked) {\n                    newSelectedRows.add(rowKeyGetter(row));\n                } else {\n                    newSelectedRows.delete(rowKeyGetter(row));\n                }\n            }\n        }\n        onSelectedRowsChange(newSelectedRows);\n    }\n    function handleKeyDown(event) {\n        const { idx, rowIdx, mode } = selectedPosition;\n        if (mode === \"EDIT\") return;\n        if (onCellKeyDown && isRowIdxWithinViewportBounds(rowIdx)) {\n            const row = rows[rowIdx];\n            const cellEvent = createCellEvent(event);\n            onCellKeyDown({\n                mode: \"SELECT\",\n                row,\n                column: columns[idx],\n                rowIdx,\n                selectCell\n            }, cellEvent);\n            if (cellEvent.isGridDefaultPrevented()) return;\n        }\n        if (!(event.target instanceof Element)) return;\n        const isCellEvent = event.target.closest(\".rdg-cell\") !== null;\n        const isRowEvent = isTreeGrid && event.target === focusSinkRef.current;\n        if (!isCellEvent && !isRowEvent) return;\n        const { keyCode } = event;\n        if (selectedCellIsWithinViewportBounds && (onPaste != null || onCopy != null) && isCtrlKeyHeldDown(event)) {\n            const cKey = 67;\n            const vKey = 86;\n            if (keyCode === cKey) {\n                var _window_getSelection;\n                if (((_window_getSelection = window.getSelection()) === null || _window_getSelection === void 0 ? void 0 : _window_getSelection.isCollapsed) === false) return;\n                handleCopy();\n                return;\n            }\n            if (keyCode === vKey) {\n                handlePaste();\n                return;\n            }\n        }\n        switch(event.key){\n            case \"Escape\":\n                setCopiedCell(null);\n                return;\n            case \"ArrowUp\":\n            case \"ArrowDown\":\n            case \"ArrowLeft\":\n            case \"ArrowRight\":\n            case \"Tab\":\n            case \"Home\":\n            case \"End\":\n            case \"PageUp\":\n            case \"PageDown\":\n                navigate(event);\n                break;\n            default:\n                handleCellInput(event);\n                break;\n        }\n    }\n    function handleScroll(event) {\n        const { scrollTop, scrollLeft } = event.currentTarget;\n        (0,react_dom__WEBPACK_IMPORTED_MODULE_1__.flushSync)(()=>{\n            setScrollTop(scrollTop);\n            setScrollLeft(abs(scrollLeft));\n        });\n        onScroll === null || onScroll === void 0 ? void 0 : onScroll(event);\n    }\n    function updateRow(column, rowIdx, row) {\n        if (typeof onRowsChange !== \"function\") return;\n        if (row === rows[rowIdx]) return;\n        const updatedRows = [\n            ...rows\n        ];\n        updatedRows[rowIdx] = row;\n        onRowsChange(updatedRows, {\n            indexes: [\n                rowIdx\n            ],\n            column\n        });\n    }\n    function commitEditorChanges() {\n        if (selectedPosition.mode !== \"EDIT\") return;\n        updateRow(columns[selectedPosition.idx], selectedPosition.rowIdx, selectedPosition.row);\n    }\n    function handleCopy() {\n        const { idx, rowIdx } = selectedPosition;\n        const sourceRow = rows[rowIdx];\n        const sourceColumnKey = columns[idx].key;\n        setCopiedCell({\n            row: sourceRow,\n            columnKey: sourceColumnKey\n        });\n        onCopy === null || onCopy === void 0 ? void 0 : onCopy({\n            sourceRow,\n            sourceColumnKey\n        });\n    }\n    function handlePaste() {\n        if (!onPaste || !onRowsChange || copiedCell === null || !isCellEditable(selectedPosition)) {\n            return;\n        }\n        const { idx, rowIdx } = selectedPosition;\n        const targetColumn = columns[idx];\n        const targetRow = rows[rowIdx];\n        const updatedTargetRow = onPaste({\n            sourceRow: copiedCell.row,\n            sourceColumnKey: copiedCell.columnKey,\n            targetRow,\n            targetColumnKey: targetColumn.key\n        });\n        updateRow(targetColumn, rowIdx, updatedTargetRow);\n    }\n    function handleCellInput(event) {\n        if (!selectedCellIsWithinViewportBounds) return;\n        const row = rows[selectedPosition.rowIdx];\n        const { key, shiftKey } = event;\n        if (isSelectable && shiftKey && key === \" \") {\n            assertIsValidKeyGetter(rowKeyGetter);\n            const rowKey = rowKeyGetter(row);\n            selectRow({\n                type: \"ROW\",\n                row,\n                checked: !selectedRows.has(rowKey),\n                isShiftClick: false\n            });\n            event.preventDefault();\n            return;\n        }\n        if (isCellEditable(selectedPosition) && isDefaultCellInput(event)) {\n            setSelectedPosition((param)=>{\n                let { idx, rowIdx } = param;\n                return {\n                    idx,\n                    rowIdx,\n                    mode: \"EDIT\",\n                    row,\n                    originalRow: row\n                };\n            });\n        }\n    }\n    function isColIdxWithinSelectionBounds(idx) {\n        return idx >= minColIdx && idx <= maxColIdx;\n    }\n    function isRowIdxWithinViewportBounds(rowIdx) {\n        return rowIdx >= 0 && rowIdx < rows.length;\n    }\n    function isCellWithinSelectionBounds(param) {\n        let { idx, rowIdx } = param;\n        return rowIdx >= minRowIdx && rowIdx <= maxRowIdx && isColIdxWithinSelectionBounds(idx);\n    }\n    function isCellWithinEditBounds(param) {\n        let { idx, rowIdx } = param;\n        return isRowIdxWithinViewportBounds(rowIdx) && idx >= 0 && idx <= maxColIdx;\n    }\n    function isCellWithinViewportBounds(param) {\n        let { idx, rowIdx } = param;\n        return isRowIdxWithinViewportBounds(rowIdx) && isColIdxWithinSelectionBounds(idx);\n    }\n    function isCellEditable(position) {\n        return isCellWithinEditBounds(position) && isSelectedCellEditable({\n            columns,\n            rows,\n            selectedPosition: position\n        });\n    }\n    function selectCell(position, enableEditor) {\n        if (!isCellWithinSelectionBounds(position)) return;\n        commitEditorChanges();\n        const row = rows[position.rowIdx];\n        const samePosition = isSamePosition(selectedPosition, position);\n        if (enableEditor && isCellEditable(position)) {\n            setSelectedPosition({\n                ...position,\n                mode: \"EDIT\",\n                row,\n                originalRow: row\n            });\n        } else if (samePosition) {\n            scrollIntoView(getCellToScroll(gridRef.current));\n        } else {\n            shouldFocusCellRef.current = true;\n            setSelectedPosition({\n                ...position,\n                mode: \"SELECT\"\n            });\n        }\n        if (onSelectedCellChange && !samePosition) {\n            onSelectedCellChange({\n                rowIdx: position.rowIdx,\n                row,\n                column: columns[position.idx]\n            });\n        }\n    }\n    function getNextPosition(key, ctrlKey, shiftKey) {\n        const { idx, rowIdx } = selectedPosition;\n        const isRowSelected = selectedCellIsWithinSelectionBounds && idx === -1;\n        switch(key){\n            case \"ArrowUp\":\n                return {\n                    idx,\n                    rowIdx: rowIdx - 1\n                };\n            case \"ArrowDown\":\n                return {\n                    idx,\n                    rowIdx: rowIdx + 1\n                };\n            case leftKey:\n                return {\n                    idx: idx - 1,\n                    rowIdx\n                };\n            case rightKey:\n                return {\n                    idx: idx + 1,\n                    rowIdx\n                };\n            case \"Tab\":\n                return {\n                    idx: idx + (shiftKey ? -1 : 1),\n                    rowIdx\n                };\n            case \"Home\":\n                if (isRowSelected) return {\n                    idx,\n                    rowIdx: minRowIdx\n                };\n                return {\n                    idx: 0,\n                    rowIdx: ctrlKey ? minRowIdx : rowIdx\n                };\n            case \"End\":\n                if (isRowSelected) return {\n                    idx,\n                    rowIdx: maxRowIdx\n                };\n                return {\n                    idx: maxColIdx,\n                    rowIdx: ctrlKey ? maxRowIdx : rowIdx\n                };\n            case \"PageUp\":\n                {\n                    if (selectedPosition.rowIdx === minRowIdx) return selectedPosition;\n                    const nextRowY = getRowTop(rowIdx) + getRowHeight(rowIdx) - clientHeight;\n                    return {\n                        idx,\n                        rowIdx: nextRowY > 0 ? findRowIdx(nextRowY) : 0\n                    };\n                }\n            case \"PageDown\":\n                {\n                    if (selectedPosition.rowIdx >= rows.length) return selectedPosition;\n                    const nextRowY = getRowTop(rowIdx) + clientHeight;\n                    return {\n                        idx,\n                        rowIdx: nextRowY < totalRowHeight ? findRowIdx(nextRowY) : rows.length - 1\n                    };\n                }\n            default:\n                return selectedPosition;\n        }\n    }\n    function navigate(event) {\n        const { key, shiftKey } = event;\n        let cellNavigationMode = \"NONE\";\n        if (key === \"Tab\") {\n            if (canExitGrid({\n                shiftKey,\n                maxColIdx,\n                minRowIdx,\n                maxRowIdx,\n                selectedPosition\n            })) {\n                commitEditorChanges();\n                return;\n            }\n            cellNavigationMode = \"CHANGE_ROW\";\n        }\n        event.preventDefault();\n        const ctrlKey = isCtrlKeyHeldDown(event);\n        const nextPosition = getNextPosition(key, ctrlKey, shiftKey);\n        if (isSamePosition(selectedPosition, nextPosition)) return;\n        const nextSelectedCellPosition = getNextSelectedCellPosition({\n            moveUp: key === \"ArrowUp\",\n            moveNext: key === rightKey || key === \"Tab\" && !shiftKey,\n            columns,\n            colSpanColumns,\n            rows,\n            topSummaryRows,\n            bottomSummaryRows,\n            minRowIdx,\n            mainHeaderRowIdx,\n            maxRowIdx,\n            lastFrozenColumnIndex,\n            cellNavigationMode,\n            currentPosition: selectedPosition,\n            nextPosition,\n            isCellWithinBounds: isCellWithinSelectionBounds\n        });\n        selectCell(nextSelectedCellPosition);\n    }\n    function getDraggedOverCellIdx(currentRowIdx) {\n        if (draggedOverRowIdx === undefined) return;\n        const { rowIdx } = selectedPosition;\n        const isDraggedOver = rowIdx < draggedOverRowIdx ? rowIdx < currentRowIdx && currentRowIdx <= draggedOverRowIdx : rowIdx > currentRowIdx && currentRowIdx >= draggedOverRowIdx;\n        return isDraggedOver ? selectedPosition.idx : undefined;\n    }\n    function focusCellOrCellContent() {\n        const cell = getCellToScroll(gridRef.current);\n        if (cell === null) return;\n        scrollIntoView(cell);\n        var _cell_querySelector;\n        const elementToFocus = (_cell_querySelector = cell.querySelector('[tabindex=\"0\"]')) !== null && _cell_querySelector !== void 0 ? _cell_querySelector : cell;\n        elementToFocus.focus({\n            preventScroll: true\n        });\n    }\n    function renderDragHandle() {\n        if (onFill == null || selectedPosition.mode === \"EDIT\" || !isCellWithinViewportBounds(selectedPosition)) {\n            return;\n        }\n        const { idx, rowIdx } = selectedPosition;\n        const column = columns[idx];\n        if (column.renderEditCell == null || column.editable === false) {\n            return;\n        }\n        const columnWidth = getColumnWidth(column);\n        return /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(DragHandle, {\n            gridRowStart: headerAndTopSummaryRowsCount + rowIdx + 1,\n            rows: rows,\n            column: column,\n            columnWidth: columnWidth,\n            maxColIdx: maxColIdx,\n            isLastRow: rowIdx === maxRowIdx,\n            selectedPosition: selectedPosition,\n            isCellEditable: isCellEditable,\n            latestDraggedOverRowIdx: latestDraggedOverRowIdx,\n            onRowsChange: onRowsChange,\n            onClick: focusCellOrCellContent,\n            onFill: onFill,\n            setDragging: setDragging,\n            setDraggedOverRowIdx: setDraggedOverRowIdx\n        });\n    }\n    function getCellEditor(rowIdx) {\n        if (selectedPosition.rowIdx !== rowIdx || selectedPosition.mode === \"SELECT\") return;\n        const { idx, row } = selectedPosition;\n        const column = columns[idx];\n        const colSpan = getColSpan(column, lastFrozenColumnIndex, {\n            type: \"ROW\",\n            row\n        });\n        const closeEditor = (shouldFocusCell)=>{\n            shouldFocusCellRef.current = shouldFocusCell;\n            setSelectedPosition((param)=>{\n                let { idx, rowIdx } = param;\n                return {\n                    idx,\n                    rowIdx,\n                    mode: \"SELECT\"\n                };\n            });\n        };\n        const onRowChange = (row, commitChanges, shouldFocusCell)=>{\n            if (commitChanges) {\n                (0,react_dom__WEBPACK_IMPORTED_MODULE_1__.flushSync)(()=>{\n                    updateRow(column, selectedPosition.rowIdx, row);\n                    closeEditor(shouldFocusCell);\n                });\n            } else {\n                setSelectedPosition((position)=>({\n                        ...position,\n                        row\n                    }));\n            }\n        };\n        if (rows[selectedPosition.rowIdx] !== selectedPosition.originalRow) {\n            closeEditor(false);\n        }\n        return /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(EditCell, {\n            column: column,\n            colSpan: colSpan,\n            row: row,\n            rowIdx: rowIdx,\n            onRowChange: onRowChange,\n            closeEditor: closeEditor,\n            onKeyDown: onCellKeyDown,\n            navigate: navigate\n        }, column.key);\n    }\n    function getRowViewportColumns(rowIdx) {\n        const selectedColumn = selectedPosition.idx === -1 ? undefined : columns[selectedPosition.idx];\n        if (selectedColumn !== undefined && selectedPosition.rowIdx === rowIdx && !viewportColumns.includes(selectedColumn)) {\n            return selectedPosition.idx > colOverscanEndIdx ? [\n                ...viewportColumns,\n                selectedColumn\n            ] : [\n                ...viewportColumns.slice(0, lastFrozenColumnIndex + 1),\n                selectedColumn,\n                ...viewportColumns.slice(lastFrozenColumnIndex + 1)\n            ];\n        }\n        return viewportColumns;\n    }\n    function getViewportRows() {\n        const rowElements = [];\n        const { idx: selectedIdx, rowIdx: selectedRowIdx } = selectedPosition;\n        const startRowIdx = selectedCellIsWithinViewportBounds && selectedRowIdx < rowOverscanStartIdx ? rowOverscanStartIdx - 1 : rowOverscanStartIdx;\n        const endRowIdx = selectedCellIsWithinViewportBounds && selectedRowIdx > rowOverscanEndIdx ? rowOverscanEndIdx + 1 : rowOverscanEndIdx;\n        for(let viewportRowIdx = startRowIdx; viewportRowIdx <= endRowIdx; viewportRowIdx++){\n            const isRowOutsideViewport = viewportRowIdx === rowOverscanStartIdx - 1 || viewportRowIdx === rowOverscanEndIdx + 1;\n            const rowIdx = isRowOutsideViewport ? selectedRowIdx : viewportRowIdx;\n            let rowColumns = viewportColumns;\n            const selectedColumn = selectedIdx === -1 ? undefined : columns[selectedIdx];\n            if (selectedColumn !== undefined) {\n                if (isRowOutsideViewport) {\n                    rowColumns = [\n                        selectedColumn\n                    ];\n                } else {\n                    rowColumns = getRowViewportColumns(rowIdx);\n                }\n            }\n            const row = rows[rowIdx];\n            const gridRowStart = headerAndTopSummaryRowsCount + rowIdx + 1;\n            let key = rowIdx;\n            let isRowSelected = false;\n            if (typeof rowKeyGetter === \"function\") {\n                key = rowKeyGetter(row);\n                var _selectedRows_has;\n                isRowSelected = (_selectedRows_has = selectedRows === null || selectedRows === void 0 ? void 0 : selectedRows.has(key)) !== null && _selectedRows_has !== void 0 ? _selectedRows_has : false;\n            }\n            rowElements.push(renderRow(key, {\n                \"aria-rowindex\": headerAndTopSummaryRowsCount + rowIdx + 1,\n                \"aria-selected\": isSelectable ? isRowSelected : undefined,\n                rowIdx,\n                row,\n                viewportColumns: rowColumns,\n                isRowSelected,\n                onCellClick: onCellClickLatest,\n                onCellDoubleClick: onCellDoubleClickLatest,\n                onCellContextMenu: onCellContextMenuLatest,\n                rowClass,\n                gridRowStart,\n                copiedCellIdx: copiedCell !== null && copiedCell.row === row ? columns.findIndex((c)=>c.key === copiedCell.columnKey) : undefined,\n                selectedCellIdx: selectedRowIdx === rowIdx ? selectedIdx : undefined,\n                draggedOverCellIdx: getDraggedOverCellIdx(rowIdx),\n                setDraggedOverRowIdx: isDragging ? setDraggedOverRowIdx : undefined,\n                lastFrozenColumnIndex,\n                onRowChange: handleFormatterRowChangeLatest,\n                selectCell: selectCellLatest,\n                selectedCellEditor: getCellEditor(rowIdx)\n            }));\n        }\n        return rowElements;\n    }\n    if (selectedPosition.idx > maxColIdx || selectedPosition.rowIdx > maxRowIdx) {\n        setSelectedPosition({\n            idx: -1,\n            rowIdx: minRowIdx - 1,\n            mode: \"SELECT\"\n        });\n        setDraggedOverRowIdx(undefined);\n    }\n    let templateRows = \"repeat(\".concat(headerRowsCount, \", \").concat(headerRowHeight, \"px)\");\n    if (topSummaryRowsCount > 0) {\n        templateRows += \" repeat(\".concat(topSummaryRowsCount, \", \").concat(summaryRowHeight, \"px)\");\n    }\n    if (rows.length > 0) {\n        templateRows += gridTemplateRows;\n    }\n    if (bottomSummaryRowsCount > 0) {\n        templateRows += \" repeat(\".concat(bottomSummaryRowsCount, \", \").concat(summaryRowHeight, \"px)\");\n    }\n    const isGroupRowFocused = selectedPosition.idx === -1 && selectedPosition.rowIdx !== minRowIdx - 1;\n    return /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsxs)(\"div\", {\n        role: role,\n        \"aria-label\": ariaLabel,\n        \"aria-labelledby\": ariaLabelledBy,\n        \"aria-describedby\": ariaDescribedBy,\n        \"aria-multiselectable\": isSelectable ? true : undefined,\n        \"aria-colcount\": columns.length,\n        \"aria-rowcount\": ariaRowCount,\n        className: (0,clsx__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(rootClassname, className, isDragging && viewportDraggingClassname),\n        style: {\n            ...style,\n            scrollPaddingInlineStart: selectedPosition.idx > lastFrozenColumnIndex || (scrollToPosition === null || scrollToPosition === void 0 ? void 0 : scrollToPosition.idx) !== undefined ? \"\".concat(totalFrozenColumnWidth, \"px\") : undefined,\n            scrollPaddingBlock: isRowIdxWithinViewportBounds(selectedPosition.rowIdx) || (scrollToPosition === null || scrollToPosition === void 0 ? void 0 : scrollToPosition.rowIdx) !== undefined ? \"\".concat(headerRowsHeight + topSummaryRowsCount * summaryRowHeight, \"px \").concat(bottomSummaryRowsCount * summaryRowHeight, \"px\") : undefined,\n            gridTemplateColumns,\n            gridTemplateRows: templateRows,\n            \"--rdg-header-row-height\": \"\".concat(headerRowHeight, \"px\"),\n            \"--rdg-scroll-height\": \"\".concat(scrollHeight, \"px\"),\n            ...layoutCssVars\n        },\n        dir: direction,\n        ref: gridRef,\n        onScroll: handleScroll,\n        onKeyDown: handleKeyDown,\n        \"data-testid\": testId,\n        children: [\n            /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(DataGridDefaultRenderersProvider, {\n                value: defaultGridComponents,\n                children: /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsxs)(RowSelectionChangeProvider, {\n                    value: selectRowLatest,\n                    children: [\n                        /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsxs)(RowSelectionProvider, {\n                            value: allRowsSelected,\n                            children: [\n                                Array.from({\n                                    length: groupedColumnHeaderRowsCount\n                                }, (_, index)=>/*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(GroupedColumnHeaderRow$1, {\n                                        rowIdx: index + 1,\n                                        level: -groupedColumnHeaderRowsCount + index,\n                                        columns: getRowViewportColumns(minRowIdx + index),\n                                        selectedCellIdx: selectedPosition.rowIdx === minRowIdx + index ? selectedPosition.idx : undefined,\n                                        selectCell: selectHeaderCellLatest\n                                    }, index)),\n                                /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(HeaderRow$1, {\n                                    rowIdx: headerRowsCount,\n                                    columns: getRowViewportColumns(mainHeaderRowIdx),\n                                    onColumnResize: handleColumnResizeLatest,\n                                    onColumnsReorder: onColumnsReorderLastest,\n                                    sortColumns: sortColumns,\n                                    onSortColumnsChange: onSortColumnsChangeLatest,\n                                    lastFrozenColumnIndex: lastFrozenColumnIndex,\n                                    selectedCellIdx: selectedPosition.rowIdx === mainHeaderRowIdx ? selectedPosition.idx : undefined,\n                                    selectCell: selectHeaderCellLatest,\n                                    shouldFocusGrid: !selectedCellIsWithinSelectionBounds,\n                                    direction: direction\n                                })\n                            ]\n                        }),\n                        rows.length === 0 && noRowsFallback ? noRowsFallback : /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.Fragment, {\n                            children: [\n                                topSummaryRows === null || topSummaryRows === void 0 ? void 0 : topSummaryRows.map((row, rowIdx)=>{\n                                    const gridRowStart = headerRowsCount + 1 + rowIdx;\n                                    const summaryRowIdx = mainHeaderRowIdx + 1 + rowIdx;\n                                    const isSummaryRowSelected = selectedPosition.rowIdx === summaryRowIdx;\n                                    const top = headerRowsHeight + summaryRowHeight * rowIdx;\n                                    return /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(SummaryRow$1, {\n                                        \"aria-rowindex\": gridRowStart,\n                                        rowIdx: summaryRowIdx,\n                                        gridRowStart: gridRowStart,\n                                        row: row,\n                                        top: top,\n                                        bottom: undefined,\n                                        viewportColumns: getRowViewportColumns(summaryRowIdx),\n                                        lastFrozenColumnIndex: lastFrozenColumnIndex,\n                                        selectedCellIdx: isSummaryRowSelected ? selectedPosition.idx : undefined,\n                                        isTop: true,\n                                        selectCell: selectCellLatest\n                                    }, rowIdx);\n                                }),\n                                getViewportRows(),\n                                bottomSummaryRows === null || bottomSummaryRows === void 0 ? void 0 : bottomSummaryRows.map((row, rowIdx)=>{\n                                    const gridRowStart = headerAndTopSummaryRowsCount + rows.length + rowIdx + 1;\n                                    const summaryRowIdx = rows.length + rowIdx;\n                                    const isSummaryRowSelected = selectedPosition.rowIdx === summaryRowIdx;\n                                    const top = clientHeight > totalRowHeight ? gridHeight - summaryRowHeight * (bottomSummaryRows.length - rowIdx) : undefined;\n                                    const bottom = top === undefined ? summaryRowHeight * (bottomSummaryRows.length - 1 - rowIdx) : undefined;\n                                    return /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(SummaryRow$1, {\n                                        \"aria-rowindex\": ariaRowCount - bottomSummaryRowsCount + rowIdx + 1,\n                                        rowIdx: summaryRowIdx,\n                                        gridRowStart: gridRowStart,\n                                        row: row,\n                                        top: top,\n                                        bottom: bottom,\n                                        viewportColumns: getRowViewportColumns(summaryRowIdx),\n                                        lastFrozenColumnIndex: lastFrozenColumnIndex,\n                                        selectedCellIdx: isSummaryRowSelected ? selectedPosition.idx : undefined,\n                                        isTop: false,\n                                        selectCell: selectCellLatest\n                                    }, rowIdx);\n                                })\n                            ]\n                        })\n                    ]\n                })\n            }),\n            renderDragHandle(),\n            renderMeasuringCells(viewportColumns),\n            isTreeGrid && /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(\"div\", {\n                ref: focusSinkRef,\n                tabIndex: isGroupRowFocused ? 0 : -1,\n                className: (0,clsx__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(focusSinkClassname, isGroupRowFocused && [\n                    rowSelected,\n                    lastFrozenColumnIndex !== -1 && rowSelectedWithFrozenCell\n                ], !isRowIdxWithinViewportBounds(selectedPosition.rowIdx) && focusSinkHeaderAndSummaryClassname),\n                style: {\n                    gridRowStart: selectedPosition.rowIdx + headerAndTopSummaryRowsCount + 1\n                }\n            }),\n            scrollToPosition !== null && /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(ScrollToCell, {\n                scrollToPosition: scrollToPosition,\n                setScrollToCellPosition: setScrollToPosition,\n                gridElement: gridRef.current\n            })\n        ]\n    });\n}\n_s22(DataGrid, \"TMIZZDED2s6IeHucuQK1JFZwzmk=\", false, function() {\n    return [\n        useDefaultRenderers,\n        useGridDimensions,\n        useCalculatedColumns,\n        useViewportRows,\n        useViewportColumns,\n        useColumnWidths,\n        useLatestFunc,\n        useLatestFunc,\n        useLatestFunc,\n        useLatestFunc,\n        useLatestFunc,\n        useLatestFunc,\n        useLatestFunc,\n        useLatestFunc,\n        useLatestFunc,\n        useLatestFunc\n    ];\n});\n_c23 = DataGrid;\nfunction getCellToScroll(gridEl) {\n    return gridEl.querySelector(':scope > [role=\"row\"] > [tabindex=\"0\"]');\n}\nfunction isSamePosition(p1, p2) {\n    return p1.idx === p2.idx && p1.rowIdx === p2.rowIdx;\n}\nconst DataGrid$1 = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(DataGrid);\n_c24 = DataGrid$1;\nfunction GroupCell(param) {\n    let { id, groupKey, childRows, isExpanded, isCellSelected, column, row, groupColumnIndex, isGroupByColumn, toggleGroup: toggleGroupWrapper } = param;\n    var _column_renderGroupCell;\n    _s23();\n    const { tabIndex, childTabIndex, onFocus } = useRovingTabIndex(isCellSelected);\n    function toggleGroup() {\n        toggleGroupWrapper(id);\n    }\n    const isLevelMatching = isGroupByColumn && groupColumnIndex === column.idx;\n    return /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(\"div\", {\n        role: \"gridcell\",\n        \"aria-colindex\": column.idx + 1,\n        \"aria-selected\": isCellSelected,\n        tabIndex: tabIndex,\n        className: getCellClassname(column),\n        style: {\n            ...getCellStyle(column),\n            cursor: isLevelMatching ? \"pointer\" : \"default\"\n        },\n        onClick: isLevelMatching ? toggleGroup : undefined,\n        onFocus: onFocus,\n        children: (!isGroupByColumn || isLevelMatching) && ((_column_renderGroupCell = column.renderGroupCell) === null || _column_renderGroupCell === void 0 ? void 0 : _column_renderGroupCell.call(column, {\n            groupKey,\n            childRows,\n            column,\n            row,\n            isExpanded,\n            tabIndex: childTabIndex,\n            toggleGroup\n        }))\n    }, column.key);\n}\n_s23(GroupCell, \"FOlDZ5V4DEZHV3x0jfMJ8HeV7i0=\", false, function() {\n    return [\n        useRovingTabIndex\n    ];\n});\n_c25 = GroupCell;\nconst GroupCell$1 = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.memo)(GroupCell);\n_c26 = GroupCell$1;\nconst groupRow = \"g1yxluv37-0-0-beta-46\";\nconst groupRowClassname = \"rdg-group-row \".concat(groupRow);\nfunction GroupedRow(param) {\n    let { className, row, rowIdx, viewportColumns, selectedCellIdx, isRowSelected, selectCell, gridRowStart, groupBy, toggleGroup, ...props } = param;\n    const idx = viewportColumns[0].key === SELECT_COLUMN_KEY ? row.level + 1 : row.level;\n    function handleSelectGroup() {\n        selectCell({\n            rowIdx,\n            idx: -1\n        });\n    }\n    return /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(RowSelectionProvider, {\n        value: isRowSelected,\n        children: /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(\"div\", {\n            role: \"row\",\n            \"aria-level\": row.level + 1,\n            \"aria-setsize\": row.setSize,\n            \"aria-posinset\": row.posInSet + 1,\n            \"aria-expanded\": row.isExpanded,\n            className: (0,clsx__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(rowClassname, groupRowClassname, \"rdg-row-\".concat(rowIdx % 2 === 0 ? \"even\" : \"odd\"), className, selectedCellIdx === -1 && rowSelectedClassname),\n            onClick: handleSelectGroup,\n            style: getRowStyle(gridRowStart),\n            ...props,\n            children: viewportColumns.map((column)=>/*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(GroupCell$1, {\n                    id: row.id,\n                    groupKey: row.groupKey,\n                    childRows: row.childRows,\n                    isExpanded: row.isExpanded,\n                    isCellSelected: selectedCellIdx === column.idx,\n                    column: column,\n                    row: row,\n                    groupColumnIndex: idx,\n                    toggleGroup: toggleGroup,\n                    isGroupByColumn: groupBy.includes(column.key)\n                }, column.key))\n        })\n    });\n}\n_c27 = GroupedRow;\nconst GroupedRow$1 = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.memo)(GroupedRow);\n_c28 = GroupedRow$1;\nfunction TreeDataGrid(param, ref) {\n    let { columns: rawColumns, rows: rawRows, rowHeight: rawRowHeight, rowKeyGetter: rawRowKeyGetter, onCellKeyDown: rawOnCellKeyDown, onRowsChange, selectedRows: rawSelectedRows, onSelectedRowsChange: rawOnSelectedRowsChange, renderers, groupBy: rawGroupBy, rowGrouper, expandedGroupIds, onExpandedGroupIdsChange, ...props } = param;\n    var _props_topSummaryRows, _props_topSummaryRows1, _props_bottomSummaryRows;\n    _s24();\n    const defaultRenderers = useDefaultRenderers();\n    var _renderers_renderRow, _ref;\n    const rawRenderRow = (_ref = (_renderers_renderRow = renderers === null || renderers === void 0 ? void 0 : renderers.renderRow) !== null && _renderers_renderRow !== void 0 ? _renderers_renderRow : defaultRenderers === null || defaultRenderers === void 0 ? void 0 : defaultRenderers.renderRow) !== null && _ref !== void 0 ? _ref : defaultRenderRow;\n    var _props_topSummaryRows_length;\n    const headerAndTopSummaryRowsCount = 1 + ((_props_topSummaryRows_length = (_props_topSummaryRows = props.topSummaryRows) === null || _props_topSummaryRows === void 0 ? void 0 : _props_topSummaryRows.length) !== null && _props_topSummaryRows_length !== void 0 ? _props_topSummaryRows_length : 0);\n    const isRtl = props.direction === \"rtl\";\n    const leftKey = isRtl ? \"ArrowRight\" : \"ArrowLeft\";\n    const rightKey = isRtl ? \"ArrowLeft\" : \"ArrowRight\";\n    const toggleGroupLatest = useLatestFunc(toggleGroup);\n    const { columns, groupBy } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>{\n        const columns = [\n            ...rawColumns\n        ].sort((param, param1)=>{\n            let { key: aKey } = param, { key: bKey } = param1;\n            if (aKey === SELECT_COLUMN_KEY) return -1;\n            if (bKey === SELECT_COLUMN_KEY) return 1;\n            if (rawGroupBy.includes(aKey)) {\n                if (rawGroupBy.includes(bKey)) {\n                    return rawGroupBy.indexOf(aKey) - rawGroupBy.indexOf(bKey);\n                }\n                return -1;\n            }\n            if (rawGroupBy.includes(bKey)) return 1;\n            return 0;\n        });\n        const groupBy = [];\n        for (const [index, column] of columns.entries()){\n            if (rawGroupBy.includes(column.key)) {\n                groupBy.push(column.key);\n                var _column_renderGroupCell;\n                columns[index] = {\n                    ...column,\n                    frozen: true,\n                    renderCell: ()=>null,\n                    renderGroupCell: (_column_renderGroupCell = column.renderGroupCell) !== null && _column_renderGroupCell !== void 0 ? _column_renderGroupCell : renderToggleGroup,\n                    editable: false\n                };\n            }\n        }\n        return {\n            columns,\n            groupBy\n        };\n    }, [\n        rawColumns,\n        rawGroupBy\n    ]);\n    const [groupedRows, rowsCount] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>{\n        if (groupBy.length === 0) return [\n            undefined,\n            rawRows.length\n        ];\n        const groupRows = (rows, param, startRowIndex)=>{\n            let [groupByKey, ...remainingGroupByKeys] = param;\n            let groupRowsCount = 0;\n            const groups = {};\n            for (const [key, childRows] of Object.entries(rowGrouper(rows, groupByKey))){\n                const [childGroups, childRowsCount] = remainingGroupByKeys.length === 0 ? [\n                    childRows,\n                    childRows.length\n                ] : groupRows(childRows, remainingGroupByKeys, startRowIndex + groupRowsCount + 1);\n                groups[key] = {\n                    childRows,\n                    childGroups,\n                    startRowIndex: startRowIndex + groupRowsCount\n                };\n                groupRowsCount += childRowsCount + 1;\n            }\n            return [\n                groups,\n                groupRowsCount\n            ];\n        };\n        return groupRows(rawRows, groupBy, 0);\n    }, [\n        groupBy,\n        rowGrouper,\n        rawRows\n    ]);\n    const [rows, isGroupRow] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>{\n        const allGroupRows = new Set();\n        if (!groupedRows) return [\n            rawRows,\n            isGroupRow\n        ];\n        const flattenedRows = [];\n        const expandGroup = (rows, parentId, level)=>{\n            if (isReadonlyArray(rows)) {\n                flattenedRows.push(...rows);\n                return;\n            }\n            Object.keys(rows).forEach((groupKey, posInSet, keys)=>{\n                const id = parentId !== undefined ? \"\".concat(parentId, \"__\").concat(groupKey) : groupKey;\n                const isExpanded = expandedGroupIds.has(id);\n                const { childRows, childGroups, startRowIndex } = rows[groupKey];\n                const groupRow = {\n                    id,\n                    parentId,\n                    groupKey,\n                    isExpanded,\n                    childRows,\n                    level,\n                    posInSet,\n                    startRowIndex,\n                    setSize: keys.length\n                };\n                flattenedRows.push(groupRow);\n                allGroupRows.add(groupRow);\n                if (isExpanded) {\n                    expandGroup(childGroups, id, level + 1);\n                }\n            });\n        };\n        expandGroup(groupedRows, undefined, 0);\n        return [\n            flattenedRows,\n            isGroupRow\n        ];\n        function isGroupRow(row) {\n            return allGroupRows.has(row);\n        }\n    }, [\n        expandedGroupIds,\n        groupedRows,\n        rawRows\n    ]);\n    const rowHeight = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>{\n        if (typeof rawRowHeight === \"function\") {\n            return (row)=>{\n                if (isGroupRow(row)) {\n                    return rawRowHeight({\n                        type: \"GROUP\",\n                        row\n                    });\n                }\n                return rawRowHeight({\n                    type: \"ROW\",\n                    row\n                });\n            };\n        }\n        return rawRowHeight;\n    }, [\n        isGroupRow,\n        rawRowHeight\n    ]);\n    const getParentRowAndIndex = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((row)=>{\n        const rowIdx = rows.indexOf(row);\n        for(let i = rowIdx - 1; i >= 0; i--){\n            const parentRow = rows[i];\n            if (isGroupRow(parentRow) && (!isGroupRow(row) || row.parentId === parentRow.id)) {\n                return [\n                    parentRow,\n                    i\n                ];\n            }\n        }\n        return undefined;\n    }, [\n        isGroupRow,\n        rows\n    ]);\n    const rowKeyGetter = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((row)=>{\n        if (isGroupRow(row)) {\n            return row.id;\n        }\n        if (typeof rawRowKeyGetter === \"function\") {\n            return rawRowKeyGetter(row);\n        }\n        const parentRowAndIndex = getParentRowAndIndex(row);\n        if (parentRowAndIndex !== undefined) {\n            const { startRowIndex, childRows } = parentRowAndIndex[0];\n            const groupIndex = childRows.indexOf(row);\n            return startRowIndex + groupIndex + 1;\n        }\n        return rows.indexOf(row);\n    }, [\n        getParentRowAndIndex,\n        isGroupRow,\n        rawRowKeyGetter,\n        rows\n    ]);\n    const selectedRows = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>{\n        if (rawSelectedRows == null) return null;\n        assertIsValidKeyGetter(rawRowKeyGetter);\n        const selectedRows = new Set(rawSelectedRows);\n        for (const row of rows){\n            if (isGroupRow(row)) {\n                const isGroupRowSelected = row.childRows.every((cr)=>rawSelectedRows.has(rawRowKeyGetter(cr)));\n                if (isGroupRowSelected) {\n                    selectedRows.add(row.id);\n                }\n            }\n        }\n        return selectedRows;\n    }, [\n        isGroupRow,\n        rawRowKeyGetter,\n        rawSelectedRows,\n        rows\n    ]);\n    function onSelectedRowsChange(newSelectedRows) {\n        if (!rawOnSelectedRowsChange) return;\n        assertIsValidKeyGetter(rawRowKeyGetter);\n        const newRawSelectedRows = new Set(rawSelectedRows);\n        for (const row of rows){\n            const key = rowKeyGetter(row);\n            if ((selectedRows === null || selectedRows === void 0 ? void 0 : selectedRows.has(key)) && !newSelectedRows.has(key)) {\n                if (isGroupRow(row)) {\n                    for (const cr of row.childRows){\n                        newRawSelectedRows.delete(rawRowKeyGetter(cr));\n                    }\n                } else {\n                    newRawSelectedRows.delete(key);\n                }\n            } else if (!(selectedRows === null || selectedRows === void 0 ? void 0 : selectedRows.has(key)) && newSelectedRows.has(key)) {\n                if (isGroupRow(row)) {\n                    for (const cr of row.childRows){\n                        newRawSelectedRows.add(rawRowKeyGetter(cr));\n                    }\n                } else {\n                    newRawSelectedRows.add(key);\n                }\n            }\n        }\n        rawOnSelectedRowsChange(newRawSelectedRows);\n    }\n    function handleKeyDown(args, event) {\n        rawOnCellKeyDown === null || rawOnCellKeyDown === void 0 ? void 0 : rawOnCellKeyDown(args, event);\n        if (event.isGridDefaultPrevented()) return;\n        if (args.mode === \"EDIT\") return;\n        const { column, rowIdx, selectCell } = args;\n        var _column_idx;\n        const idx = (_column_idx = column === null || column === void 0 ? void 0 : column.idx) !== null && _column_idx !== void 0 ? _column_idx : -1;\n        const row = rows[rowIdx];\n        if (!isGroupRow(row)) return;\n        if (idx === -1 && (event.key === leftKey && row.isExpanded || event.key === rightKey && !row.isExpanded)) {\n            event.preventDefault();\n            event.preventGridDefault();\n            toggleGroup(row.id);\n        }\n        if (idx === -1 && event.key === leftKey && !row.isExpanded && row.level !== 0) {\n            const parentRowAndIndex = getParentRowAndIndex(row);\n            if (parentRowAndIndex !== undefined) {\n                event.preventGridDefault();\n                selectCell({\n                    idx,\n                    rowIdx: parentRowAndIndex[1]\n                });\n            }\n        }\n        if (isCtrlKeyHeldDown(event) && (event.keyCode === 67 || event.keyCode === 86)) {\n            event.preventGridDefault();\n        }\n    }\n    function handleRowsChange(updatedRows, param) {\n        let { indexes, column } = param;\n        if (!onRowsChange) return;\n        const updatedRawRows = [\n            ...rawRows\n        ];\n        const rawIndexes = [];\n        for (const index of indexes){\n            const rawIndex = rawRows.indexOf(rows[index]);\n            updatedRawRows[rawIndex] = updatedRows[index];\n            rawIndexes.push(rawIndex);\n        }\n        onRowsChange(updatedRawRows, {\n            indexes: rawIndexes,\n            column\n        });\n    }\n    function toggleGroup(groupId) {\n        const newExpandedGroupIds = new Set(expandedGroupIds);\n        if (newExpandedGroupIds.has(groupId)) {\n            newExpandedGroupIds.delete(groupId);\n        } else {\n            newExpandedGroupIds.add(groupId);\n        }\n        onExpandedGroupIdsChange(newExpandedGroupIds);\n    }\n    function renderRow(key, param) {\n        let { row, rowClass, onCellClick, onCellDoubleClick, onCellContextMenu, onRowChange, lastFrozenColumnIndex, copiedCellIdx, draggedOverCellIdx, setDraggedOverRowIdx, selectedCellEditor, ...rowProps } = param;\n        if (isGroupRow(row)) {\n            const { startRowIndex } = row;\n            return /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(GroupedRow$1, {\n                ...rowProps,\n                \"aria-rowindex\": headerAndTopSummaryRowsCount + startRowIndex + 1,\n                row: row,\n                groupBy: groupBy,\n                toggleGroup: toggleGroupLatest\n            }, key);\n        }\n        let ariaRowIndex = rowProps[\"aria-rowindex\"];\n        const parentRowAndIndex = getParentRowAndIndex(row);\n        if (parentRowAndIndex !== undefined) {\n            const { startRowIndex, childRows } = parentRowAndIndex[0];\n            const groupIndex = childRows.indexOf(row);\n            ariaRowIndex = startRowIndex + headerAndTopSummaryRowsCount + groupIndex + 2;\n        }\n        return rawRenderRow(key, {\n            ...rowProps,\n            \"aria-rowindex\": ariaRowIndex,\n            row,\n            rowClass,\n            onCellClick,\n            onCellDoubleClick,\n            onCellContextMenu,\n            onRowChange,\n            lastFrozenColumnIndex,\n            copiedCellIdx,\n            draggedOverCellIdx,\n            setDraggedOverRowIdx,\n            selectedCellEditor\n        });\n    }\n    var _props_topSummaryRows_length1, _props_bottomSummaryRows_length;\n    return /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(DataGrid$1, {\n        ...props,\n        role: \"treegrid\",\n        \"aria-rowcount\": rowsCount + 1 + ((_props_topSummaryRows_length1 = (_props_topSummaryRows1 = props.topSummaryRows) === null || _props_topSummaryRows1 === void 0 ? void 0 : _props_topSummaryRows1.length) !== null && _props_topSummaryRows_length1 !== void 0 ? _props_topSummaryRows_length1 : 0) + ((_props_bottomSummaryRows_length = (_props_bottomSummaryRows = props.bottomSummaryRows) === null || _props_bottomSummaryRows === void 0 ? void 0 : _props_bottomSummaryRows.length) !== null && _props_bottomSummaryRows_length !== void 0 ? _props_bottomSummaryRows_length : 0),\n        ref: ref,\n        columns: columns,\n        rows: rows,\n        rowHeight: rowHeight,\n        rowKeyGetter: rowKeyGetter,\n        onRowsChange: handleRowsChange,\n        selectedRows: selectedRows,\n        onSelectedRowsChange: onSelectedRowsChange,\n        onCellKeyDown: handleKeyDown,\n        renderers: {\n            ...renderers,\n            renderRow\n        }\n    });\n}\n_s24(TreeDataGrid, \"zMf2CkbO7zfxaphCMGYcaDeSJY4=\", false, function() {\n    return [\n        useDefaultRenderers,\n        useLatestFunc\n    ];\n});\n_c29 = TreeDataGrid;\nfunction isReadonlyArray(arr) {\n    return Array.isArray(arr);\n}\nconst TreeDataGrid$1 = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(TreeDataGrid);\n_c30 = TreeDataGrid$1;\nconst textEditorInternalClassname = \"t7vyx3i7-0-0-beta-46\";\nconst textEditorClassname = \"rdg-text-editor \".concat(textEditorInternalClassname);\nfunction autoFocusAndSelect(input) {\n    input === null || input === void 0 ? void 0 : input.focus();\n    input === null || input === void 0 ? void 0 : input.select();\n}\nfunction textEditor(param) {\n    let { row, column, onRowChange, onClose } = param;\n    return /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(\"input\", {\n        className: textEditorClassname,\n        ref: autoFocusAndSelect,\n        value: row[column.key],\n        onChange: (event)=>onRowChange({\n                ...row,\n                [column.key]: event.target.value\n            }),\n        onBlur: ()=>onClose(true, false)\n    });\n}\n //# sourceMappingURL=bundle.js.map\nvar _c, _c1, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9, _c10, _c11, _c12, _c13, _c14, _c15, _c16, _c17, _c18, _c19, _c20, _c21, _c22, _c23, _c24, _c25, _c26, _c27, _c28, _c29, _c30;\n$RefreshReg$(_c, \"ToggleGroup\");\n$RefreshReg$(_c1, \"SelectCellFormatter\");\n$RefreshReg$(_c2, \"HeaderRenderer\");\n$RefreshReg$(_c3, \"SelectFormatter\");\n$RefreshReg$(_c4, \"SelectGroupFormatter\");\n$RefreshReg$(_c5, \"DragHandle\");\n$RefreshReg$(_c6, \"EditCell\");\n$RefreshReg$(_c7, \"GroupedColumnHeaderCell\");\n$RefreshReg$(_c8, \"SortableHeaderCell\");\n$RefreshReg$(_c9, \"HeaderCell\");\n$RefreshReg$(_c10, \"HeaderRow\");\n$RefreshReg$(_c11, \"HeaderRow$1\");\n$RefreshReg$(_c12, \"GroupedColumnHeaderRow\");\n$RefreshReg$(_c13, \"GroupedColumnHeaderRow$1\");\n$RefreshReg$(_c14, \"Cell\");\n$RefreshReg$(_c15, \"Cell$1\");\n$RefreshReg$(_c16, \"Row\");\n$RefreshReg$(_c17, \"RowComponent\");\n$RefreshReg$(_c18, \"ScrollToCell\");\n$RefreshReg$(_c19, \"SummaryCell\");\n$RefreshReg$(_c20, \"SummaryCell$1\");\n$RefreshReg$(_c21, \"SummaryRow\");\n$RefreshReg$(_c22, \"SummaryRow$1\");\n$RefreshReg$(_c23, \"DataGrid\");\n$RefreshReg$(_c24, \"DataGrid$1\");\n$RefreshReg$(_c25, \"GroupCell\");\n$RefreshReg$(_c26, \"GroupCell$1\");\n$RefreshReg$(_c27, \"GroupedRow\");\n$RefreshReg$(_c28, \"GroupedRow$1\");\n$RefreshReg$(_c29, \"TreeDataGrid\");\n$RefreshReg$(_c30, \"TreeDataGrid$1\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/react-data-grid/lib/bundle.js\n"));

/***/ })

},
/******/ function(__webpack_require__) { // webpackRuntimeModules
/******/ var __webpack_exec__ = function(moduleId) { return __webpack_require__(__webpack_require__.s = moduleId); }
/******/ __webpack_require__.O(0, ["main-app"], function() { return __webpack_exec__("(app-pages-browser)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=%2FUsers%2Fnekhavhambemartin%2FDesktop%2Finsnip%20copy%2Fapp%2Ftable%2Fpage.tsx&server=false!"); });
/******/ var __webpack_exports__ = __webpack_require__.O();
/******/ _N_E = __webpack_exports__;
/******/ }
]);