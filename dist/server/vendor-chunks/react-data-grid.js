"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/react-data-grid";
exports.ids = ["vendor-chunks/react-data-grid"];
exports.modules = {

/***/ "(ssr)/./node_modules/react-data-grid/lib/bundle.js":
/*!****************************************************!*\
  !*** ./node_modules/react-data-grid/lib/bundle.js ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DataGridDefaultRenderersProvider: () => (/* binding */ DataGridDefaultRenderersProvider),\n/* harmony export */   Row: () => (/* binding */ RowComponent$1),\n/* harmony export */   SELECT_COLUMN_KEY: () => (/* binding */ SELECT_COLUMN_KEY),\n/* harmony export */   SelectCellFormatter: () => (/* binding */ SelectCellFormatter),\n/* harmony export */   SelectColumn: () => (/* binding */ SelectColumn),\n/* harmony export */   ToggleGroup: () => (/* binding */ ToggleGroup),\n/* harmony export */   TreeDataGrid: () => (/* binding */ TreeDataGrid$1),\n/* harmony export */   \"default\": () => (/* binding */ DataGrid$1),\n/* harmony export */   renderCheckbox: () => (/* binding */ renderCheckbox),\n/* harmony export */   renderHeaderCell: () => (/* binding */ renderHeaderCell),\n/* harmony export */   renderSortIcon: () => (/* binding */ renderSortIcon),\n/* harmony export */   renderSortPriority: () => (/* binding */ renderSortPriority),\n/* harmony export */   renderToggleGroup: () => (/* binding */ renderToggleGroup),\n/* harmony export */   renderValue: () => (/* binding */ renderValue),\n/* harmony export */   textEditor: () => (/* binding */ textEditor),\n/* harmony export */   useRowSelection: () => (/* binding */ useRowSelection)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react-dom */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react-dom.js\");\n/* harmony import */ var clsx__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! clsx */ \"(ssr)/./node_modules/clsx/dist/clsx.mjs\");\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react/jsx-runtime */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react-jsx-runtime.js\");\n\n\n\n\nfunction getColSpan(column, lastFrozenColumnIndex, args) {\n    const colSpan = typeof column.colSpan === \"function\" ? column.colSpan(args) : 1;\n    if (Number.isInteger(colSpan) && colSpan > 1 && (!column.frozen || column.idx + colSpan - 1 <= lastFrozenColumnIndex)) {\n        return colSpan;\n    }\n    return undefined;\n}\nfunction stopPropagation(event) {\n    event.stopPropagation();\n}\nfunction scrollIntoView(element) {\n    element?.scrollIntoView({\n        inline: \"nearest\",\n        block: \"nearest\"\n    });\n}\nfunction createCellEvent(event) {\n    let defaultPrevented = false;\n    const cellEvent = {\n        ...event,\n        preventGridDefault () {\n            defaultPrevented = true;\n        },\n        isGridDefaultPrevented () {\n            return defaultPrevented;\n        }\n    };\n    Object.setPrototypeOf(cellEvent, Object.getPrototypeOf(event));\n    return cellEvent;\n}\nconst nonInputKeys = new Set([\n    \"Unidentified\",\n    \"Alt\",\n    \"AltGraph\",\n    \"CapsLock\",\n    \"Control\",\n    \"Fn\",\n    \"FnLock\",\n    \"Meta\",\n    \"NumLock\",\n    \"ScrollLock\",\n    \"Shift\",\n    \"Tab\",\n    \"ArrowDown\",\n    \"ArrowLeft\",\n    \"ArrowRight\",\n    \"ArrowUp\",\n    \"End\",\n    \"Home\",\n    \"PageDown\",\n    \"PageUp\",\n    \"Insert\",\n    \"ContextMenu\",\n    \"Escape\",\n    \"Pause\",\n    \"Play\",\n    \"PrintScreen\",\n    \"F1\",\n    \"F3\",\n    \"F4\",\n    \"F5\",\n    \"F6\",\n    \"F7\",\n    \"F8\",\n    \"F9\",\n    \"F10\",\n    \"F11\",\n    \"F12\"\n]);\nfunction isCtrlKeyHeldDown(e) {\n    return (e.ctrlKey || e.metaKey) && e.key !== \"Control\";\n}\nfunction isDefaultCellInput(event) {\n    const vKey = 86;\n    if (isCtrlKeyHeldDown(event) && event.keyCode !== vKey) return false;\n    return !nonInputKeys.has(event.key);\n}\nfunction onEditorNavigation({ key, target }) {\n    if (key === \"Tab\" && (target instanceof HTMLInputElement || target instanceof HTMLTextAreaElement || target instanceof HTMLSelectElement)) {\n        return target.closest(\".rdg-editor-container\")?.querySelectorAll(\"input, textarea, select\").length === 1;\n    }\n    return false;\n}\nconst measuringCellClassname = \"mlln6zg7-0-0-beta-46\";\nfunction renderMeasuringCells(viewportColumns) {\n    return viewportColumns.map(({ key, idx, minWidth, maxWidth })=>/*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(\"div\", {\n            className: measuringCellClassname,\n            style: {\n                gridColumnStart: idx + 1,\n                minWidth,\n                maxWidth\n            },\n            \"data-measuring-cell-key\": key\n        }, key));\n}\nfunction isSelectedCellEditable({ selectedPosition, columns, rows }) {\n    const column = columns[selectedPosition.idx];\n    const row = rows[selectedPosition.rowIdx];\n    return isCellEditableUtil(column, row);\n}\nfunction isCellEditableUtil(column, row) {\n    return column.renderEditCell != null && (typeof column.editable === \"function\" ? column.editable(row) : column.editable) !== false;\n}\nfunction getSelectedCellColSpan({ rows, topSummaryRows, bottomSummaryRows, rowIdx, mainHeaderRowIdx, lastFrozenColumnIndex, column }) {\n    const topSummaryRowsCount = topSummaryRows?.length ?? 0;\n    if (rowIdx === mainHeaderRowIdx) {\n        return getColSpan(column, lastFrozenColumnIndex, {\n            type: \"HEADER\"\n        });\n    }\n    if (topSummaryRows && rowIdx > mainHeaderRowIdx && rowIdx <= topSummaryRowsCount + mainHeaderRowIdx) {\n        return getColSpan(column, lastFrozenColumnIndex, {\n            type: \"SUMMARY\",\n            row: topSummaryRows[rowIdx + topSummaryRowsCount]\n        });\n    }\n    if (rowIdx >= 0 && rowIdx < rows.length) {\n        const row = rows[rowIdx];\n        return getColSpan(column, lastFrozenColumnIndex, {\n            type: \"ROW\",\n            row\n        });\n    }\n    if (bottomSummaryRows) {\n        return getColSpan(column, lastFrozenColumnIndex, {\n            type: \"SUMMARY\",\n            row: bottomSummaryRows[rowIdx - rows.length]\n        });\n    }\n    return undefined;\n}\nfunction getNextSelectedCellPosition({ moveUp, moveNext, cellNavigationMode, columns, colSpanColumns, rows, topSummaryRows, bottomSummaryRows, minRowIdx, mainHeaderRowIdx, maxRowIdx, currentPosition: { idx: currentIdx, rowIdx: currentRowIdx }, nextPosition, lastFrozenColumnIndex, isCellWithinBounds }) {\n    let { idx: nextIdx, rowIdx: nextRowIdx } = nextPosition;\n    const columnsCount = columns.length;\n    const setColSpan = (moveNext)=>{\n        for (const column of colSpanColumns){\n            const colIdx = column.idx;\n            if (colIdx > nextIdx) break;\n            const colSpan = getSelectedCellColSpan({\n                rows,\n                topSummaryRows,\n                bottomSummaryRows,\n                rowIdx: nextRowIdx,\n                mainHeaderRowIdx,\n                lastFrozenColumnIndex,\n                column\n            });\n            if (colSpan && nextIdx > colIdx && nextIdx < colSpan + colIdx) {\n                nextIdx = colIdx + (moveNext ? colSpan : 0);\n                break;\n            }\n        }\n    };\n    const getParentRowIdx = (parent)=>{\n        return parent.level + mainHeaderRowIdx;\n    };\n    const setHeaderGroupColAndRowSpan = ()=>{\n        if (moveNext) {\n            const nextColumn = columns[nextIdx];\n            let parent = nextColumn.parent;\n            while(parent !== undefined){\n                const parentRowIdx = getParentRowIdx(parent);\n                if (nextRowIdx === parentRowIdx) {\n                    nextIdx = parent.idx + parent.colSpan;\n                    break;\n                }\n                parent = parent.parent;\n            }\n        } else if (moveUp) {\n            const nextColumn = columns[nextIdx];\n            let parent = nextColumn.parent;\n            let found = false;\n            while(parent !== undefined){\n                const parentRowIdx = getParentRowIdx(parent);\n                if (nextRowIdx >= parentRowIdx) {\n                    nextIdx = parent.idx;\n                    nextRowIdx = parentRowIdx;\n                    found = true;\n                    break;\n                }\n                parent = parent.parent;\n            }\n            if (!found) {\n                nextIdx = currentIdx;\n                nextRowIdx = currentRowIdx;\n            }\n        }\n    };\n    if (isCellWithinBounds(nextPosition)) {\n        setColSpan(moveNext);\n        if (nextRowIdx < mainHeaderRowIdx) {\n            setHeaderGroupColAndRowSpan();\n        }\n    }\n    if (cellNavigationMode === \"CHANGE_ROW\") {\n        const isAfterLastColumn = nextIdx === columnsCount;\n        const isBeforeFirstColumn = nextIdx === -1;\n        if (isAfterLastColumn) {\n            const isLastRow = nextRowIdx === maxRowIdx;\n            if (!isLastRow) {\n                nextIdx = 0;\n                nextRowIdx += 1;\n            }\n        } else if (isBeforeFirstColumn) {\n            const isFirstRow = nextRowIdx === minRowIdx;\n            if (!isFirstRow) {\n                nextRowIdx -= 1;\n                nextIdx = columnsCount - 1;\n            }\n            setColSpan(false);\n        }\n    }\n    if (nextRowIdx < mainHeaderRowIdx) {\n        const nextColumn = columns[nextIdx];\n        let parent = nextColumn.parent;\n        const nextParentRowIdx = nextRowIdx;\n        nextRowIdx = mainHeaderRowIdx;\n        while(parent !== undefined){\n            const parentRowIdx = getParentRowIdx(parent);\n            if (parentRowIdx >= nextParentRowIdx) {\n                nextRowIdx = parentRowIdx;\n                nextIdx = parent.idx;\n            }\n            parent = parent.parent;\n        }\n    }\n    return {\n        idx: nextIdx,\n        rowIdx: nextRowIdx\n    };\n}\nfunction canExitGrid({ maxColIdx, minRowIdx, maxRowIdx, selectedPosition: { rowIdx, idx }, shiftKey }) {\n    const atLastCellInRow = idx === maxColIdx;\n    const atFirstCellInRow = idx === 0;\n    const atLastRow = rowIdx === maxRowIdx;\n    const atFirstRow = rowIdx === minRowIdx;\n    return shiftKey ? atFirstCellInRow && atFirstRow : atLastCellInRow && atLastRow;\n}\nconst cell = \"cj343x07-0-0-beta-46\";\nconst cellClassname = `rdg-cell ${cell}`;\nconst cellFrozen = \"csofj7r7-0-0-beta-46\";\nconst cellFrozenClassname = `rdg-cell-frozen ${cellFrozen}`;\nfunction getRowStyle(rowIdx) {\n    return {\n        \"--rdg-grid-row-start\": rowIdx\n    };\n}\nfunction getHeaderCellStyle(column, rowIdx, rowSpan) {\n    const gridRowEnd = rowIdx + 1;\n    const paddingBlockStart = `calc(${rowSpan - 1} * var(--rdg-header-row-height))`;\n    if (column.parent === undefined) {\n        return {\n            insetBlockStart: 0,\n            gridRowStart: 1,\n            gridRowEnd,\n            paddingBlockStart\n        };\n    }\n    return {\n        insetBlockStart: `calc(${rowIdx - rowSpan} * var(--rdg-header-row-height))`,\n        gridRowStart: gridRowEnd - rowSpan,\n        gridRowEnd,\n        paddingBlockStart\n    };\n}\nfunction getCellStyle(column, colSpan = 1) {\n    const index = column.idx + 1;\n    return {\n        gridColumnStart: index,\n        gridColumnEnd: index + colSpan,\n        insetInlineStart: column.frozen ? `var(--rdg-frozen-left-${column.idx})` : undefined\n    };\n}\nfunction getCellClassname(column, ...extraClasses) {\n    return (0,clsx__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(cellClassname, ...extraClasses, column.frozen && cellFrozenClassname);\n}\nconst { min, max, floor, sign, abs } = Math;\nfunction assertIsValidKeyGetter(keyGetter) {\n    if (typeof keyGetter !== \"function\") {\n        throw new Error(\"Please specify the rowKeyGetter prop to use selection\");\n    }\n}\nfunction clampColumnWidth(width, { minWidth, maxWidth }) {\n    width = max(width, minWidth);\n    if (typeof maxWidth === \"number\" && maxWidth >= minWidth) {\n        return min(width, maxWidth);\n    }\n    return width;\n}\nfunction getHeaderCellRowSpan(column, rowIdx) {\n    return column.parent === undefined ? rowIdx : column.level - column.parent.level;\n}\nconst checkboxContainer = \"c1bn88vv7-0-0-beta-46\";\nconst checkbox = \"c1qt073l7-0-0-beta-46\";\nconst checkboxClassname = `rdg-checkbox-input ${checkbox}`;\nfunction renderCheckbox({ onChange, ...props }) {\n    function handleChange(e) {\n        onChange(e.target.checked, e.nativeEvent.shiftKey);\n    }\n    return /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(\"div\", {\n        className: checkboxContainer,\n        children: /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(\"input\", {\n            type: \"checkbox\",\n            ...props,\n            className: checkboxClassname,\n            onChange: handleChange\n        })\n    });\n}\nconst groupCellContent = \"g1s9ylgp7-0-0-beta-46\";\nconst groupCellContentClassname = `rdg-group-cell-content ${groupCellContent}`;\nconst caret = \"cz54e4y7-0-0-beta-46\";\nconst caretClassname = `rdg-caret ${caret}`;\nfunction renderToggleGroup(props) {\n    return /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(ToggleGroup, {\n        ...props\n    });\n}\nfunction ToggleGroup({ groupKey, isExpanded, tabIndex, toggleGroup }) {\n    function handleKeyDown({ key }) {\n        if (key === \"Enter\") {\n            toggleGroup();\n        }\n    }\n    const d = isExpanded ? \"M1 1 L 7 7 L 13 1\" : \"M1 7 L 7 1 L 13 7\";\n    return /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsxs)(\"span\", {\n        className: groupCellContentClassname,\n        tabIndex: tabIndex,\n        onKeyDown: handleKeyDown,\n        children: [\n            groupKey,\n            /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(\"svg\", {\n                viewBox: \"0 0 14 8\",\n                width: \"14\",\n                height: \"8\",\n                className: caretClassname,\n                \"aria-hidden\": true,\n                children: /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(\"path\", {\n                    d: d\n                })\n            })\n        ]\n    });\n}\nfunction renderValue(props) {\n    try {\n        return props.row[props.column.key];\n    } catch  {\n        return null;\n    }\n}\nconst DataGridDefaultRenderersContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)(undefined);\nconst DataGridDefaultRenderersProvider = DataGridDefaultRenderersContext.Provider;\nfunction useDefaultRenderers() {\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(DataGridDefaultRenderersContext);\n}\nfunction SelectCellFormatter({ value, tabIndex, disabled, onChange, \"aria-label\": ariaLabel, \"aria-labelledby\": ariaLabelledBy }) {\n    const renderCheckbox = useDefaultRenderers().renderCheckbox;\n    return renderCheckbox({\n        \"aria-label\": ariaLabel,\n        \"aria-labelledby\": ariaLabelledBy,\n        tabIndex,\n        disabled,\n        checked: value,\n        onChange\n    });\n}\nconst RowSelectionContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)(undefined);\nconst RowSelectionProvider = RowSelectionContext.Provider;\nconst RowSelectionChangeContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)(undefined);\nconst RowSelectionChangeProvider = RowSelectionChangeContext.Provider;\nfunction useRowSelection() {\n    const rowSelectionContext = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(RowSelectionContext);\n    const rowSelectionChangeContext = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(RowSelectionChangeContext);\n    if (rowSelectionContext === undefined || rowSelectionChangeContext === undefined) {\n        throw new Error(\"useRowSelection must be used within DataGrid cells\");\n    }\n    return [\n        rowSelectionContext,\n        rowSelectionChangeContext\n    ];\n}\nconst SELECT_COLUMN_KEY = \"select-row\";\nfunction HeaderRenderer(props) {\n    const [isRowSelected, onRowSelectionChange] = useRowSelection();\n    return /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(SelectCellFormatter, {\n        \"aria-label\": \"Select All\",\n        tabIndex: props.tabIndex,\n        value: isRowSelected,\n        onChange: (checked)=>{\n            onRowSelectionChange({\n                type: \"HEADER\",\n                checked\n            });\n        }\n    });\n}\nfunction SelectFormatter(props) {\n    const [isRowSelected, onRowSelectionChange] = useRowSelection();\n    return /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(SelectCellFormatter, {\n        \"aria-label\": \"Select\",\n        tabIndex: props.tabIndex,\n        value: isRowSelected,\n        onChange: (checked, isShiftClick)=>{\n            onRowSelectionChange({\n                type: \"ROW\",\n                row: props.row,\n                checked,\n                isShiftClick\n            });\n        }\n    });\n}\nfunction SelectGroupFormatter(props) {\n    const [isRowSelected, onRowSelectionChange] = useRowSelection();\n    return /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(SelectCellFormatter, {\n        \"aria-label\": \"Select Group\",\n        tabIndex: props.tabIndex,\n        value: isRowSelected,\n        onChange: (checked)=>{\n            onRowSelectionChange({\n                type: \"ROW\",\n                row: props.row,\n                checked,\n                isShiftClick: false\n            });\n        }\n    });\n}\nconst SelectColumn = {\n    key: SELECT_COLUMN_KEY,\n    name: \"\",\n    width: 35,\n    minWidth: 35,\n    maxWidth: 35,\n    resizable: false,\n    sortable: false,\n    frozen: true,\n    renderHeaderCell (props) {\n        return /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(HeaderRenderer, {\n            ...props\n        });\n    },\n    renderCell (props) {\n        return /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(SelectFormatter, {\n            ...props\n        });\n    },\n    renderGroupCell (props) {\n        return /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(SelectGroupFormatter, {\n            ...props\n        });\n    }\n};\nconst DEFAULT_COLUMN_WIDTH = \"auto\";\nconst DEFAULT_COLUMN_MIN_WIDTH = 50;\nfunction useCalculatedColumns({ rawColumns, defaultColumnOptions, getColumnWidth, viewportWidth, scrollLeft, enableVirtualization }) {\n    const defaultWidth = defaultColumnOptions?.width ?? DEFAULT_COLUMN_WIDTH;\n    const defaultMinWidth = defaultColumnOptions?.minWidth ?? DEFAULT_COLUMN_MIN_WIDTH;\n    const defaultMaxWidth = defaultColumnOptions?.maxWidth ?? undefined;\n    const defaultCellRenderer = defaultColumnOptions?.renderCell ?? renderValue;\n    const defaultSortable = defaultColumnOptions?.sortable ?? false;\n    const defaultResizable = defaultColumnOptions?.resizable ?? false;\n    const defaultDraggable = defaultColumnOptions?.draggable ?? false;\n    const { columns, colSpanColumns, lastFrozenColumnIndex, headerRowsCount } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>{\n        let lastFrozenColumnIndex = -1;\n        let headerRowsCount = 1;\n        const columns = [];\n        collectColumns(rawColumns, 1);\n        function collectColumns(rawColumns, level, parent) {\n            for (const rawColumn of rawColumns){\n                if (\"children\" in rawColumn) {\n                    const calculatedColumnParent = {\n                        name: rawColumn.name,\n                        parent,\n                        idx: -1,\n                        colSpan: 0,\n                        level: 0,\n                        headerCellClass: rawColumn.headerCellClass\n                    };\n                    collectColumns(rawColumn.children, level + 1, calculatedColumnParent);\n                    continue;\n                }\n                const frozen = rawColumn.frozen ?? false;\n                const column = {\n                    ...rawColumn,\n                    parent,\n                    idx: 0,\n                    level: 0,\n                    frozen,\n                    width: rawColumn.width ?? defaultWidth,\n                    minWidth: rawColumn.minWidth ?? defaultMinWidth,\n                    maxWidth: rawColumn.maxWidth ?? defaultMaxWidth,\n                    sortable: rawColumn.sortable ?? defaultSortable,\n                    resizable: rawColumn.resizable ?? defaultResizable,\n                    draggable: rawColumn.draggable ?? defaultDraggable,\n                    renderCell: rawColumn.renderCell ?? defaultCellRenderer\n                };\n                columns.push(column);\n                if (frozen) {\n                    lastFrozenColumnIndex++;\n                }\n                if (level > headerRowsCount) {\n                    headerRowsCount = level;\n                }\n            }\n        }\n        columns.sort(({ key: aKey, frozen: frozenA }, { key: bKey, frozen: frozenB })=>{\n            if (aKey === SELECT_COLUMN_KEY) return -1;\n            if (bKey === SELECT_COLUMN_KEY) return 1;\n            if (frozenA) {\n                if (frozenB) return 0;\n                return -1;\n            }\n            if (frozenB) return 1;\n            return 0;\n        });\n        const colSpanColumns = [];\n        columns.forEach((column, idx)=>{\n            column.idx = idx;\n            updateColumnParent(column, idx, 0);\n            if (column.colSpan != null) {\n                colSpanColumns.push(column);\n            }\n        });\n        return {\n            columns,\n            colSpanColumns,\n            lastFrozenColumnIndex,\n            headerRowsCount\n        };\n    }, [\n        rawColumns,\n        defaultWidth,\n        defaultMinWidth,\n        defaultMaxWidth,\n        defaultCellRenderer,\n        defaultResizable,\n        defaultSortable,\n        defaultDraggable\n    ]);\n    const { templateColumns, layoutCssVars, totalFrozenColumnWidth, columnMetrics } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>{\n        const columnMetrics = new Map();\n        let left = 0;\n        let totalFrozenColumnWidth = 0;\n        const templateColumns = [];\n        for (const column of columns){\n            let width = getColumnWidth(column);\n            if (typeof width === \"number\") {\n                width = clampColumnWidth(width, column);\n            } else {\n                width = column.minWidth;\n            }\n            templateColumns.push(`${width}px`);\n            columnMetrics.set(column, {\n                width,\n                left\n            });\n            left += width;\n        }\n        if (lastFrozenColumnIndex !== -1) {\n            const columnMetric = columnMetrics.get(columns[lastFrozenColumnIndex]);\n            totalFrozenColumnWidth = columnMetric.left + columnMetric.width;\n        }\n        const layoutCssVars = {};\n        for(let i = 0; i <= lastFrozenColumnIndex; i++){\n            const column = columns[i];\n            layoutCssVars[`--rdg-frozen-left-${column.idx}`] = `${columnMetrics.get(column).left}px`;\n        }\n        return {\n            templateColumns,\n            layoutCssVars,\n            totalFrozenColumnWidth,\n            columnMetrics\n        };\n    }, [\n        getColumnWidth,\n        columns,\n        lastFrozenColumnIndex\n    ]);\n    const [colOverscanStartIdx, colOverscanEndIdx] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>{\n        if (!enableVirtualization) {\n            return [\n                0,\n                columns.length - 1\n            ];\n        }\n        const viewportLeft = scrollLeft + totalFrozenColumnWidth;\n        const viewportRight = scrollLeft + viewportWidth;\n        const lastColIdx = columns.length - 1;\n        const firstUnfrozenColumnIdx = min(lastFrozenColumnIndex + 1, lastColIdx);\n        if (viewportLeft >= viewportRight) {\n            return [\n                firstUnfrozenColumnIdx,\n                firstUnfrozenColumnIdx\n            ];\n        }\n        let colVisibleStartIdx = firstUnfrozenColumnIdx;\n        while(colVisibleStartIdx < lastColIdx){\n            const { left, width } = columnMetrics.get(columns[colVisibleStartIdx]);\n            if (left + width > viewportLeft) {\n                break;\n            }\n            colVisibleStartIdx++;\n        }\n        let colVisibleEndIdx = colVisibleStartIdx;\n        while(colVisibleEndIdx < lastColIdx){\n            const { left, width } = columnMetrics.get(columns[colVisibleEndIdx]);\n            if (left + width >= viewportRight) {\n                break;\n            }\n            colVisibleEndIdx++;\n        }\n        const colOverscanStartIdx = max(firstUnfrozenColumnIdx, colVisibleStartIdx - 1);\n        const colOverscanEndIdx = min(lastColIdx, colVisibleEndIdx + 1);\n        return [\n            colOverscanStartIdx,\n            colOverscanEndIdx\n        ];\n    }, [\n        columnMetrics,\n        columns,\n        lastFrozenColumnIndex,\n        scrollLeft,\n        totalFrozenColumnWidth,\n        viewportWidth,\n        enableVirtualization\n    ]);\n    return {\n        columns,\n        colSpanColumns,\n        colOverscanStartIdx,\n        colOverscanEndIdx,\n        templateColumns,\n        layoutCssVars,\n        headerRowsCount,\n        lastFrozenColumnIndex,\n        totalFrozenColumnWidth\n    };\n}\nfunction updateColumnParent(column, index, level) {\n    if (level < column.level) {\n        column.level = level;\n    }\n    if (column.parent !== undefined) {\n        const { parent } = column;\n        if (parent.idx === -1) {\n            parent.idx = index;\n        }\n        parent.colSpan += 1;\n        updateColumnParent(parent, index, level - 1);\n    }\n}\nconst useLayoutEffect =  true ? react__WEBPACK_IMPORTED_MODULE_0__.useEffect : 0;\nfunction useColumnWidths(columns, viewportColumns, templateColumns, gridRef, gridWidth, resizedColumnWidths, measuredColumnWidths, setResizedColumnWidths, setMeasuredColumnWidths, onColumnResize) {\n    const prevGridWidthRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(gridWidth);\n    const columnsCanFlex = columns.length === viewportColumns.length;\n    const ignorePreviouslyMeasuredColumns = columnsCanFlex && gridWidth !== prevGridWidthRef.current;\n    const newTemplateColumns = [\n        ...templateColumns\n    ];\n    const columnsToMeasure = [];\n    for (const { key, idx, width } of viewportColumns){\n        if (typeof width === \"string\" && (ignorePreviouslyMeasuredColumns || !measuredColumnWidths.has(key)) && !resizedColumnWidths.has(key)) {\n            newTemplateColumns[idx] = width;\n            columnsToMeasure.push(key);\n        }\n    }\n    const gridTemplateColumns = newTemplateColumns.join(\" \");\n    useLayoutEffect(()=>{\n        prevGridWidthRef.current = gridWidth;\n        updateMeasuredWidths(columnsToMeasure);\n    });\n    function updateMeasuredWidths(columnsToMeasure) {\n        if (columnsToMeasure.length === 0) return;\n        setMeasuredColumnWidths((measuredColumnWidths)=>{\n            const newMeasuredColumnWidths = new Map(measuredColumnWidths);\n            let hasChanges = false;\n            for (const key of columnsToMeasure){\n                const measuredWidth = measureColumnWidth(gridRef, key);\n                hasChanges ||= measuredWidth !== measuredColumnWidths.get(key);\n                if (measuredWidth === undefined) {\n                    newMeasuredColumnWidths.delete(key);\n                } else {\n                    newMeasuredColumnWidths.set(key, measuredWidth);\n                }\n            }\n            return hasChanges ? newMeasuredColumnWidths : measuredColumnWidths;\n        });\n    }\n    function handleColumnResize(column, nextWidth) {\n        const { key: resizingKey } = column;\n        const newTemplateColumns = [\n            ...templateColumns\n        ];\n        const columnsToMeasure = [];\n        for (const { key, idx, width } of viewportColumns){\n            if (resizingKey === key) {\n                const width = typeof nextWidth === \"number\" ? `${nextWidth}px` : nextWidth;\n                newTemplateColumns[idx] = width;\n            } else if (columnsCanFlex && typeof width === \"string\" && !resizedColumnWidths.has(key)) {\n                newTemplateColumns[idx] = width;\n                columnsToMeasure.push(key);\n            }\n        }\n        gridRef.current.style.gridTemplateColumns = newTemplateColumns.join(\" \");\n        const measuredWidth = typeof nextWidth === \"number\" ? nextWidth : measureColumnWidth(gridRef, resizingKey);\n        (0,react_dom__WEBPACK_IMPORTED_MODULE_1__.flushSync)(()=>{\n            setResizedColumnWidths((resizedColumnWidths)=>{\n                const newResizedColumnWidths = new Map(resizedColumnWidths);\n                newResizedColumnWidths.set(resizingKey, measuredWidth);\n                return newResizedColumnWidths;\n            });\n            updateMeasuredWidths(columnsToMeasure);\n        });\n        onColumnResize?.(column.idx, measuredWidth);\n    }\n    return {\n        gridTemplateColumns,\n        handleColumnResize\n    };\n}\nfunction measureColumnWidth(gridRef, key) {\n    const selector = `[data-measuring-cell-key=\"${CSS.escape(key)}\"]`;\n    const measuringCell = gridRef.current?.querySelector(selector);\n    return measuringCell?.getBoundingClientRect().width;\n}\nfunction useGridDimensions() {\n    const gridRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    const [inlineSize, setInlineSize] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(1);\n    const [blockSize, setBlockSize] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(1);\n    const [horizontalScrollbarHeight, setHorizontalScrollbarHeight] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(0);\n    useLayoutEffect(()=>{\n        const { ResizeObserver } = window;\n        if (ResizeObserver == null) return;\n        const { clientWidth, clientHeight, offsetWidth, offsetHeight } = gridRef.current;\n        const { width, height } = gridRef.current.getBoundingClientRect();\n        const initialHorizontalScrollbarHeight = offsetHeight - clientHeight;\n        const initialWidth = width - offsetWidth + clientWidth;\n        const initialHeight = height - initialHorizontalScrollbarHeight;\n        setInlineSize(initialWidth);\n        setBlockSize(initialHeight);\n        setHorizontalScrollbarHeight(initialHorizontalScrollbarHeight);\n        const resizeObserver = new ResizeObserver((entries)=>{\n            const size = entries[0].contentBoxSize[0];\n            const { clientHeight, offsetHeight } = gridRef.current;\n            (0,react_dom__WEBPACK_IMPORTED_MODULE_1__.flushSync)(()=>{\n                setInlineSize(size.inlineSize);\n                setBlockSize(size.blockSize);\n                setHorizontalScrollbarHeight(offsetHeight - clientHeight);\n            });\n        });\n        resizeObserver.observe(gridRef.current);\n        return ()=>{\n            resizeObserver.disconnect();\n        };\n    }, []);\n    return [\n        gridRef,\n        inlineSize,\n        blockSize,\n        horizontalScrollbarHeight\n    ];\n}\nfunction useLatestFunc(fn) {\n    const ref = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(fn);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        ref.current = fn;\n    });\n    const callbackFn = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((...args)=>{\n        ref.current(...args);\n    }, []);\n    return fn ? callbackFn : fn;\n}\nfunction useRovingTabIndex(isSelected) {\n    const [isChildFocused, setIsChildFocused] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    if (isChildFocused && !isSelected) {\n        setIsChildFocused(false);\n    }\n    function onFocus(event) {\n        if (event.target !== event.currentTarget) {\n            setIsChildFocused(true);\n        }\n    }\n    const isFocusable = isSelected && !isChildFocused;\n    return {\n        tabIndex: isFocusable ? 0 : -1,\n        childTabIndex: isSelected ? 0 : -1,\n        onFocus: isSelected ? onFocus : undefined\n    };\n}\nfunction useViewportColumns({ columns, colSpanColumns, rows, topSummaryRows, bottomSummaryRows, colOverscanStartIdx, colOverscanEndIdx, lastFrozenColumnIndex, rowOverscanStartIdx, rowOverscanEndIdx }) {\n    const startIdx = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>{\n        if (colOverscanStartIdx === 0) return 0;\n        let startIdx = colOverscanStartIdx;\n        const updateStartIdx = (colIdx, colSpan)=>{\n            if (colSpan !== undefined && colIdx + colSpan > colOverscanStartIdx) {\n                startIdx = colIdx;\n                return true;\n            }\n            return false;\n        };\n        for (const column of colSpanColumns){\n            const colIdx = column.idx;\n            if (colIdx >= startIdx) break;\n            if (updateStartIdx(colIdx, getColSpan(column, lastFrozenColumnIndex, {\n                type: \"HEADER\"\n            }))) {\n                break;\n            }\n            for(let rowIdx = rowOverscanStartIdx; rowIdx <= rowOverscanEndIdx; rowIdx++){\n                const row = rows[rowIdx];\n                if (updateStartIdx(colIdx, getColSpan(column, lastFrozenColumnIndex, {\n                    type: \"ROW\",\n                    row\n                }))) {\n                    break;\n                }\n            }\n            if (topSummaryRows != null) {\n                for (const row of topSummaryRows){\n                    if (updateStartIdx(colIdx, getColSpan(column, lastFrozenColumnIndex, {\n                        type: \"SUMMARY\",\n                        row\n                    }))) {\n                        break;\n                    }\n                }\n            }\n            if (bottomSummaryRows != null) {\n                for (const row of bottomSummaryRows){\n                    if (updateStartIdx(colIdx, getColSpan(column, lastFrozenColumnIndex, {\n                        type: \"SUMMARY\",\n                        row\n                    }))) {\n                        break;\n                    }\n                }\n            }\n        }\n        return startIdx;\n    }, [\n        rowOverscanStartIdx,\n        rowOverscanEndIdx,\n        rows,\n        topSummaryRows,\n        bottomSummaryRows,\n        colOverscanStartIdx,\n        lastFrozenColumnIndex,\n        colSpanColumns\n    ]);\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>{\n        const viewportColumns = [];\n        for(let colIdx = 0; colIdx <= colOverscanEndIdx; colIdx++){\n            const column = columns[colIdx];\n            if (colIdx < startIdx && !column.frozen) continue;\n            viewportColumns.push(column);\n        }\n        return viewportColumns;\n    }, [\n        startIdx,\n        colOverscanEndIdx,\n        columns\n    ]);\n}\nfunction useViewportRows({ rows, rowHeight, clientHeight, scrollTop, enableVirtualization }) {\n    const { totalRowHeight, gridTemplateRows, getRowTop, getRowHeight, findRowIdx } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>{\n        if (typeof rowHeight === \"number\") {\n            return {\n                totalRowHeight: rowHeight * rows.length,\n                gridTemplateRows: ` repeat(${rows.length}, ${rowHeight}px)`,\n                getRowTop: (rowIdx)=>rowIdx * rowHeight,\n                getRowHeight: ()=>rowHeight,\n                findRowIdx: (offset)=>floor(offset / rowHeight)\n            };\n        }\n        let totalRowHeight = 0;\n        let gridTemplateRows = \" \";\n        const rowPositions = rows.map((row)=>{\n            const currentRowHeight = rowHeight(row);\n            const position = {\n                top: totalRowHeight,\n                height: currentRowHeight\n            };\n            gridTemplateRows += `${currentRowHeight}px `;\n            totalRowHeight += currentRowHeight;\n            return position;\n        });\n        const validateRowIdx = (rowIdx)=>{\n            return max(0, min(rows.length - 1, rowIdx));\n        };\n        return {\n            totalRowHeight,\n            gridTemplateRows,\n            getRowTop: (rowIdx)=>rowPositions[validateRowIdx(rowIdx)].top,\n            getRowHeight: (rowIdx)=>rowPositions[validateRowIdx(rowIdx)].height,\n            findRowIdx (offset) {\n                let start = 0;\n                let end = rowPositions.length - 1;\n                while(start <= end){\n                    const middle = start + floor((end - start) / 2);\n                    const currentOffset = rowPositions[middle].top;\n                    if (currentOffset === offset) return middle;\n                    if (currentOffset < offset) {\n                        start = middle + 1;\n                    } else if (currentOffset > offset) {\n                        end = middle - 1;\n                    }\n                    if (start > end) return end;\n                }\n                return 0;\n            }\n        };\n    }, [\n        rowHeight,\n        rows\n    ]);\n    let rowOverscanStartIdx = 0;\n    let rowOverscanEndIdx = rows.length - 1;\n    if (enableVirtualization) {\n        const overscanThreshold = 4;\n        const rowVisibleStartIdx = findRowIdx(scrollTop);\n        const rowVisibleEndIdx = findRowIdx(scrollTop + clientHeight);\n        rowOverscanStartIdx = max(0, rowVisibleStartIdx - overscanThreshold);\n        rowOverscanEndIdx = min(rows.length - 1, rowVisibleEndIdx + overscanThreshold);\n    }\n    return {\n        rowOverscanStartIdx,\n        rowOverscanEndIdx,\n        totalRowHeight,\n        gridTemplateRows,\n        getRowTop,\n        getRowHeight,\n        findRowIdx\n    };\n}\nconst cellDragHandle = \"c1w9bbhr7-0-0-beta-46\";\nconst cellDragHandleFrozenClassname = \"c1creorc7-0-0-beta-46\";\nconst cellDragHandleClassname = `rdg-cell-drag-handle ${cellDragHandle}`;\nfunction DragHandle({ gridRowStart, rows, column, columnWidth, maxColIdx, isLastRow, selectedPosition, latestDraggedOverRowIdx, isCellEditable, onRowsChange, onFill, onClick, setDragging, setDraggedOverRowIdx }) {\n    const { idx, rowIdx } = selectedPosition;\n    function handleMouseDown(event) {\n        event.preventDefault();\n        if (event.buttons !== 1) return;\n        setDragging(true);\n        window.addEventListener(\"mouseover\", onMouseOver);\n        window.addEventListener(\"mouseup\", onMouseUp);\n        function onMouseOver(event) {\n            if (event.buttons !== 1) onMouseUp();\n        }\n        function onMouseUp() {\n            window.removeEventListener(\"mouseover\", onMouseOver);\n            window.removeEventListener(\"mouseup\", onMouseUp);\n            setDragging(false);\n            handleDragEnd();\n        }\n    }\n    function handleDragEnd() {\n        const overRowIdx = latestDraggedOverRowIdx.current;\n        if (overRowIdx === undefined) return;\n        const startRowIndex = rowIdx < overRowIdx ? rowIdx + 1 : overRowIdx;\n        const endRowIndex = rowIdx < overRowIdx ? overRowIdx + 1 : rowIdx;\n        updateRows(startRowIndex, endRowIndex);\n        setDraggedOverRowIdx(undefined);\n    }\n    function handleDoubleClick(event) {\n        event.stopPropagation();\n        updateRows(rowIdx + 1, rows.length);\n    }\n    function updateRows(startRowIdx, endRowIdx) {\n        const sourceRow = rows[rowIdx];\n        const updatedRows = [\n            ...rows\n        ];\n        const indexes = [];\n        for(let i = startRowIdx; i < endRowIdx; i++){\n            if (isCellEditable({\n                rowIdx: i,\n                idx\n            })) {\n                const updatedRow = onFill({\n                    columnKey: column.key,\n                    sourceRow,\n                    targetRow: rows[i]\n                });\n                if (updatedRow !== rows[i]) {\n                    updatedRows[i] = updatedRow;\n                    indexes.push(i);\n                }\n            }\n        }\n        if (indexes.length > 0) {\n            onRowsChange?.(updatedRows, {\n                indexes,\n                column\n            });\n        }\n    }\n    function getStyle() {\n        const colSpan = column.colSpan?.({\n            type: \"ROW\",\n            row: rows[rowIdx]\n        }) ?? 1;\n        const { insetInlineStart, ...style } = getCellStyle(column, colSpan);\n        const marginEnd = \"calc(var(--rdg-drag-handle-size) * -0.5 + 1px)\";\n        const isLastColumn = column.idx + colSpan - 1 === maxColIdx;\n        return {\n            ...style,\n            gridRowStart,\n            marginInlineEnd: isLastColumn ? undefined : marginEnd,\n            marginBlockEnd: isLastRow ? undefined : marginEnd,\n            insetInlineStart: insetInlineStart ? `calc(${insetInlineStart} + ${columnWidth}px + var(--rdg-drag-handle-size) * -0.5 - 1px)` : undefined\n        };\n    }\n    return /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(\"div\", {\n        style: getStyle(),\n        className: (0,clsx__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(cellDragHandleClassname, column.frozen && cellDragHandleFrozenClassname),\n        onClick: onClick,\n        onMouseDown: handleMouseDown,\n        onDoubleClick: handleDoubleClick\n    });\n}\nconst cellEditing = \"cis5rrm7-0-0-beta-46\";\nfunction EditCell({ column, colSpan, row, rowIdx, onRowChange, closeEditor, onKeyDown, navigate }) {\n    const frameRequestRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(undefined);\n    const commitOnOutsideClick = column.editorOptions?.commitOnOutsideClick !== false;\n    const commitOnOutsideMouseDown = useLatestFunc(()=>{\n        onClose(true, false);\n    });\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        if (!commitOnOutsideClick) return;\n        function onWindowCaptureMouseDown() {\n            frameRequestRef.current = requestAnimationFrame(commitOnOutsideMouseDown);\n        }\n        addEventListener(\"mousedown\", onWindowCaptureMouseDown, {\n            capture: true\n        });\n        return ()=>{\n            removeEventListener(\"mousedown\", onWindowCaptureMouseDown, {\n                capture: true\n            });\n            cancelFrameRequest();\n        };\n    }, [\n        commitOnOutsideClick,\n        commitOnOutsideMouseDown\n    ]);\n    function cancelFrameRequest() {\n        cancelAnimationFrame(frameRequestRef.current);\n    }\n    function handleKeyDown(event) {\n        if (onKeyDown) {\n            const cellEvent = createCellEvent(event);\n            onKeyDown({\n                mode: \"EDIT\",\n                row,\n                column,\n                rowIdx,\n                navigate () {\n                    navigate(event);\n                },\n                onClose\n            }, cellEvent);\n            if (cellEvent.isGridDefaultPrevented()) return;\n        }\n        if (event.key === \"Escape\") {\n            onClose();\n        } else if (event.key === \"Enter\") {\n            onClose(true);\n        } else if (onEditorNavigation(event)) {\n            navigate(event);\n        }\n    }\n    function onClose(commitChanges = false, shouldFocusCell = true) {\n        if (commitChanges) {\n            onRowChange(row, true, shouldFocusCell);\n        } else {\n            closeEditor(shouldFocusCell);\n        }\n    }\n    function onEditorRowChange(row, commitChangesAndFocus = false) {\n        onRowChange(row, commitChangesAndFocus, commitChangesAndFocus);\n    }\n    const { cellClass } = column;\n    const className = getCellClassname(column, \"rdg-editor-container\", typeof cellClass === \"function\" ? cellClass(row) : cellClass, !column.editorOptions?.displayCellContent && cellEditing);\n    return /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(\"div\", {\n        role: \"gridcell\",\n        \"aria-colindex\": column.idx + 1,\n        \"aria-colspan\": colSpan,\n        \"aria-selected\": true,\n        className: className,\n        style: getCellStyle(column, colSpan),\n        onKeyDown: handleKeyDown,\n        onMouseDownCapture: cancelFrameRequest,\n        children: column.renderEditCell != null && /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.Fragment, {\n            children: [\n                column.renderEditCell({\n                    column,\n                    row,\n                    rowIdx,\n                    onRowChange: onEditorRowChange,\n                    onClose\n                }),\n                column.editorOptions?.displayCellContent && column.renderCell({\n                    column,\n                    row,\n                    rowIdx,\n                    isCellEditable: true,\n                    tabIndex: -1,\n                    onRowChange: onEditorRowChange\n                })\n            ]\n        })\n    });\n}\nfunction GroupedColumnHeaderCell({ column, rowIdx, isCellSelected, selectCell }) {\n    const { tabIndex, onFocus } = useRovingTabIndex(isCellSelected);\n    const { colSpan } = column;\n    const rowSpan = getHeaderCellRowSpan(column, rowIdx);\n    const index = column.idx + 1;\n    function onClick() {\n        selectCell({\n            idx: column.idx,\n            rowIdx\n        });\n    }\n    return /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(\"div\", {\n        role: \"columnheader\",\n        \"aria-colindex\": index,\n        \"aria-colspan\": colSpan,\n        \"aria-rowspan\": rowSpan,\n        \"aria-selected\": isCellSelected,\n        tabIndex: tabIndex,\n        className: (0,clsx__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(cellClassname, column.headerCellClass),\n        style: {\n            ...getHeaderCellStyle(column, rowIdx, rowSpan),\n            gridColumnStart: index,\n            gridColumnEnd: index + colSpan\n        },\n        onFocus: onFocus,\n        onClick: onClick,\n        children: column.name\n    });\n}\nconst headerSortCellClassname = \"h44jtk67-0-0-beta-46\";\nconst headerSortName = \"hcgkhxz7-0-0-beta-46\";\nconst headerSortNameClassname = `rdg-header-sort-name ${headerSortName}`;\nfunction renderHeaderCell({ column, sortDirection, priority }) {\n    if (!column.sortable) return column.name;\n    return /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(SortableHeaderCell, {\n        sortDirection: sortDirection,\n        priority: priority,\n        children: column.name\n    });\n}\nfunction SortableHeaderCell({ sortDirection, priority, children }) {\n    const renderSortStatus = useDefaultRenderers().renderSortStatus;\n    return /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsxs)(\"span\", {\n        className: headerSortCellClassname,\n        children: [\n            /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(\"span\", {\n                className: headerSortNameClassname,\n                children: children\n            }),\n            /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(\"span\", {\n                children: renderSortStatus({\n                    sortDirection,\n                    priority\n                })\n            })\n        ]\n    });\n}\nconst cellSortableClassname = \"c6l2wv17-0-0-beta-46\";\nconst cellResizable = \"c1kqdw7y7-0-0-beta-46\";\nconst cellResizableClassname = `rdg-cell-resizable ${cellResizable}`;\nconst resizeHandleClassname = \"r1y6ywlx7-0-0-beta-46\";\nconst cellDraggableClassname = \"rdg-cell-draggable\";\nconst cellDragging = \"c1bezg5o7-0-0-beta-46\";\nconst cellDraggingClassname = `rdg-cell-dragging ${cellDragging}`;\nconst cellOver = \"c1vc96037-0-0-beta-46\";\nconst cellOverClassname = `rdg-cell-drag-over ${cellOver}`;\nfunction HeaderCell({ column, colSpan, rowIdx, isCellSelected, onColumnResize, onColumnsReorder, sortColumns, onSortColumnsChange, selectCell, shouldFocusGrid, direction, dragDropKey }) {\n    const [isDragging, setIsDragging] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    const [isOver, setIsOver] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    const isRtl = direction === \"rtl\";\n    const rowSpan = getHeaderCellRowSpan(column, rowIdx);\n    const { tabIndex, childTabIndex, onFocus } = useRovingTabIndex(isCellSelected);\n    const sortIndex = sortColumns?.findIndex((sort)=>sort.columnKey === column.key);\n    const sortColumn = sortIndex !== undefined && sortIndex > -1 ? sortColumns[sortIndex] : undefined;\n    const sortDirection = sortColumn?.direction;\n    const priority = sortColumn !== undefined && sortColumns.length > 1 ? sortIndex + 1 : undefined;\n    const ariaSort = sortDirection && !priority ? sortDirection === \"ASC\" ? \"ascending\" : \"descending\" : undefined;\n    const { sortable, resizable, draggable } = column;\n    const className = getCellClassname(column, column.headerCellClass, sortable && cellSortableClassname, resizable && cellResizableClassname, draggable && cellDraggableClassname, isDragging && cellDraggingClassname, isOver && cellOverClassname);\n    const renderHeaderCell$1 = column.renderHeaderCell ?? renderHeaderCell;\n    function onPointerDown(event) {\n        if (event.pointerType === \"mouse\" && event.buttons !== 1) {\n            return;\n        }\n        event.preventDefault();\n        const { currentTarget, pointerId } = event;\n        const headerCell = currentTarget.parentElement;\n        const { right, left } = headerCell.getBoundingClientRect();\n        const offset = isRtl ? event.clientX - left : right - event.clientX;\n        function onPointerMove(event) {\n            const { right, left } = headerCell.getBoundingClientRect();\n            const width = isRtl ? right + offset - event.clientX : event.clientX + offset - left;\n            if (width > 0) {\n                onColumnResize(column, clampColumnWidth(width, column));\n            }\n        }\n        function onLostPointerCapture() {\n            currentTarget.removeEventListener(\"pointermove\", onPointerMove);\n            currentTarget.removeEventListener(\"lostpointercapture\", onLostPointerCapture);\n        }\n        currentTarget.setPointerCapture(pointerId);\n        currentTarget.addEventListener(\"pointermove\", onPointerMove);\n        currentTarget.addEventListener(\"lostpointercapture\", onLostPointerCapture);\n    }\n    function onSort(ctrlClick) {\n        if (onSortColumnsChange == null) return;\n        const { sortDescendingFirst } = column;\n        if (sortColumn === undefined) {\n            const nextSort = {\n                columnKey: column.key,\n                direction: sortDescendingFirst ? \"DESC\" : \"ASC\"\n            };\n            onSortColumnsChange(sortColumns && ctrlClick ? [\n                ...sortColumns,\n                nextSort\n            ] : [\n                nextSort\n            ]);\n        } else {\n            let nextSortColumn;\n            if (sortDescendingFirst === true && sortDirection === \"DESC\" || sortDescendingFirst !== true && sortDirection === \"ASC\") {\n                nextSortColumn = {\n                    columnKey: column.key,\n                    direction: sortDirection === \"ASC\" ? \"DESC\" : \"ASC\"\n                };\n            }\n            if (ctrlClick) {\n                const nextSortColumns = [\n                    ...sortColumns\n                ];\n                if (nextSortColumn) {\n                    nextSortColumns[sortIndex] = nextSortColumn;\n                } else {\n                    nextSortColumns.splice(sortIndex, 1);\n                }\n                onSortColumnsChange(nextSortColumns);\n            } else {\n                onSortColumnsChange(nextSortColumn ? [\n                    nextSortColumn\n                ] : []);\n            }\n        }\n    }\n    function onClick(event) {\n        selectCell({\n            idx: column.idx,\n            rowIdx\n        });\n        if (sortable) {\n            onSort(event.ctrlKey || event.metaKey);\n        }\n    }\n    function onDoubleClick() {\n        onColumnResize(column, \"max-content\");\n    }\n    function handleFocus(event) {\n        onFocus?.(event);\n        if (shouldFocusGrid) {\n            selectCell({\n                idx: 0,\n                rowIdx\n            });\n        }\n    }\n    function onKeyDown(event) {\n        if (event.key === \" \" || event.key === \"Enter\") {\n            event.preventDefault();\n            onSort(event.ctrlKey || event.metaKey);\n        }\n    }\n    function onDragStart(event) {\n        event.dataTransfer.setData(dragDropKey, column.key);\n        event.dataTransfer.dropEffect = \"move\";\n        setIsDragging(true);\n    }\n    function onDragEnd() {\n        setIsDragging(false);\n    }\n    function onDragOver(event) {\n        event.preventDefault();\n        event.dataTransfer.dropEffect = \"move\";\n    }\n    function onDrop(event) {\n        setIsOver(false);\n        if (event.dataTransfer.types.includes(dragDropKey)) {\n            const sourceKey = event.dataTransfer.getData(dragDropKey);\n            if (sourceKey !== column.key) {\n                event.preventDefault();\n                onColumnsReorder?.(sourceKey, column.key);\n            }\n        }\n    }\n    function onDragEnter(event) {\n        if (isEventPertinent(event)) {\n            setIsOver(true);\n        }\n    }\n    function onDragLeave(event) {\n        if (isEventPertinent(event)) {\n            setIsOver(false);\n        }\n    }\n    let draggableProps;\n    if (draggable) {\n        draggableProps = {\n            draggable: true,\n            onDragStart,\n            onDragEnd,\n            onDragOver,\n            onDragEnter,\n            onDragLeave,\n            onDrop\n        };\n    }\n    return /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsxs)(\"div\", {\n        role: \"columnheader\",\n        \"aria-colindex\": column.idx + 1,\n        \"aria-colspan\": colSpan,\n        \"aria-rowspan\": rowSpan,\n        \"aria-selected\": isCellSelected,\n        \"aria-sort\": ariaSort,\n        tabIndex: shouldFocusGrid ? 0 : tabIndex,\n        className: className,\n        style: {\n            ...getHeaderCellStyle(column, rowIdx, rowSpan),\n            ...getCellStyle(column, colSpan)\n        },\n        onFocus: handleFocus,\n        onClick: onClick,\n        onKeyDown: sortable ? onKeyDown : undefined,\n        ...draggableProps,\n        children: [\n            renderHeaderCell$1({\n                column,\n                sortDirection,\n                priority,\n                tabIndex: childTabIndex\n            }),\n            resizable && /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(\"div\", {\n                className: resizeHandleClassname,\n                onClick: stopPropagation,\n                onDoubleClick: onDoubleClick,\n                onPointerDown: onPointerDown\n            })\n        ]\n    });\n}\nfunction isEventPertinent(event) {\n    const relatedTarget = event.relatedTarget;\n    return !event.currentTarget.contains(relatedTarget);\n}\nconst row = \"r1upfr807-0-0-beta-46\";\nconst rowClassname = `rdg-row ${row}`;\nconst rowSelected = \"r190mhd37-0-0-beta-46\";\nconst rowSelectedClassname = \"rdg-row-selected\";\nconst rowSelectedWithFrozenCell = \"r139qu9m7-0-0-beta-46\";\nconst topSummaryRowClassname = \"rdg-top-summary-row\";\nconst bottomSummaryRowClassname = \"rdg-bottom-summary-row\";\nconst headerRow = \"h10tskcx7-0-0-beta-46\";\nconst headerRowClassname = `rdg-header-row ${headerRow}`;\nfunction HeaderRow({ rowIdx, columns, onColumnResize, onColumnsReorder, sortColumns, onSortColumnsChange, lastFrozenColumnIndex, selectedCellIdx, selectCell, shouldFocusGrid, direction }) {\n    const dragDropKey = (0,react__WEBPACK_IMPORTED_MODULE_0__.useId)();\n    const cells = [];\n    for(let index = 0; index < columns.length; index++){\n        const column = columns[index];\n        const colSpan = getColSpan(column, lastFrozenColumnIndex, {\n            type: \"HEADER\"\n        });\n        if (colSpan !== undefined) {\n            index += colSpan - 1;\n        }\n        cells.push(/*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(HeaderCell, {\n            column: column,\n            colSpan: colSpan,\n            rowIdx: rowIdx,\n            isCellSelected: selectedCellIdx === column.idx,\n            onColumnResize: onColumnResize,\n            onColumnsReorder: onColumnsReorder,\n            onSortColumnsChange: onSortColumnsChange,\n            sortColumns: sortColumns,\n            selectCell: selectCell,\n            shouldFocusGrid: shouldFocusGrid && index === 0,\n            direction: direction,\n            dragDropKey: dragDropKey\n        }, column.key));\n    }\n    return /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(\"div\", {\n        role: \"row\",\n        \"aria-rowindex\": rowIdx,\n        className: (0,clsx__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(headerRowClassname, selectedCellIdx === -1 && rowSelectedClassname),\n        children: cells\n    });\n}\nconst HeaderRow$1 = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.memo)(HeaderRow);\nfunction GroupedColumnHeaderRow({ rowIdx, level, columns, selectedCellIdx, selectCell }) {\n    const cells = [];\n    const renderedParents = new Set();\n    for (const column of columns){\n        let { parent } = column;\n        if (parent === undefined) continue;\n        while(parent.level > level){\n            if (parent.parent === undefined) break;\n            parent = parent.parent;\n        }\n        if (parent.level === level && !renderedParents.has(parent)) {\n            renderedParents.add(parent);\n            const { idx } = parent;\n            cells.push(/*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(GroupedColumnHeaderCell, {\n                column: parent,\n                rowIdx: rowIdx,\n                isCellSelected: selectedCellIdx === idx,\n                selectCell: selectCell\n            }, idx));\n        }\n    }\n    return /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(\"div\", {\n        role: \"row\",\n        \"aria-rowindex\": rowIdx,\n        className: headerRowClassname,\n        children: cells\n    });\n}\nconst GroupedColumnHeaderRow$1 = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.memo)(GroupedColumnHeaderRow);\nconst cellCopied = \"c6ra8a37-0-0-beta-46\";\nconst cellCopiedClassname = `rdg-cell-copied ${cellCopied}`;\nconst cellDraggedOver = \"cq910m07-0-0-beta-46\";\nconst cellDraggedOverClassname = `rdg-cell-dragged-over ${cellDraggedOver}`;\nfunction Cell({ column, colSpan, isCellSelected, isCopied, isDraggedOver, row, rowIdx, onClick, onDoubleClick, onContextMenu, onRowChange, selectCell, ...props }) {\n    const { tabIndex, childTabIndex, onFocus } = useRovingTabIndex(isCellSelected);\n    const { cellClass } = column;\n    const className = getCellClassname(column, typeof cellClass === \"function\" ? cellClass(row) : cellClass, isCopied && cellCopiedClassname, isDraggedOver && cellDraggedOverClassname);\n    const isEditable = isCellEditableUtil(column, row);\n    function selectCellWrapper(openEditor) {\n        selectCell({\n            rowIdx,\n            idx: column.idx\n        }, openEditor);\n    }\n    function handleClick(event) {\n        if (onClick) {\n            const cellEvent = createCellEvent(event);\n            onClick({\n                row,\n                column,\n                selectCell: selectCellWrapper\n            }, cellEvent);\n            if (cellEvent.isGridDefaultPrevented()) return;\n        }\n        selectCellWrapper();\n    }\n    function handleContextMenu(event) {\n        if (onContextMenu) {\n            const cellEvent = createCellEvent(event);\n            onContextMenu({\n                row,\n                column,\n                selectCell: selectCellWrapper\n            }, cellEvent);\n            if (cellEvent.isGridDefaultPrevented()) return;\n        }\n        selectCellWrapper();\n    }\n    function handleDoubleClick(event) {\n        if (onDoubleClick) {\n            const cellEvent = createCellEvent(event);\n            onDoubleClick({\n                row,\n                column,\n                selectCell: selectCellWrapper\n            }, cellEvent);\n            if (cellEvent.isGridDefaultPrevented()) return;\n        }\n        selectCellWrapper(true);\n    }\n    function handleRowChange(newRow) {\n        onRowChange(column, newRow);\n    }\n    return /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(\"div\", {\n        role: \"gridcell\",\n        \"aria-colindex\": column.idx + 1,\n        \"aria-colspan\": colSpan,\n        \"aria-selected\": isCellSelected,\n        \"aria-readonly\": !isEditable || undefined,\n        tabIndex: tabIndex,\n        className: className,\n        style: getCellStyle(column, colSpan),\n        onClick: handleClick,\n        onDoubleClick: handleDoubleClick,\n        onContextMenu: handleContextMenu,\n        onFocus: onFocus,\n        ...props,\n        children: column.renderCell({\n            column,\n            row,\n            rowIdx,\n            isCellEditable: isEditable,\n            tabIndex: childTabIndex,\n            onRowChange: handleRowChange\n        })\n    });\n}\nconst Cell$1 = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.memo)(Cell);\nfunction Row({ className, rowIdx, gridRowStart, selectedCellIdx, isRowSelected, copiedCellIdx, draggedOverCellIdx, lastFrozenColumnIndex, row, viewportColumns, selectedCellEditor, onCellClick, onCellDoubleClick, onCellContextMenu, rowClass, setDraggedOverRowIdx, onMouseEnter, onRowChange, selectCell, ...props }, ref) {\n    const handleRowChange = useLatestFunc((column, newRow)=>{\n        onRowChange(column, rowIdx, newRow);\n    });\n    function handleDragEnter(event) {\n        setDraggedOverRowIdx?.(rowIdx);\n        onMouseEnter?.(event);\n    }\n    className = (0,clsx__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(rowClassname, `rdg-row-${rowIdx % 2 === 0 ? \"even\" : \"odd\"}`, rowClass?.(row, rowIdx), className, selectedCellIdx === -1 && rowSelectedClassname);\n    const cells = [];\n    for(let index = 0; index < viewportColumns.length; index++){\n        const column = viewportColumns[index];\n        const { idx } = column;\n        const colSpan = getColSpan(column, lastFrozenColumnIndex, {\n            type: \"ROW\",\n            row\n        });\n        if (colSpan !== undefined) {\n            index += colSpan - 1;\n        }\n        const isCellSelected = selectedCellIdx === idx;\n        if (isCellSelected && selectedCellEditor) {\n            cells.push(selectedCellEditor);\n        } else {\n            cells.push(/*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(Cell$1, {\n                column: column,\n                colSpan: colSpan,\n                row: row,\n                rowIdx: rowIdx,\n                isCopied: copiedCellIdx === idx,\n                isDraggedOver: draggedOverCellIdx === idx,\n                isCellSelected: isCellSelected,\n                onClick: onCellClick,\n                onDoubleClick: onCellDoubleClick,\n                onContextMenu: onCellContextMenu,\n                onRowChange: handleRowChange,\n                selectCell: selectCell\n            }, column.key));\n        }\n    }\n    return /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(RowSelectionProvider, {\n        value: isRowSelected,\n        children: /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(\"div\", {\n            role: \"row\",\n            ref: ref,\n            className: className,\n            onMouseEnter: handleDragEnter,\n            style: getRowStyle(gridRowStart),\n            ...props,\n            children: cells\n        })\n    });\n}\nconst RowComponent = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.memo)(/*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(Row));\nconst RowComponent$1 = RowComponent;\nfunction defaultRenderRow(key, props) {\n    return /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(RowComponent, {\n        ...props\n    }, key);\n}\nfunction ScrollToCell({ scrollToPosition: { idx, rowIdx }, gridElement, setScrollToCellPosition }) {\n    const ref = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    useLayoutEffect(()=>{\n        scrollIntoView(ref.current);\n    });\n    useLayoutEffect(()=>{\n        function removeScrollToCell() {\n            setScrollToCellPosition(null);\n        }\n        const observer = new IntersectionObserver(removeScrollToCell, {\n            root: gridElement,\n            threshold: 1.0\n        });\n        observer.observe(ref.current);\n        return ()=>{\n            observer.disconnect();\n        };\n    }, [\n        gridElement,\n        setScrollToCellPosition\n    ]);\n    return /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(\"div\", {\n        ref: ref,\n        style: {\n            gridColumn: idx === undefined ? \"1/-1\" : idx + 1,\n            gridRow: rowIdx === undefined ? \"1/-1\" : rowIdx + 2\n        }\n    });\n}\nconst arrow = \"a3ejtar7-0-0-beta-46\";\nconst arrowClassname = `rdg-sort-arrow ${arrow}`;\nfunction renderSortStatus({ sortDirection, priority }) {\n    return /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.Fragment, {\n        children: [\n            renderSortIcon({\n                sortDirection\n            }),\n            renderSortPriority({\n                priority\n            })\n        ]\n    });\n}\nfunction renderSortIcon({ sortDirection }) {\n    if (sortDirection === undefined) return null;\n    return /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(\"svg\", {\n        viewBox: \"0 0 12 8\",\n        width: \"12\",\n        height: \"8\",\n        className: arrowClassname,\n        \"aria-hidden\": true,\n        children: /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(\"path\", {\n            d: sortDirection === \"ASC\" ? \"M0 8 6 0 12 8\" : \"M0 0 6 8 12 0\"\n        })\n    });\n}\nfunction renderSortPriority({ priority }) {\n    return priority;\n}\nconst root = \"rnvodz57-0-0-beta-46\";\nconst rootClassname = `rdg ${root}`;\nconst viewportDragging = \"vlqv91k7-0-0-beta-46\";\nconst viewportDraggingClassname = `rdg-viewport-dragging ${viewportDragging}`;\nconst focusSinkClassname = \"f1lsfrzw7-0-0-beta-46\";\nconst focusSinkHeaderAndSummaryClassname = \"f1cte0lg7-0-0-beta-46\";\nconst summaryCellClassname = \"s8wc6fl7-0-0-beta-46\";\nfunction SummaryCell({ column, colSpan, row, rowIdx, isCellSelected, selectCell }) {\n    const { tabIndex, childTabIndex, onFocus } = useRovingTabIndex(isCellSelected);\n    const { summaryCellClass } = column;\n    const className = getCellClassname(column, summaryCellClassname, typeof summaryCellClass === \"function\" ? summaryCellClass(row) : summaryCellClass);\n    function onClick() {\n        selectCell({\n            rowIdx,\n            idx: column.idx\n        });\n    }\n    return /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(\"div\", {\n        role: \"gridcell\",\n        \"aria-colindex\": column.idx + 1,\n        \"aria-colspan\": colSpan,\n        \"aria-selected\": isCellSelected,\n        tabIndex: tabIndex,\n        className: className,\n        style: getCellStyle(column, colSpan),\n        onClick: onClick,\n        onFocus: onFocus,\n        children: column.renderSummaryCell?.({\n            column,\n            row,\n            tabIndex: childTabIndex\n        })\n    });\n}\nconst SummaryCell$1 = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.memo)(SummaryCell);\nconst summaryRow = \"skuhp557-0-0-beta-46\";\nconst topSummaryRow = \"tf8l5ub7-0-0-beta-46\";\nconst summaryRowClassname = `rdg-summary-row ${summaryRow}`;\nfunction SummaryRow({ rowIdx, gridRowStart, row, viewportColumns, top, bottom, lastFrozenColumnIndex, selectedCellIdx, isTop, selectCell, \"aria-rowindex\": ariaRowIndex }) {\n    const cells = [];\n    for(let index = 0; index < viewportColumns.length; index++){\n        const column = viewportColumns[index];\n        const colSpan = getColSpan(column, lastFrozenColumnIndex, {\n            type: \"SUMMARY\",\n            row\n        });\n        if (colSpan !== undefined) {\n            index += colSpan - 1;\n        }\n        const isCellSelected = selectedCellIdx === column.idx;\n        cells.push(/*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(SummaryCell$1, {\n            column: column,\n            colSpan: colSpan,\n            row: row,\n            rowIdx: rowIdx,\n            isCellSelected: isCellSelected,\n            selectCell: selectCell\n        }, column.key));\n    }\n    return /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(\"div\", {\n        role: \"row\",\n        \"aria-rowindex\": ariaRowIndex,\n        className: (0,clsx__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(rowClassname, `rdg-row-${rowIdx % 2 === 0 ? \"even\" : \"odd\"}`, summaryRowClassname, isTop ? `${topSummaryRowClassname} ${topSummaryRow}` : bottomSummaryRowClassname, selectedCellIdx === -1 && rowSelectedClassname),\n        style: {\n            ...getRowStyle(gridRowStart),\n            \"--rdg-summary-row-top\": top !== undefined ? `${top}px` : undefined,\n            \"--rdg-summary-row-bottom\": bottom !== undefined ? `${bottom}px` : undefined\n        },\n        children: cells\n    });\n}\nconst SummaryRow$1 = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.memo)(SummaryRow);\nfunction DataGrid(props, ref) {\n    const { columns: rawColumns, rows, topSummaryRows, bottomSummaryRows, rowKeyGetter, onRowsChange, rowHeight: rawRowHeight, headerRowHeight: rawHeaderRowHeight, summaryRowHeight: rawSummaryRowHeight, selectedRows, onSelectedRowsChange, sortColumns, onSortColumnsChange, defaultColumnOptions, onCellClick, onCellDoubleClick, onCellContextMenu, onCellKeyDown, onSelectedCellChange, onScroll, onColumnResize, onColumnsReorder, onFill, onCopy, onPaste, enableVirtualization: rawEnableVirtualization, renderers, className, style, rowClass, direction: rawDirection, role: rawRole, \"aria-label\": ariaLabel, \"aria-labelledby\": ariaLabelledBy, \"aria-describedby\": ariaDescribedBy, \"aria-rowcount\": rawAriaRowCount, \"data-testid\": testId } = props;\n    const defaultRenderers = useDefaultRenderers();\n    const role = rawRole ?? \"grid\";\n    const rowHeight = rawRowHeight ?? 35;\n    const headerRowHeight = rawHeaderRowHeight ?? (typeof rowHeight === \"number\" ? rowHeight : 35);\n    const summaryRowHeight = rawSummaryRowHeight ?? (typeof rowHeight === \"number\" ? rowHeight : 35);\n    const renderRow = renderers?.renderRow ?? defaultRenderers?.renderRow ?? defaultRenderRow;\n    const renderSortStatus$1 = renderers?.renderSortStatus ?? defaultRenderers?.renderSortStatus ?? renderSortStatus;\n    const renderCheckbox$1 = renderers?.renderCheckbox ?? defaultRenderers?.renderCheckbox ?? renderCheckbox;\n    const noRowsFallback = renderers?.noRowsFallback ?? defaultRenderers?.noRowsFallback;\n    const enableVirtualization = rawEnableVirtualization ?? true;\n    const direction = rawDirection ?? \"ltr\";\n    const [scrollTop, setScrollTop] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(0);\n    const [scrollLeft, setScrollLeft] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(0);\n    const [resizedColumnWidths, setResizedColumnWidths] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(()=>new Map());\n    const [measuredColumnWidths, setMeasuredColumnWidths] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(()=>new Map());\n    const [copiedCell, setCopiedCell] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [isDragging, setDragging] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    const [draggedOverRowIdx, setOverRowIdx] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(undefined);\n    const [scrollToPosition, setScrollToPosition] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const getColumnWidth = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((column)=>{\n        return resizedColumnWidths.get(column.key) ?? measuredColumnWidths.get(column.key) ?? column.width;\n    }, [\n        measuredColumnWidths,\n        resizedColumnWidths\n    ]);\n    const [gridRef, gridWidth, gridHeight, horizontalScrollbarHeight] = useGridDimensions();\n    const { columns, colSpanColumns, lastFrozenColumnIndex, headerRowsCount, colOverscanStartIdx, colOverscanEndIdx, templateColumns, layoutCssVars, totalFrozenColumnWidth } = useCalculatedColumns({\n        rawColumns,\n        defaultColumnOptions,\n        getColumnWidth,\n        scrollLeft,\n        viewportWidth: gridWidth,\n        enableVirtualization\n    });\n    const topSummaryRowsCount = topSummaryRows?.length ?? 0;\n    const bottomSummaryRowsCount = bottomSummaryRows?.length ?? 0;\n    const summaryRowsCount = topSummaryRowsCount + bottomSummaryRowsCount;\n    const headerAndTopSummaryRowsCount = headerRowsCount + topSummaryRowsCount;\n    const groupedColumnHeaderRowsCount = headerRowsCount - 1;\n    const minRowIdx = -headerAndTopSummaryRowsCount;\n    const mainHeaderRowIdx = minRowIdx + groupedColumnHeaderRowsCount;\n    const maxRowIdx = rows.length + bottomSummaryRowsCount - 1;\n    const [selectedPosition, setSelectedPosition] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(()=>({\n            idx: -1,\n            rowIdx: minRowIdx - 1,\n            mode: \"SELECT\"\n        }));\n    const prevSelectedPosition = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(selectedPosition);\n    const latestDraggedOverRowIdx = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(draggedOverRowIdx);\n    const lastSelectedRowIdx = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(-1);\n    const focusSinkRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    const shouldFocusCellRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(false);\n    const isTreeGrid = role === \"treegrid\";\n    const headerRowsHeight = headerRowsCount * headerRowHeight;\n    const summaryRowsHeight = summaryRowsCount * summaryRowHeight;\n    const clientHeight = gridHeight - headerRowsHeight - summaryRowsHeight;\n    const isSelectable = selectedRows != null && onSelectedRowsChange != null;\n    const isRtl = direction === \"rtl\";\n    const leftKey = isRtl ? \"ArrowRight\" : \"ArrowLeft\";\n    const rightKey = isRtl ? \"ArrowLeft\" : \"ArrowRight\";\n    const ariaRowCount = rawAriaRowCount ?? headerRowsCount + rows.length + summaryRowsCount;\n    const defaultGridComponents = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>({\n            renderCheckbox: renderCheckbox$1,\n            renderSortStatus: renderSortStatus$1\n        }), [\n        renderCheckbox$1,\n        renderSortStatus$1\n    ]);\n    const allRowsSelected = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>{\n        const { length } = rows;\n        return length !== 0 && selectedRows != null && rowKeyGetter != null && selectedRows.size >= length && rows.every((row)=>selectedRows.has(rowKeyGetter(row)));\n    }, [\n        rows,\n        selectedRows,\n        rowKeyGetter\n    ]);\n    const { rowOverscanStartIdx, rowOverscanEndIdx, totalRowHeight, gridTemplateRows, getRowTop, getRowHeight, findRowIdx } = useViewportRows({\n        rows,\n        rowHeight,\n        clientHeight,\n        scrollTop,\n        enableVirtualization\n    });\n    const viewportColumns = useViewportColumns({\n        columns,\n        colSpanColumns,\n        colOverscanStartIdx,\n        colOverscanEndIdx,\n        lastFrozenColumnIndex,\n        rowOverscanStartIdx,\n        rowOverscanEndIdx,\n        rows,\n        topSummaryRows,\n        bottomSummaryRows\n    });\n    const { gridTemplateColumns, handleColumnResize } = useColumnWidths(columns, viewportColumns, templateColumns, gridRef, gridWidth, resizedColumnWidths, measuredColumnWidths, setResizedColumnWidths, setMeasuredColumnWidths, onColumnResize);\n    const minColIdx = isTreeGrid ? -1 : 0;\n    const maxColIdx = columns.length - 1;\n    const selectedCellIsWithinSelectionBounds = isCellWithinSelectionBounds(selectedPosition);\n    const selectedCellIsWithinViewportBounds = isCellWithinViewportBounds(selectedPosition);\n    const scrollHeight = headerRowHeight + totalRowHeight + summaryRowsHeight + horizontalScrollbarHeight;\n    const handleColumnResizeLatest = useLatestFunc(handleColumnResize);\n    const onColumnsReorderLastest = useLatestFunc(onColumnsReorder);\n    const onSortColumnsChangeLatest = useLatestFunc(onSortColumnsChange);\n    const onCellClickLatest = useLatestFunc(onCellClick);\n    const onCellDoubleClickLatest = useLatestFunc(onCellDoubleClick);\n    const onCellContextMenuLatest = useLatestFunc(onCellContextMenu);\n    const selectRowLatest = useLatestFunc(selectRow);\n    const handleFormatterRowChangeLatest = useLatestFunc(updateRow);\n    const selectCellLatest = useLatestFunc(selectCell);\n    const selectHeaderCellLatest = useLatestFunc(({ idx, rowIdx })=>{\n        selectCell({\n            rowIdx: minRowIdx + rowIdx - 1,\n            idx\n        });\n    });\n    useLayoutEffect(()=>{\n        if (!selectedCellIsWithinSelectionBounds || isSamePosition(selectedPosition, prevSelectedPosition.current)) {\n            prevSelectedPosition.current = selectedPosition;\n            return;\n        }\n        prevSelectedPosition.current = selectedPosition;\n        if (selectedPosition.idx === -1) {\n            focusSinkRef.current.focus({\n                preventScroll: true\n            });\n            scrollIntoView(focusSinkRef.current);\n        }\n    });\n    useLayoutEffect(()=>{\n        if (!shouldFocusCellRef.current) return;\n        shouldFocusCellRef.current = false;\n        focusCellOrCellContent();\n    });\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useImperativeHandle)(ref, ()=>({\n            element: gridRef.current,\n            scrollToCell ({ idx, rowIdx }) {\n                const scrollToIdx = idx !== undefined && idx > lastFrozenColumnIndex && idx < columns.length ? idx : undefined;\n                const scrollToRowIdx = rowIdx !== undefined && isRowIdxWithinViewportBounds(rowIdx) ? rowIdx : undefined;\n                if (scrollToIdx !== undefined || scrollToRowIdx !== undefined) {\n                    setScrollToPosition({\n                        idx: scrollToIdx,\n                        rowIdx: scrollToRowIdx\n                    });\n                }\n            },\n            selectCell\n        }));\n    const setDraggedOverRowIdx = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((rowIdx)=>{\n        setOverRowIdx(rowIdx);\n        latestDraggedOverRowIdx.current = rowIdx;\n    }, []);\n    function selectRow(args) {\n        if (!onSelectedRowsChange) return;\n        assertIsValidKeyGetter(rowKeyGetter);\n        if (args.type === \"HEADER\") {\n            const newSelectedRows = new Set(selectedRows);\n            for (const row of rows){\n                const rowKey = rowKeyGetter(row);\n                if (args.checked) {\n                    newSelectedRows.add(rowKey);\n                } else {\n                    newSelectedRows.delete(rowKey);\n                }\n            }\n            onSelectedRowsChange(newSelectedRows);\n            return;\n        }\n        const { row, checked, isShiftClick } = args;\n        const newSelectedRows = new Set(selectedRows);\n        const rowKey = rowKeyGetter(row);\n        const previousRowIdx = lastSelectedRowIdx.current;\n        const rowIdx = rows.indexOf(row);\n        lastSelectedRowIdx.current = rowIdx;\n        if (checked) {\n            newSelectedRows.add(rowKey);\n        } else {\n            newSelectedRows.delete(rowKey);\n        }\n        if (isShiftClick && previousRowIdx !== -1 && previousRowIdx !== rowIdx && previousRowIdx < rows.length) {\n            const step = sign(rowIdx - previousRowIdx);\n            for(let i = previousRowIdx + step; i !== rowIdx; i += step){\n                const row = rows[i];\n                if (checked) {\n                    newSelectedRows.add(rowKeyGetter(row));\n                } else {\n                    newSelectedRows.delete(rowKeyGetter(row));\n                }\n            }\n        }\n        onSelectedRowsChange(newSelectedRows);\n    }\n    function handleKeyDown(event) {\n        const { idx, rowIdx, mode } = selectedPosition;\n        if (mode === \"EDIT\") return;\n        if (onCellKeyDown && isRowIdxWithinViewportBounds(rowIdx)) {\n            const row = rows[rowIdx];\n            const cellEvent = createCellEvent(event);\n            onCellKeyDown({\n                mode: \"SELECT\",\n                row,\n                column: columns[idx],\n                rowIdx,\n                selectCell\n            }, cellEvent);\n            if (cellEvent.isGridDefaultPrevented()) return;\n        }\n        if (!(event.target instanceof Element)) return;\n        const isCellEvent = event.target.closest(\".rdg-cell\") !== null;\n        const isRowEvent = isTreeGrid && event.target === focusSinkRef.current;\n        if (!isCellEvent && !isRowEvent) return;\n        const { keyCode } = event;\n        if (selectedCellIsWithinViewportBounds && (onPaste != null || onCopy != null) && isCtrlKeyHeldDown(event)) {\n            const cKey = 67;\n            const vKey = 86;\n            if (keyCode === cKey) {\n                if (window.getSelection()?.isCollapsed === false) return;\n                handleCopy();\n                return;\n            }\n            if (keyCode === vKey) {\n                handlePaste();\n                return;\n            }\n        }\n        switch(event.key){\n            case \"Escape\":\n                setCopiedCell(null);\n                return;\n            case \"ArrowUp\":\n            case \"ArrowDown\":\n            case \"ArrowLeft\":\n            case \"ArrowRight\":\n            case \"Tab\":\n            case \"Home\":\n            case \"End\":\n            case \"PageUp\":\n            case \"PageDown\":\n                navigate(event);\n                break;\n            default:\n                handleCellInput(event);\n                break;\n        }\n    }\n    function handleScroll(event) {\n        const { scrollTop, scrollLeft } = event.currentTarget;\n        (0,react_dom__WEBPACK_IMPORTED_MODULE_1__.flushSync)(()=>{\n            setScrollTop(scrollTop);\n            setScrollLeft(abs(scrollLeft));\n        });\n        onScroll?.(event);\n    }\n    function updateRow(column, rowIdx, row) {\n        if (typeof onRowsChange !== \"function\") return;\n        if (row === rows[rowIdx]) return;\n        const updatedRows = [\n            ...rows\n        ];\n        updatedRows[rowIdx] = row;\n        onRowsChange(updatedRows, {\n            indexes: [\n                rowIdx\n            ],\n            column\n        });\n    }\n    function commitEditorChanges() {\n        if (selectedPosition.mode !== \"EDIT\") return;\n        updateRow(columns[selectedPosition.idx], selectedPosition.rowIdx, selectedPosition.row);\n    }\n    function handleCopy() {\n        const { idx, rowIdx } = selectedPosition;\n        const sourceRow = rows[rowIdx];\n        const sourceColumnKey = columns[idx].key;\n        setCopiedCell({\n            row: sourceRow,\n            columnKey: sourceColumnKey\n        });\n        onCopy?.({\n            sourceRow,\n            sourceColumnKey\n        });\n    }\n    function handlePaste() {\n        if (!onPaste || !onRowsChange || copiedCell === null || !isCellEditable(selectedPosition)) {\n            return;\n        }\n        const { idx, rowIdx } = selectedPosition;\n        const targetColumn = columns[idx];\n        const targetRow = rows[rowIdx];\n        const updatedTargetRow = onPaste({\n            sourceRow: copiedCell.row,\n            sourceColumnKey: copiedCell.columnKey,\n            targetRow,\n            targetColumnKey: targetColumn.key\n        });\n        updateRow(targetColumn, rowIdx, updatedTargetRow);\n    }\n    function handleCellInput(event) {\n        if (!selectedCellIsWithinViewportBounds) return;\n        const row = rows[selectedPosition.rowIdx];\n        const { key, shiftKey } = event;\n        if (isSelectable && shiftKey && key === \" \") {\n            assertIsValidKeyGetter(rowKeyGetter);\n            const rowKey = rowKeyGetter(row);\n            selectRow({\n                type: \"ROW\",\n                row,\n                checked: !selectedRows.has(rowKey),\n                isShiftClick: false\n            });\n            event.preventDefault();\n            return;\n        }\n        if (isCellEditable(selectedPosition) && isDefaultCellInput(event)) {\n            setSelectedPosition(({ idx, rowIdx })=>({\n                    idx,\n                    rowIdx,\n                    mode: \"EDIT\",\n                    row,\n                    originalRow: row\n                }));\n        }\n    }\n    function isColIdxWithinSelectionBounds(idx) {\n        return idx >= minColIdx && idx <= maxColIdx;\n    }\n    function isRowIdxWithinViewportBounds(rowIdx) {\n        return rowIdx >= 0 && rowIdx < rows.length;\n    }\n    function isCellWithinSelectionBounds({ idx, rowIdx }) {\n        return rowIdx >= minRowIdx && rowIdx <= maxRowIdx && isColIdxWithinSelectionBounds(idx);\n    }\n    function isCellWithinEditBounds({ idx, rowIdx }) {\n        return isRowIdxWithinViewportBounds(rowIdx) && idx >= 0 && idx <= maxColIdx;\n    }\n    function isCellWithinViewportBounds({ idx, rowIdx }) {\n        return isRowIdxWithinViewportBounds(rowIdx) && isColIdxWithinSelectionBounds(idx);\n    }\n    function isCellEditable(position) {\n        return isCellWithinEditBounds(position) && isSelectedCellEditable({\n            columns,\n            rows,\n            selectedPosition: position\n        });\n    }\n    function selectCell(position, enableEditor) {\n        if (!isCellWithinSelectionBounds(position)) return;\n        commitEditorChanges();\n        const row = rows[position.rowIdx];\n        const samePosition = isSamePosition(selectedPosition, position);\n        if (enableEditor && isCellEditable(position)) {\n            setSelectedPosition({\n                ...position,\n                mode: \"EDIT\",\n                row,\n                originalRow: row\n            });\n        } else if (samePosition) {\n            scrollIntoView(getCellToScroll(gridRef.current));\n        } else {\n            shouldFocusCellRef.current = true;\n            setSelectedPosition({\n                ...position,\n                mode: \"SELECT\"\n            });\n        }\n        if (onSelectedCellChange && !samePosition) {\n            onSelectedCellChange({\n                rowIdx: position.rowIdx,\n                row,\n                column: columns[position.idx]\n            });\n        }\n    }\n    function getNextPosition(key, ctrlKey, shiftKey) {\n        const { idx, rowIdx } = selectedPosition;\n        const isRowSelected = selectedCellIsWithinSelectionBounds && idx === -1;\n        switch(key){\n            case \"ArrowUp\":\n                return {\n                    idx,\n                    rowIdx: rowIdx - 1\n                };\n            case \"ArrowDown\":\n                return {\n                    idx,\n                    rowIdx: rowIdx + 1\n                };\n            case leftKey:\n                return {\n                    idx: idx - 1,\n                    rowIdx\n                };\n            case rightKey:\n                return {\n                    idx: idx + 1,\n                    rowIdx\n                };\n            case \"Tab\":\n                return {\n                    idx: idx + (shiftKey ? -1 : 1),\n                    rowIdx\n                };\n            case \"Home\":\n                if (isRowSelected) return {\n                    idx,\n                    rowIdx: minRowIdx\n                };\n                return {\n                    idx: 0,\n                    rowIdx: ctrlKey ? minRowIdx : rowIdx\n                };\n            case \"End\":\n                if (isRowSelected) return {\n                    idx,\n                    rowIdx: maxRowIdx\n                };\n                return {\n                    idx: maxColIdx,\n                    rowIdx: ctrlKey ? maxRowIdx : rowIdx\n                };\n            case \"PageUp\":\n                {\n                    if (selectedPosition.rowIdx === minRowIdx) return selectedPosition;\n                    const nextRowY = getRowTop(rowIdx) + getRowHeight(rowIdx) - clientHeight;\n                    return {\n                        idx,\n                        rowIdx: nextRowY > 0 ? findRowIdx(nextRowY) : 0\n                    };\n                }\n            case \"PageDown\":\n                {\n                    if (selectedPosition.rowIdx >= rows.length) return selectedPosition;\n                    const nextRowY = getRowTop(rowIdx) + clientHeight;\n                    return {\n                        idx,\n                        rowIdx: nextRowY < totalRowHeight ? findRowIdx(nextRowY) : rows.length - 1\n                    };\n                }\n            default:\n                return selectedPosition;\n        }\n    }\n    function navigate(event) {\n        const { key, shiftKey } = event;\n        let cellNavigationMode = \"NONE\";\n        if (key === \"Tab\") {\n            if (canExitGrid({\n                shiftKey,\n                maxColIdx,\n                minRowIdx,\n                maxRowIdx,\n                selectedPosition\n            })) {\n                commitEditorChanges();\n                return;\n            }\n            cellNavigationMode = \"CHANGE_ROW\";\n        }\n        event.preventDefault();\n        const ctrlKey = isCtrlKeyHeldDown(event);\n        const nextPosition = getNextPosition(key, ctrlKey, shiftKey);\n        if (isSamePosition(selectedPosition, nextPosition)) return;\n        const nextSelectedCellPosition = getNextSelectedCellPosition({\n            moveUp: key === \"ArrowUp\",\n            moveNext: key === rightKey || key === \"Tab\" && !shiftKey,\n            columns,\n            colSpanColumns,\n            rows,\n            topSummaryRows,\n            bottomSummaryRows,\n            minRowIdx,\n            mainHeaderRowIdx,\n            maxRowIdx,\n            lastFrozenColumnIndex,\n            cellNavigationMode,\n            currentPosition: selectedPosition,\n            nextPosition,\n            isCellWithinBounds: isCellWithinSelectionBounds\n        });\n        selectCell(nextSelectedCellPosition);\n    }\n    function getDraggedOverCellIdx(currentRowIdx) {\n        if (draggedOverRowIdx === undefined) return;\n        const { rowIdx } = selectedPosition;\n        const isDraggedOver = rowIdx < draggedOverRowIdx ? rowIdx < currentRowIdx && currentRowIdx <= draggedOverRowIdx : rowIdx > currentRowIdx && currentRowIdx >= draggedOverRowIdx;\n        return isDraggedOver ? selectedPosition.idx : undefined;\n    }\n    function focusCellOrCellContent() {\n        const cell = getCellToScroll(gridRef.current);\n        if (cell === null) return;\n        scrollIntoView(cell);\n        const elementToFocus = cell.querySelector('[tabindex=\"0\"]') ?? cell;\n        elementToFocus.focus({\n            preventScroll: true\n        });\n    }\n    function renderDragHandle() {\n        if (onFill == null || selectedPosition.mode === \"EDIT\" || !isCellWithinViewportBounds(selectedPosition)) {\n            return;\n        }\n        const { idx, rowIdx } = selectedPosition;\n        const column = columns[idx];\n        if (column.renderEditCell == null || column.editable === false) {\n            return;\n        }\n        const columnWidth = getColumnWidth(column);\n        return /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(DragHandle, {\n            gridRowStart: headerAndTopSummaryRowsCount + rowIdx + 1,\n            rows: rows,\n            column: column,\n            columnWidth: columnWidth,\n            maxColIdx: maxColIdx,\n            isLastRow: rowIdx === maxRowIdx,\n            selectedPosition: selectedPosition,\n            isCellEditable: isCellEditable,\n            latestDraggedOverRowIdx: latestDraggedOverRowIdx,\n            onRowsChange: onRowsChange,\n            onClick: focusCellOrCellContent,\n            onFill: onFill,\n            setDragging: setDragging,\n            setDraggedOverRowIdx: setDraggedOverRowIdx\n        });\n    }\n    function getCellEditor(rowIdx) {\n        if (selectedPosition.rowIdx !== rowIdx || selectedPosition.mode === \"SELECT\") return;\n        const { idx, row } = selectedPosition;\n        const column = columns[idx];\n        const colSpan = getColSpan(column, lastFrozenColumnIndex, {\n            type: \"ROW\",\n            row\n        });\n        const closeEditor = (shouldFocusCell)=>{\n            shouldFocusCellRef.current = shouldFocusCell;\n            setSelectedPosition(({ idx, rowIdx })=>({\n                    idx,\n                    rowIdx,\n                    mode: \"SELECT\"\n                }));\n        };\n        const onRowChange = (row, commitChanges, shouldFocusCell)=>{\n            if (commitChanges) {\n                (0,react_dom__WEBPACK_IMPORTED_MODULE_1__.flushSync)(()=>{\n                    updateRow(column, selectedPosition.rowIdx, row);\n                    closeEditor(shouldFocusCell);\n                });\n            } else {\n                setSelectedPosition((position)=>({\n                        ...position,\n                        row\n                    }));\n            }\n        };\n        if (rows[selectedPosition.rowIdx] !== selectedPosition.originalRow) {\n            closeEditor(false);\n        }\n        return /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(EditCell, {\n            column: column,\n            colSpan: colSpan,\n            row: row,\n            rowIdx: rowIdx,\n            onRowChange: onRowChange,\n            closeEditor: closeEditor,\n            onKeyDown: onCellKeyDown,\n            navigate: navigate\n        }, column.key);\n    }\n    function getRowViewportColumns(rowIdx) {\n        const selectedColumn = selectedPosition.idx === -1 ? undefined : columns[selectedPosition.idx];\n        if (selectedColumn !== undefined && selectedPosition.rowIdx === rowIdx && !viewportColumns.includes(selectedColumn)) {\n            return selectedPosition.idx > colOverscanEndIdx ? [\n                ...viewportColumns,\n                selectedColumn\n            ] : [\n                ...viewportColumns.slice(0, lastFrozenColumnIndex + 1),\n                selectedColumn,\n                ...viewportColumns.slice(lastFrozenColumnIndex + 1)\n            ];\n        }\n        return viewportColumns;\n    }\n    function getViewportRows() {\n        const rowElements = [];\n        const { idx: selectedIdx, rowIdx: selectedRowIdx } = selectedPosition;\n        const startRowIdx = selectedCellIsWithinViewportBounds && selectedRowIdx < rowOverscanStartIdx ? rowOverscanStartIdx - 1 : rowOverscanStartIdx;\n        const endRowIdx = selectedCellIsWithinViewportBounds && selectedRowIdx > rowOverscanEndIdx ? rowOverscanEndIdx + 1 : rowOverscanEndIdx;\n        for(let viewportRowIdx = startRowIdx; viewportRowIdx <= endRowIdx; viewportRowIdx++){\n            const isRowOutsideViewport = viewportRowIdx === rowOverscanStartIdx - 1 || viewportRowIdx === rowOverscanEndIdx + 1;\n            const rowIdx = isRowOutsideViewport ? selectedRowIdx : viewportRowIdx;\n            let rowColumns = viewportColumns;\n            const selectedColumn = selectedIdx === -1 ? undefined : columns[selectedIdx];\n            if (selectedColumn !== undefined) {\n                if (isRowOutsideViewport) {\n                    rowColumns = [\n                        selectedColumn\n                    ];\n                } else {\n                    rowColumns = getRowViewportColumns(rowIdx);\n                }\n            }\n            const row = rows[rowIdx];\n            const gridRowStart = headerAndTopSummaryRowsCount + rowIdx + 1;\n            let key = rowIdx;\n            let isRowSelected = false;\n            if (typeof rowKeyGetter === \"function\") {\n                key = rowKeyGetter(row);\n                isRowSelected = selectedRows?.has(key) ?? false;\n            }\n            rowElements.push(renderRow(key, {\n                \"aria-rowindex\": headerAndTopSummaryRowsCount + rowIdx + 1,\n                \"aria-selected\": isSelectable ? isRowSelected : undefined,\n                rowIdx,\n                row,\n                viewportColumns: rowColumns,\n                isRowSelected,\n                onCellClick: onCellClickLatest,\n                onCellDoubleClick: onCellDoubleClickLatest,\n                onCellContextMenu: onCellContextMenuLatest,\n                rowClass,\n                gridRowStart,\n                copiedCellIdx: copiedCell !== null && copiedCell.row === row ? columns.findIndex((c)=>c.key === copiedCell.columnKey) : undefined,\n                selectedCellIdx: selectedRowIdx === rowIdx ? selectedIdx : undefined,\n                draggedOverCellIdx: getDraggedOverCellIdx(rowIdx),\n                setDraggedOverRowIdx: isDragging ? setDraggedOverRowIdx : undefined,\n                lastFrozenColumnIndex,\n                onRowChange: handleFormatterRowChangeLatest,\n                selectCell: selectCellLatest,\n                selectedCellEditor: getCellEditor(rowIdx)\n            }));\n        }\n        return rowElements;\n    }\n    if (selectedPosition.idx > maxColIdx || selectedPosition.rowIdx > maxRowIdx) {\n        setSelectedPosition({\n            idx: -1,\n            rowIdx: minRowIdx - 1,\n            mode: \"SELECT\"\n        });\n        setDraggedOverRowIdx(undefined);\n    }\n    let templateRows = `repeat(${headerRowsCount}, ${headerRowHeight}px)`;\n    if (topSummaryRowsCount > 0) {\n        templateRows += ` repeat(${topSummaryRowsCount}, ${summaryRowHeight}px)`;\n    }\n    if (rows.length > 0) {\n        templateRows += gridTemplateRows;\n    }\n    if (bottomSummaryRowsCount > 0) {\n        templateRows += ` repeat(${bottomSummaryRowsCount}, ${summaryRowHeight}px)`;\n    }\n    const isGroupRowFocused = selectedPosition.idx === -1 && selectedPosition.rowIdx !== minRowIdx - 1;\n    return /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsxs)(\"div\", {\n        role: role,\n        \"aria-label\": ariaLabel,\n        \"aria-labelledby\": ariaLabelledBy,\n        \"aria-describedby\": ariaDescribedBy,\n        \"aria-multiselectable\": isSelectable ? true : undefined,\n        \"aria-colcount\": columns.length,\n        \"aria-rowcount\": ariaRowCount,\n        className: (0,clsx__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(rootClassname, className, isDragging && viewportDraggingClassname),\n        style: {\n            ...style,\n            scrollPaddingInlineStart: selectedPosition.idx > lastFrozenColumnIndex || scrollToPosition?.idx !== undefined ? `${totalFrozenColumnWidth}px` : undefined,\n            scrollPaddingBlock: isRowIdxWithinViewportBounds(selectedPosition.rowIdx) || scrollToPosition?.rowIdx !== undefined ? `${headerRowsHeight + topSummaryRowsCount * summaryRowHeight}px ${bottomSummaryRowsCount * summaryRowHeight}px` : undefined,\n            gridTemplateColumns,\n            gridTemplateRows: templateRows,\n            \"--rdg-header-row-height\": `${headerRowHeight}px`,\n            \"--rdg-scroll-height\": `${scrollHeight}px`,\n            ...layoutCssVars\n        },\n        dir: direction,\n        ref: gridRef,\n        onScroll: handleScroll,\n        onKeyDown: handleKeyDown,\n        \"data-testid\": testId,\n        children: [\n            /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(DataGridDefaultRenderersProvider, {\n                value: defaultGridComponents,\n                children: /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsxs)(RowSelectionChangeProvider, {\n                    value: selectRowLatest,\n                    children: [\n                        /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsxs)(RowSelectionProvider, {\n                            value: allRowsSelected,\n                            children: [\n                                Array.from({\n                                    length: groupedColumnHeaderRowsCount\n                                }, (_, index)=>/*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(GroupedColumnHeaderRow$1, {\n                                        rowIdx: index + 1,\n                                        level: -groupedColumnHeaderRowsCount + index,\n                                        columns: getRowViewportColumns(minRowIdx + index),\n                                        selectedCellIdx: selectedPosition.rowIdx === minRowIdx + index ? selectedPosition.idx : undefined,\n                                        selectCell: selectHeaderCellLatest\n                                    }, index)),\n                                /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(HeaderRow$1, {\n                                    rowIdx: headerRowsCount,\n                                    columns: getRowViewportColumns(mainHeaderRowIdx),\n                                    onColumnResize: handleColumnResizeLatest,\n                                    onColumnsReorder: onColumnsReorderLastest,\n                                    sortColumns: sortColumns,\n                                    onSortColumnsChange: onSortColumnsChangeLatest,\n                                    lastFrozenColumnIndex: lastFrozenColumnIndex,\n                                    selectedCellIdx: selectedPosition.rowIdx === mainHeaderRowIdx ? selectedPosition.idx : undefined,\n                                    selectCell: selectHeaderCellLatest,\n                                    shouldFocusGrid: !selectedCellIsWithinSelectionBounds,\n                                    direction: direction\n                                })\n                            ]\n                        }),\n                        rows.length === 0 && noRowsFallback ? noRowsFallback : /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.Fragment, {\n                            children: [\n                                topSummaryRows?.map((row, rowIdx)=>{\n                                    const gridRowStart = headerRowsCount + 1 + rowIdx;\n                                    const summaryRowIdx = mainHeaderRowIdx + 1 + rowIdx;\n                                    const isSummaryRowSelected = selectedPosition.rowIdx === summaryRowIdx;\n                                    const top = headerRowsHeight + summaryRowHeight * rowIdx;\n                                    return /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(SummaryRow$1, {\n                                        \"aria-rowindex\": gridRowStart,\n                                        rowIdx: summaryRowIdx,\n                                        gridRowStart: gridRowStart,\n                                        row: row,\n                                        top: top,\n                                        bottom: undefined,\n                                        viewportColumns: getRowViewportColumns(summaryRowIdx),\n                                        lastFrozenColumnIndex: lastFrozenColumnIndex,\n                                        selectedCellIdx: isSummaryRowSelected ? selectedPosition.idx : undefined,\n                                        isTop: true,\n                                        selectCell: selectCellLatest\n                                    }, rowIdx);\n                                }),\n                                getViewportRows(),\n                                bottomSummaryRows?.map((row, rowIdx)=>{\n                                    const gridRowStart = headerAndTopSummaryRowsCount + rows.length + rowIdx + 1;\n                                    const summaryRowIdx = rows.length + rowIdx;\n                                    const isSummaryRowSelected = selectedPosition.rowIdx === summaryRowIdx;\n                                    const top = clientHeight > totalRowHeight ? gridHeight - summaryRowHeight * (bottomSummaryRows.length - rowIdx) : undefined;\n                                    const bottom = top === undefined ? summaryRowHeight * (bottomSummaryRows.length - 1 - rowIdx) : undefined;\n                                    return /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(SummaryRow$1, {\n                                        \"aria-rowindex\": ariaRowCount - bottomSummaryRowsCount + rowIdx + 1,\n                                        rowIdx: summaryRowIdx,\n                                        gridRowStart: gridRowStart,\n                                        row: row,\n                                        top: top,\n                                        bottom: bottom,\n                                        viewportColumns: getRowViewportColumns(summaryRowIdx),\n                                        lastFrozenColumnIndex: lastFrozenColumnIndex,\n                                        selectedCellIdx: isSummaryRowSelected ? selectedPosition.idx : undefined,\n                                        isTop: false,\n                                        selectCell: selectCellLatest\n                                    }, rowIdx);\n                                })\n                            ]\n                        })\n                    ]\n                })\n            }),\n            renderDragHandle(),\n            renderMeasuringCells(viewportColumns),\n            isTreeGrid && /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(\"div\", {\n                ref: focusSinkRef,\n                tabIndex: isGroupRowFocused ? 0 : -1,\n                className: (0,clsx__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(focusSinkClassname, isGroupRowFocused && [\n                    rowSelected,\n                    lastFrozenColumnIndex !== -1 && rowSelectedWithFrozenCell\n                ], !isRowIdxWithinViewportBounds(selectedPosition.rowIdx) && focusSinkHeaderAndSummaryClassname),\n                style: {\n                    gridRowStart: selectedPosition.rowIdx + headerAndTopSummaryRowsCount + 1\n                }\n            }),\n            scrollToPosition !== null && /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(ScrollToCell, {\n                scrollToPosition: scrollToPosition,\n                setScrollToCellPosition: setScrollToPosition,\n                gridElement: gridRef.current\n            })\n        ]\n    });\n}\nfunction getCellToScroll(gridEl) {\n    return gridEl.querySelector(':scope > [role=\"row\"] > [tabindex=\"0\"]');\n}\nfunction isSamePosition(p1, p2) {\n    return p1.idx === p2.idx && p1.rowIdx === p2.rowIdx;\n}\nconst DataGrid$1 = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(DataGrid);\nfunction GroupCell({ id, groupKey, childRows, isExpanded, isCellSelected, column, row, groupColumnIndex, isGroupByColumn, toggleGroup: toggleGroupWrapper }) {\n    const { tabIndex, childTabIndex, onFocus } = useRovingTabIndex(isCellSelected);\n    function toggleGroup() {\n        toggleGroupWrapper(id);\n    }\n    const isLevelMatching = isGroupByColumn && groupColumnIndex === column.idx;\n    return /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(\"div\", {\n        role: \"gridcell\",\n        \"aria-colindex\": column.idx + 1,\n        \"aria-selected\": isCellSelected,\n        tabIndex: tabIndex,\n        className: getCellClassname(column),\n        style: {\n            ...getCellStyle(column),\n            cursor: isLevelMatching ? \"pointer\" : \"default\"\n        },\n        onClick: isLevelMatching ? toggleGroup : undefined,\n        onFocus: onFocus,\n        children: (!isGroupByColumn || isLevelMatching) && column.renderGroupCell?.({\n            groupKey,\n            childRows,\n            column,\n            row,\n            isExpanded,\n            tabIndex: childTabIndex,\n            toggleGroup\n        })\n    }, column.key);\n}\nconst GroupCell$1 = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.memo)(GroupCell);\nconst groupRow = \"g1yxluv37-0-0-beta-46\";\nconst groupRowClassname = `rdg-group-row ${groupRow}`;\nfunction GroupedRow({ className, row, rowIdx, viewportColumns, selectedCellIdx, isRowSelected, selectCell, gridRowStart, groupBy, toggleGroup, ...props }) {\n    const idx = viewportColumns[0].key === SELECT_COLUMN_KEY ? row.level + 1 : row.level;\n    function handleSelectGroup() {\n        selectCell({\n            rowIdx,\n            idx: -1\n        });\n    }\n    return /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(RowSelectionProvider, {\n        value: isRowSelected,\n        children: /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(\"div\", {\n            role: \"row\",\n            \"aria-level\": row.level + 1,\n            \"aria-setsize\": row.setSize,\n            \"aria-posinset\": row.posInSet + 1,\n            \"aria-expanded\": row.isExpanded,\n            className: (0,clsx__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(rowClassname, groupRowClassname, `rdg-row-${rowIdx % 2 === 0 ? \"even\" : \"odd\"}`, className, selectedCellIdx === -1 && rowSelectedClassname),\n            onClick: handleSelectGroup,\n            style: getRowStyle(gridRowStart),\n            ...props,\n            children: viewportColumns.map((column)=>/*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(GroupCell$1, {\n                    id: row.id,\n                    groupKey: row.groupKey,\n                    childRows: row.childRows,\n                    isExpanded: row.isExpanded,\n                    isCellSelected: selectedCellIdx === column.idx,\n                    column: column,\n                    row: row,\n                    groupColumnIndex: idx,\n                    toggleGroup: toggleGroup,\n                    isGroupByColumn: groupBy.includes(column.key)\n                }, column.key))\n        })\n    });\n}\nconst GroupedRow$1 = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.memo)(GroupedRow);\nfunction TreeDataGrid({ columns: rawColumns, rows: rawRows, rowHeight: rawRowHeight, rowKeyGetter: rawRowKeyGetter, onCellKeyDown: rawOnCellKeyDown, onRowsChange, selectedRows: rawSelectedRows, onSelectedRowsChange: rawOnSelectedRowsChange, renderers, groupBy: rawGroupBy, rowGrouper, expandedGroupIds, onExpandedGroupIdsChange, ...props }, ref) {\n    const defaultRenderers = useDefaultRenderers();\n    const rawRenderRow = renderers?.renderRow ?? defaultRenderers?.renderRow ?? defaultRenderRow;\n    const headerAndTopSummaryRowsCount = 1 + (props.topSummaryRows?.length ?? 0);\n    const isRtl = props.direction === \"rtl\";\n    const leftKey = isRtl ? \"ArrowRight\" : \"ArrowLeft\";\n    const rightKey = isRtl ? \"ArrowLeft\" : \"ArrowRight\";\n    const toggleGroupLatest = useLatestFunc(toggleGroup);\n    const { columns, groupBy } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>{\n        const columns = [\n            ...rawColumns\n        ].sort(({ key: aKey }, { key: bKey })=>{\n            if (aKey === SELECT_COLUMN_KEY) return -1;\n            if (bKey === SELECT_COLUMN_KEY) return 1;\n            if (rawGroupBy.includes(aKey)) {\n                if (rawGroupBy.includes(bKey)) {\n                    return rawGroupBy.indexOf(aKey) - rawGroupBy.indexOf(bKey);\n                }\n                return -1;\n            }\n            if (rawGroupBy.includes(bKey)) return 1;\n            return 0;\n        });\n        const groupBy = [];\n        for (const [index, column] of columns.entries()){\n            if (rawGroupBy.includes(column.key)) {\n                groupBy.push(column.key);\n                columns[index] = {\n                    ...column,\n                    frozen: true,\n                    renderCell: ()=>null,\n                    renderGroupCell: column.renderGroupCell ?? renderToggleGroup,\n                    editable: false\n                };\n            }\n        }\n        return {\n            columns,\n            groupBy\n        };\n    }, [\n        rawColumns,\n        rawGroupBy\n    ]);\n    const [groupedRows, rowsCount] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>{\n        if (groupBy.length === 0) return [\n            undefined,\n            rawRows.length\n        ];\n        const groupRows = (rows, [groupByKey, ...remainingGroupByKeys], startRowIndex)=>{\n            let groupRowsCount = 0;\n            const groups = {};\n            for (const [key, childRows] of Object.entries(rowGrouper(rows, groupByKey))){\n                const [childGroups, childRowsCount] = remainingGroupByKeys.length === 0 ? [\n                    childRows,\n                    childRows.length\n                ] : groupRows(childRows, remainingGroupByKeys, startRowIndex + groupRowsCount + 1);\n                groups[key] = {\n                    childRows,\n                    childGroups,\n                    startRowIndex: startRowIndex + groupRowsCount\n                };\n                groupRowsCount += childRowsCount + 1;\n            }\n            return [\n                groups,\n                groupRowsCount\n            ];\n        };\n        return groupRows(rawRows, groupBy, 0);\n    }, [\n        groupBy,\n        rowGrouper,\n        rawRows\n    ]);\n    const [rows, isGroupRow] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>{\n        const allGroupRows = new Set();\n        if (!groupedRows) return [\n            rawRows,\n            isGroupRow\n        ];\n        const flattenedRows = [];\n        const expandGroup = (rows, parentId, level)=>{\n            if (isReadonlyArray(rows)) {\n                flattenedRows.push(...rows);\n                return;\n            }\n            Object.keys(rows).forEach((groupKey, posInSet, keys)=>{\n                const id = parentId !== undefined ? `${parentId}__${groupKey}` : groupKey;\n                const isExpanded = expandedGroupIds.has(id);\n                const { childRows, childGroups, startRowIndex } = rows[groupKey];\n                const groupRow = {\n                    id,\n                    parentId,\n                    groupKey,\n                    isExpanded,\n                    childRows,\n                    level,\n                    posInSet,\n                    startRowIndex,\n                    setSize: keys.length\n                };\n                flattenedRows.push(groupRow);\n                allGroupRows.add(groupRow);\n                if (isExpanded) {\n                    expandGroup(childGroups, id, level + 1);\n                }\n            });\n        };\n        expandGroup(groupedRows, undefined, 0);\n        return [\n            flattenedRows,\n            isGroupRow\n        ];\n        function isGroupRow(row) {\n            return allGroupRows.has(row);\n        }\n    }, [\n        expandedGroupIds,\n        groupedRows,\n        rawRows\n    ]);\n    const rowHeight = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>{\n        if (typeof rawRowHeight === \"function\") {\n            return (row)=>{\n                if (isGroupRow(row)) {\n                    return rawRowHeight({\n                        type: \"GROUP\",\n                        row\n                    });\n                }\n                return rawRowHeight({\n                    type: \"ROW\",\n                    row\n                });\n            };\n        }\n        return rawRowHeight;\n    }, [\n        isGroupRow,\n        rawRowHeight\n    ]);\n    const getParentRowAndIndex = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((row)=>{\n        const rowIdx = rows.indexOf(row);\n        for(let i = rowIdx - 1; i >= 0; i--){\n            const parentRow = rows[i];\n            if (isGroupRow(parentRow) && (!isGroupRow(row) || row.parentId === parentRow.id)) {\n                return [\n                    parentRow,\n                    i\n                ];\n            }\n        }\n        return undefined;\n    }, [\n        isGroupRow,\n        rows\n    ]);\n    const rowKeyGetter = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((row)=>{\n        if (isGroupRow(row)) {\n            return row.id;\n        }\n        if (typeof rawRowKeyGetter === \"function\") {\n            return rawRowKeyGetter(row);\n        }\n        const parentRowAndIndex = getParentRowAndIndex(row);\n        if (parentRowAndIndex !== undefined) {\n            const { startRowIndex, childRows } = parentRowAndIndex[0];\n            const groupIndex = childRows.indexOf(row);\n            return startRowIndex + groupIndex + 1;\n        }\n        return rows.indexOf(row);\n    }, [\n        getParentRowAndIndex,\n        isGroupRow,\n        rawRowKeyGetter,\n        rows\n    ]);\n    const selectedRows = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>{\n        if (rawSelectedRows == null) return null;\n        assertIsValidKeyGetter(rawRowKeyGetter);\n        const selectedRows = new Set(rawSelectedRows);\n        for (const row of rows){\n            if (isGroupRow(row)) {\n                const isGroupRowSelected = row.childRows.every((cr)=>rawSelectedRows.has(rawRowKeyGetter(cr)));\n                if (isGroupRowSelected) {\n                    selectedRows.add(row.id);\n                }\n            }\n        }\n        return selectedRows;\n    }, [\n        isGroupRow,\n        rawRowKeyGetter,\n        rawSelectedRows,\n        rows\n    ]);\n    function onSelectedRowsChange(newSelectedRows) {\n        if (!rawOnSelectedRowsChange) return;\n        assertIsValidKeyGetter(rawRowKeyGetter);\n        const newRawSelectedRows = new Set(rawSelectedRows);\n        for (const row of rows){\n            const key = rowKeyGetter(row);\n            if (selectedRows?.has(key) && !newSelectedRows.has(key)) {\n                if (isGroupRow(row)) {\n                    for (const cr of row.childRows){\n                        newRawSelectedRows.delete(rawRowKeyGetter(cr));\n                    }\n                } else {\n                    newRawSelectedRows.delete(key);\n                }\n            } else if (!selectedRows?.has(key) && newSelectedRows.has(key)) {\n                if (isGroupRow(row)) {\n                    for (const cr of row.childRows){\n                        newRawSelectedRows.add(rawRowKeyGetter(cr));\n                    }\n                } else {\n                    newRawSelectedRows.add(key);\n                }\n            }\n        }\n        rawOnSelectedRowsChange(newRawSelectedRows);\n    }\n    function handleKeyDown(args, event) {\n        rawOnCellKeyDown?.(args, event);\n        if (event.isGridDefaultPrevented()) return;\n        if (args.mode === \"EDIT\") return;\n        const { column, rowIdx, selectCell } = args;\n        const idx = column?.idx ?? -1;\n        const row = rows[rowIdx];\n        if (!isGroupRow(row)) return;\n        if (idx === -1 && (event.key === leftKey && row.isExpanded || event.key === rightKey && !row.isExpanded)) {\n            event.preventDefault();\n            event.preventGridDefault();\n            toggleGroup(row.id);\n        }\n        if (idx === -1 && event.key === leftKey && !row.isExpanded && row.level !== 0) {\n            const parentRowAndIndex = getParentRowAndIndex(row);\n            if (parentRowAndIndex !== undefined) {\n                event.preventGridDefault();\n                selectCell({\n                    idx,\n                    rowIdx: parentRowAndIndex[1]\n                });\n            }\n        }\n        if (isCtrlKeyHeldDown(event) && (event.keyCode === 67 || event.keyCode === 86)) {\n            event.preventGridDefault();\n        }\n    }\n    function handleRowsChange(updatedRows, { indexes, column }) {\n        if (!onRowsChange) return;\n        const updatedRawRows = [\n            ...rawRows\n        ];\n        const rawIndexes = [];\n        for (const index of indexes){\n            const rawIndex = rawRows.indexOf(rows[index]);\n            updatedRawRows[rawIndex] = updatedRows[index];\n            rawIndexes.push(rawIndex);\n        }\n        onRowsChange(updatedRawRows, {\n            indexes: rawIndexes,\n            column\n        });\n    }\n    function toggleGroup(groupId) {\n        const newExpandedGroupIds = new Set(expandedGroupIds);\n        if (newExpandedGroupIds.has(groupId)) {\n            newExpandedGroupIds.delete(groupId);\n        } else {\n            newExpandedGroupIds.add(groupId);\n        }\n        onExpandedGroupIdsChange(newExpandedGroupIds);\n    }\n    function renderRow(key, { row, rowClass, onCellClick, onCellDoubleClick, onCellContextMenu, onRowChange, lastFrozenColumnIndex, copiedCellIdx, draggedOverCellIdx, setDraggedOverRowIdx, selectedCellEditor, ...rowProps }) {\n        if (isGroupRow(row)) {\n            const { startRowIndex } = row;\n            return /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(GroupedRow$1, {\n                ...rowProps,\n                \"aria-rowindex\": headerAndTopSummaryRowsCount + startRowIndex + 1,\n                row: row,\n                groupBy: groupBy,\n                toggleGroup: toggleGroupLatest\n            }, key);\n        }\n        let ariaRowIndex = rowProps[\"aria-rowindex\"];\n        const parentRowAndIndex = getParentRowAndIndex(row);\n        if (parentRowAndIndex !== undefined) {\n            const { startRowIndex, childRows } = parentRowAndIndex[0];\n            const groupIndex = childRows.indexOf(row);\n            ariaRowIndex = startRowIndex + headerAndTopSummaryRowsCount + groupIndex + 2;\n        }\n        return rawRenderRow(key, {\n            ...rowProps,\n            \"aria-rowindex\": ariaRowIndex,\n            row,\n            rowClass,\n            onCellClick,\n            onCellDoubleClick,\n            onCellContextMenu,\n            onRowChange,\n            lastFrozenColumnIndex,\n            copiedCellIdx,\n            draggedOverCellIdx,\n            setDraggedOverRowIdx,\n            selectedCellEditor\n        });\n    }\n    return /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(DataGrid$1, {\n        ...props,\n        role: \"treegrid\",\n        \"aria-rowcount\": rowsCount + 1 + (props.topSummaryRows?.length ?? 0) + (props.bottomSummaryRows?.length ?? 0),\n        ref: ref,\n        columns: columns,\n        rows: rows,\n        rowHeight: rowHeight,\n        rowKeyGetter: rowKeyGetter,\n        onRowsChange: handleRowsChange,\n        selectedRows: selectedRows,\n        onSelectedRowsChange: onSelectedRowsChange,\n        onCellKeyDown: handleKeyDown,\n        renderers: {\n            ...renderers,\n            renderRow\n        }\n    });\n}\nfunction isReadonlyArray(arr) {\n    return Array.isArray(arr);\n}\nconst TreeDataGrid$1 = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(TreeDataGrid);\nconst textEditorInternalClassname = \"t7vyx3i7-0-0-beta-46\";\nconst textEditorClassname = `rdg-text-editor ${textEditorInternalClassname}`;\nfunction autoFocusAndSelect(input) {\n    input?.focus();\n    input?.select();\n}\nfunction textEditor({ row, column, onRowChange, onClose }) {\n    return /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(\"input\", {\n        className: textEditorClassname,\n        ref: autoFocusAndSelect,\n        value: row[column.key],\n        onChange: (event)=>onRowChange({\n                ...row,\n                [column.key]: event.target.value\n            }),\n        onBlur: ()=>onClose(true, false)\n    });\n}\n //# sourceMappingURL=bundle.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-data-grid/lib/bundle.js\n");

/***/ })

};
;